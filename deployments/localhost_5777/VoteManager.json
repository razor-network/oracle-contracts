{"metadata":"{\"compiler\":{\"version\":\"0.8.4\"},\"sources\":{\"contracts/Core/VoteManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"./interface/IParameters.sol\\\";\\nimport \\\"./interface/IStakeManager.sol\\\";\\nimport \\\"./interface/IRewardManager.sol\\\";\\nimport \\\"./interface/IBlockManager.sol\\\";\\nimport \\\"./storage/VoteStorage.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\nimport \\\"./ACL.sol\\\";\\n\\ncontract VoteManager is Initializable, ACL, VoteStorage {\\n    IParameters public parameters;\\n    IStakeManager public stakeManager;\\n    IRewardManager public rewardManager;\\n    IBlockManager public blockManager;\\n\\n    event Committed(uint256 epoch, uint256 stakerId, bytes32 commitment, uint256 timestamp);\\n    event Revealed(uint256 epoch, uint256 stakerId, uint256 stake, uint256[] values, uint256 timestamp);\\n\\n    modifier checkEpoch(uint256 epoch) {\\n        require(epoch == parameters.getEpoch(), \\\"incorrect epoch\\\");\\n        _;\\n    }\\n\\n    modifier checkState(uint256 state) {\\n        require(state == parameters.getState(), \\\"incorrect state\\\");\\n        _;\\n    }\\n\\n    function initialize(\\n        address stakeManagerAddress,\\n        address rewardManagerAddress,\\n        address blockManagerAddress,\\n        address parametersAddress\\n    ) external initializer onlyRole(DEFAULT_ADMIN_ROLE) {\\n        stakeManager = IStakeManager(stakeManagerAddress);\\n        rewardManager = IRewardManager(rewardManagerAddress);\\n        blockManager = IBlockManager(blockManagerAddress);\\n        parameters = IParameters(parametersAddress);\\n    }\\n\\n    function commit(uint256 epoch, bytes32 commitment) external initialized checkEpoch(epoch) checkState(parameters.commit()) {\\n        uint256 stakerId = stakeManager.getStakerId(msg.sender);\\n        require(commitments[epoch][stakerId] == 0x0, \\\"already commited\\\");\\n        Structs.Staker memory thisStaker = stakeManager.getStaker(stakerId);\\n\\n        // Switch to call confirm block only when block in previous epoch has not been confirmed\\n        // and if previous epoch do have proposed blocks\\n\\n        if (blockManager.getBlock(epoch - 1).proposerId == 0 && blockManager.getNumProposedBlocks(epoch - 1) > 0) {\\n            blockManager.confirmBlock();\\n        }\\n        rewardManager.givePenalties(stakerId, epoch);\\n\\n        if (thisStaker.stake >= parameters.minStake()) {\\n            commitments[epoch][stakerId] = commitment;\\n            stakeManager.updateCommitmentEpoch(stakerId);\\n            emit Committed(epoch, stakerId, commitment, block.timestamp);\\n        }\\n    }\\n\\n    function reveal(\\n        uint256 epoch,\\n        bytes32 root,\\n        uint256[] memory values,\\n        bytes32[][] memory proofs,\\n        bytes32 secret,\\n        address stakerAddress\\n    ) external initialized checkEpoch(epoch) {\\n        uint256 thisStakerId = stakeManager.getStakerId(stakerAddress);\\n        require(thisStakerId > 0, \\\"Structs.Staker does not exist\\\");\\n        Structs.Staker memory thisStaker = stakeManager.getStaker(thisStakerId);\\n        require(commitments[epoch][thisStakerId] != 0x0, \\\"not commited or already revealed\\\");\\n        require(keccak256(abi.encodePacked(epoch, root, secret)) == commitments[epoch][thisStakerId], \\\"incorrect secret/value\\\");\\n\\n        //if revealing self\\n        if (msg.sender == stakerAddress) {\\n            require(parameters.getState() == parameters.reveal(), \\\"Not reveal state\\\");\\n            require(thisStaker.stake > 0, \\\"nonpositive stake\\\");\\n            for (uint256 i = 0; i < values.length; i++) {\\n                require(MerkleProof.verify(proofs[i], root, keccak256(abi.encodePacked(values[i]))), \\\"invalid merkle proof\\\");\\n                uint256 influence = stakeManager.getInfluence(thisStakerId);\\n                votes[epoch][thisStakerId][i] = Structs.Vote(values[i], thisStaker.stake);\\n                voteWeights[epoch][i][values[i]] = voteWeights[epoch][i][values[i]] + influence;\\n                totalInfluenceRevealed[epoch][i] = totalInfluenceRevealed[epoch][i] + influence;\\n            }\\n\\n            commitments[epoch][thisStakerId] = 0x0;\\n            stakeManager.setStakerEpochLastRevealed(thisStakerId, epoch);\\n\\n            emit Revealed(epoch, thisStakerId, thisStaker.stake, values, block.timestamp);\\n        } else {\\n            //bounty hunter revealing someone else's secret in commit state\\n            require(parameters.getState() == parameters.commit(), \\\"Not commit state\\\");\\n            commitments[epoch][thisStakerId] = 0x0;\\n            stakeManager.slash(thisStakerId, msg.sender, epoch);\\n        }\\n    }\\n\\n    function getCommitment(uint256 epoch, uint256 stakerId) public view returns (bytes32) {\\n        //epoch -> stakerid -> commitment\\n        return (commitments[epoch][stakerId]);\\n    }\\n\\n    function getVote(\\n        uint256 epoch,\\n        uint256 stakerId,\\n        uint256 assetId\\n    ) public view returns (Structs.Vote memory vote) {\\n        //epoch -> stakerid -> assetid -> vote\\n        return (votes[epoch][stakerId][assetId]);\\n    }\\n\\n    function getVoteWeight(\\n        uint256 epoch,\\n        uint256 assetId,\\n        uint256 voteValue\\n    ) public view returns (uint256) {\\n        //epoch -> assetid -> voteValue -> weight\\n        return (voteWeights[epoch][assetId][voteValue]);\\n    }\\n\\n    function getTotalInfluenceRevealed(uint256 epoch, uint256 assetId) public view returns (uint256) {\\n        // epoch -> asset -> stakeWeight\\n        return (totalInfluenceRevealed[epoch][assetId]);\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\"},\"contracts/Core/interface/IParameters.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IParameters {\\n    function commit() external view returns (uint32);\\n\\n    function reveal() external view returns (uint32);\\n\\n    function propose() external view returns (uint32);\\n\\n    function dispute() external view returns (uint32);\\n\\n    function burnAddress() external view returns (address);\\n\\n    function penaltyNotRevealNum() external view returns (uint256);\\n\\n    function penaltyNotRevealDenom() external view returns (uint256);\\n\\n    function resetLockPenalty() external view returns (uint256);\\n\\n    function minStake() external view returns (uint256);\\n\\n    function withdrawLockPeriod() external view returns (uint256);\\n\\n    function withdrawReleasePeriod() external view returns (uint256);\\n\\n    function maxAltBlocks() external view returns (uint256);\\n\\n    function epochLength() external view returns (uint256);\\n\\n    function numStates() external view returns (uint256);\\n\\n    function gracePeriod() external view returns (uint256);\\n\\n    function aggregationRange() external view returns (uint256);\\n\\n    function exposureDenominator() external view returns (uint256);\\n\\n    function slashPenaltyNum() external view returns (uint256);\\n\\n    function slashPenaltyDenom() external view returns (uint256);\\n\\n    function getEpoch() external view returns (uint256);\\n\\n    function getState() external view returns (uint256);\\n\\n    function maxAge() external view returns (uint256);\\n\\n    function escapeHatchEnabled() external view returns (bool);\\n\\n    function getAssetConfirmerHash() external view returns (bytes32);\\n\\n    function getBlockConfirmerHash() external view returns (bytes32);\\n\\n    function getStakeModifierHash() external view returns (bytes32);\\n\\n    function getStakerActivityUpdaterHash() external view returns (bytes32);\\n\\n    function getRewardModifierHash() external view returns (bytes32);\\n\\n    function getAssetModifierHash() external view returns (bytes32);\\n\\n    function getDefaultAdminHash() external view returns (bytes32);\\n}\\n\"},\"contracts/lib/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nlibrary Structs {\\n    struct Vote {\\n        uint256 value;\\n        uint256 weight;\\n    }\\n\\n    struct Staker {\\n        uint256 id;\\n        address _address;\\n        uint256 stake;\\n        uint256 age;\\n        uint256 epochStaked;\\n        uint256 epochLastCommitted;\\n        uint256 epochLastRevealed;\\n        bool acceptDelegation;\\n        uint256 commission;\\n        address tokenAddress;\\n    }\\n\\n    struct Lock {\\n        uint256 amount; //amount in sTokens\\n        uint256 withdrawAfter;\\n    }\\n\\n    struct Block {\\n        uint256 proposerId;\\n        uint256[] ids;\\n        uint256[] medians;\\n        uint256 iteration;\\n        uint256 biggestInfluence;\\n        bool valid;\\n    }\\n\\n    struct Dispute {\\n        uint256 accWeight;\\n        uint256 median;\\n        uint256 lastVisited;\\n        uint256 assetId;\\n    }\\n\\n    struct Job {\\n        uint256 id;\\n        uint256 epoch;\\n        string url;\\n        string selector;\\n        string name;\\n        bool repeat;\\n        bool active;\\n        address creator;\\n        uint256 result;\\n        uint256 assetType;\\n    }\\n\\n    struct Collection {\\n        uint256 id;\\n        string name;\\n        uint32 aggregationMethod;\\n        uint256[] jobIDs;\\n        mapping(uint256 => bool) jobIDExist;\\n        uint256 epoch;\\n        bool active;\\n        address creator;\\n        uint256 result;\\n        uint256 assetType;\\n    }\\n}\\n\"},\"contracts/Core/interface/IStakeManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../lib/Structs.sol\\\";\\n\\ninterface IStakeManager {\\n    function setStakerEpochLastRevealed(uint256 _id, uint256 _epochLastRevealed) external;\\n\\n    function updateCommitmentEpoch(uint256 stakerId) external;\\n\\n    function stake(uint256 epoch, uint256 amount) external;\\n\\n    function delegate(\\n        uint256 epoch,\\n        uint256 amount,\\n        uint256 stakerId\\n    ) external;\\n\\n    function unstake(uint256 epoch) external;\\n\\n    function withdraw(uint256 epoch) external;\\n\\n    function setDelegationAcceptance(bool status) external;\\n\\n    function setCommission(uint256 commission) external;\\n\\n    function decreaseCommission(uint256 commission) external;\\n\\n    function resetLock(uint256 stakerId) external;\\n\\n    function setStakerStake(\\n        uint256 _id,\\n        uint256 _stake,\\n        string memory _reason,\\n        uint256 _epoch\\n    ) external;\\n\\n    function slash(\\n        uint256 id,\\n        address bountyHunter,\\n        uint256 epoch\\n    ) external;\\n\\n    function setStakerAge(\\n        uint256 _id,\\n        uint256 _age,\\n        uint256 _epoch\\n    ) external;\\n\\n    function escape(address _address) external;\\n\\n    function getStakerId(address _address) external view returns (uint256);\\n\\n    function getStaker(uint256 _id) external view returns (Structs.Staker memory staker);\\n\\n    function getNumStakers() external view returns (uint256);\\n\\n    function getAge() external view returns (uint256);\\n\\n    function getInfluence(uint256 stakerId) external view returns (uint256);\\n}\\n\"},\"contracts/Core/interface/IRewardManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../lib/Structs.sol\\\";\\n\\ninterface IRewardManager {\\n    function givePenalties(uint256 stakerId, uint256 epoch) external;\\n\\n    function giveBlockReward(uint256 stakerId, uint256 epoch) external;\\n}\\n\"},\"contracts/Core/interface/IBlockManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../lib/Structs.sol\\\";\\n\\ninterface IBlockManager {\\n    // elected proposer proposes block.\\n    //we use a probabilistic method to elect stakers weighted by stake\\n    // protocol works like this.\\n    //select a staker pseudorandomly (not weighted by anything)\\n    // that staker then tosses a biased coin.\\n    //bias = hisStake/biggestStake. if its heads, he can propose block\\n    // end of iteration. try next iteration\\n    // note that only one staker or no stakers selected in each iteration.\\n    // stakers elected in higher iterations can also propose hoping that\\n    // stakers with lower iteration do not propose for some reason\\n    function propose(\\n        uint256 epoch,\\n        uint256[] memory ids,\\n        uint256[] memory medians,\\n        uint256 iteration,\\n        uint256 biggestInfluencerId\\n    ) external;\\n\\n    //anyone can give sorted votes in batches in dispute state\\n\\n    function giveSorted(\\n        uint256 epoch,\\n        uint256 assetId,\\n        uint256[] calldata sorted\\n    ) external;\\n\\n    function resetDispute(uint256 epoch) external;\\n\\n    function isElectedProposer(\\n        uint256 iteration,\\n        uint256 biggestInfluencerId,\\n        uint256 stakerId\\n    ) external;\\n\\n    function confirmBlock() external;\\n\\n    function getBlock(uint256 epoch) external view returns (Structs.Block memory _block);\\n\\n    function getBlockMedians(uint256 epoch) external view returns (uint256[] memory _blockMedians);\\n\\n    function getLowerCutoffs(uint256 epoch) external view returns (uint256[] memory _lowerCutoffs);\\n\\n    function getHigherCutoffs(uint256 epoch) external view returns (uint256[] memory _higherCutoffs);\\n\\n    function getProposedBlockMedians(uint256 epoch, uint256 proposedBlock) external view returns (uint256[] memory _blockMedians);\\n\\n    function getNumProposedBlocks(uint256 epoch) external view returns (uint256);\\n}\\n\"},\"contracts/Core/storage/VoteStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../lib/Structs.sol\\\";\\n\\ncontract VoteStorage {\\n    //epoch -> stakerid -> commitment\\n    mapping(uint256 => mapping(uint256 => bytes32)) public commitments;\\n    //epoch -> stakerid -> assetid -> vote\\n    mapping(uint256 => mapping(uint256 => mapping(uint256 => Structs.Vote))) public votes;\\n    // epoch -> asset -> stakeWeight\\n    mapping(uint256 => mapping(uint256 => uint256)) public totalInfluenceRevealed;\\n    //epoch - >assetid -> voteValue -> weight\\n    mapping(uint256 => mapping(uint256 => mapping(uint256 => uint256))) public voteWeights;\\n}\\n\"},\"contracts/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * Forked from OZ's (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/b9125001f0a1c44d596ca3a47536f1a467e3a29d/contracts/proxy/utils/Initializable.sol)\\n */\\n\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    modifier initialized() {\\n        require(_initialized, \\\"Contract should be initialized\\\");\\n        _;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"},\"contracts/Core/ACL.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract ACL is AccessControl {\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n}\\n\"}}}","address":"0x8f86403A4DE0BB5791fa46B8e795C547942fE4Cf","bytecode":"0x60806040523480156200001157600080fd5b506200001f60003362000025565b620000bd565b62000031828262000035565b5050565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff16620000315760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6126b580620000cd6000396000f3fe608060405234801561001057600080fd5b50600436106101825760003560e01c80638ce7ff4a116100d8578063be102b1a1161008c578063d9169b3211610066578063d9169b3214610490578063f2f03877146104a3578063f8c8765e146104b657600080fd5b8063be102b1a14610427578063d13e2e6014610452578063d547741f1461047d57600080fd5b806391d14854116100bd57806391d14854146103b45780639c66556f146103ed578063a217fddf1461041f57600080fd5b80638ce7ff4a146103105780638fd5ff001461038357600080fd5b80632f2ff15d1161013a5780637164f0d6116101145780637164f0d6146102bf5780637542ff95146102ea57806389035730146102fd57600080fd5b80632f2ff15d1461026e57806336568abe1461028157806343e08fa81461029457600080fd5b8063125f68f11161016b578063125f68f1146101da578063248a9ca3146101ef578063283e29051461022157600080fd5b806301ffc9a7146101875780630f4ef8a6146101af575b600080fd5b61019a6101953660046120d0565b6104c9565b60405190151581526020015b60405180910390f35b6008546101c2906001600160a01b031681565b6040516001600160a01b0390911681526020016101a6565b6101ed6101e836600461229a565b610562565b005b6102136101fd366004612089565b6000908152600160208190526040909120015490565b6040519081526020016101a6565b61025961022f366004612382565b60036020908152600093845260408085208252928452828420905282529020805460019091015482565b604080519283526020830191909152016101a6565b6101ed61027c3660046120a1565b611074565b6101ed61028f3660046120a1565b6110a0565b6102136102a2366004612279565b600460209081526000928352604080842090915290825290205481565b6102136102cd366004612279565b600091825260026020908152604080842092845291905290205490565b6007546101c2906001600160a01b031681565b6006546101c2906001600160a01b031681565b61036861031e366004612382565b604080518082018252600080825260209182018190529485526003815281852093855292835280842091845290825291829020825180840190935280548352600101549082015290565b604080518251815260209283015192810192909252016101a6565b610213610391366004612382565b600560209081526000938452604080852082529284528284209052825290205481565b61019a6103c23660046120a1565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6102136103fb366004612382565b60009283526005602090815260408085209385529281528284209184525290205490565b610213600081565b610213610435366004612279565b600091825260046020908152604080842092845291905290205490565b610213610460366004612279565b600260209081526000928352604080842090915290825290205481565b6101ed61048b3660046120a1565b61112c565b6009546101c2906001600160a01b031681565b6101ed6104b1366004612279565b611153565b6101ed6104c436600461202e565b6118bd565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061055c57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b60005460ff166105b95760405162461bcd60e51b815260206004820152601e60248201527f436f6e74726163742073686f756c6420626520696e697469616c697a6564000060448201526064015b60405180910390fd5b60065460408051630eaf323560e31b8152905188926001600160a01b03169163757991a8916004808301926020929190829003018186803b1580156105fd57600080fd5b505afa158015610611573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106359190612261565b81146106835760405162461bcd60e51b815260206004820152600f60248201527f696e636f72726563742065706f6368000000000000000000000000000000000060448201526064016105b0565b600754604051636022a48560e01b81526001600160a01b0384811660048301526000921690636022a4859060240160206040518083038186803b1580156106c957600080fd5b505afa1580156106dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107019190612261565b9050600081116107535760405162461bcd60e51b815260206004820152601d60248201527f537472756374732e5374616b657220646f6573206e6f7420657869737400000060448201526064016105b0565b6007546040516371e4cc7f60e11b8152600481018390526000916001600160a01b03169063e3c998fe906024016101406040518083038186803b15801561079957600080fd5b505afa1580156107ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d191906121cb565b60008a815260026020908152604080832086845290915290205490915061083a5760405162461bcd60e51b815260206004820181905260248201527f6e6f7420636f6d6d69746564206f7220616c72656164792072657665616c656460448201526064016105b0565b60008981526002602090815260408083208584528252918290205482519182018c90529181018a90526060810187905260800160405160208183030381529060405280519060200120146108d05760405162461bcd60e51b815260206004820152601660248201527f696e636f7272656374207365637265742f76616c75650000000000000000000060448201526064016105b0565b336001600160a01b0385161415610e6857600660009054906101000a90046001600160a01b03166001600160a01b031663a475b5dd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561092f57600080fd5b505afa158015610943573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096791906123ad565b63ffffffff16600660009054906101000a90046001600160a01b03166001600160a01b0316631865c57d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156109bb57600080fd5b505afa1580156109cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f39190612261565b14610a405760405162461bcd60e51b815260206004820152601060248201527f4e6f742072657665616c2073746174650000000000000000000000000000000060448201526064016105b0565b6000816040015111610a945760405162461bcd60e51b815260206004820152601160248201527f6e6f6e706f736974697665207374616b6500000000000000000000000000000060448201526064016105b0565b60005b8751811015610d8457610b21878281518110610ac357634e487b7160e01b600052603260045260246000fd5b60200260200101518a8a8481518110610aec57634e487b7160e01b600052603260045260246000fd5b6020026020010151604051602001610b0691815260200190565b604051602081830303815290604052805190602001206119f2565b610b6d5760405162461bcd60e51b815260206004820152601460248201527f696e76616c6964206d65726b6c652070726f6f6600000000000000000000000060448201526064016105b0565b6007546040517fb98ef0d3000000000000000000000000000000000000000000000000000000008152600481018590526000916001600160a01b03169063b98ef0d39060240160206040518083038186803b158015610bcb57600080fd5b505afa158015610bdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c039190612261565b905060405180604001604052808a8481518110610c3057634e487b7160e01b600052603260045260246000fd5b60209081029190910181015182526040808701519282019290925260008e8152600382528281208882528252828120868252825282812084518155938201516001909401939093558d835260058152818320858452905281208a518392908c9086908110610cae57634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002054610ccf919061258b565b60008c815260056020908152604080832086845290915281208b519091908c9086908110610d0d57634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000208190555080600460008d8152602001908152602001600020600084815260200190815260200160002054610d57919061258b565b60008c81526004602090815260408083208684529091529020555080610d7c81612620565b915050610a97565b5060008981526002602090815260408083208584529091528082209190915560075490517f9864f70a00000000000000000000000000000000000000000000000000000000815260048101849052602481018b90526001600160a01b0390911690639864f70a90604401600060405180830381600087803b158015610e0857600080fd5b505af1158015610e1c573d6000803e3d6000fd5b505050507f17f4759c403dfc3fa26ab75ce82d3d090a0bdbfe9977d8ee87445d6dd83c68a1898383604001518a42604051610e5b959493929190612485565b60405180910390a1611069565b600660009054906101000a90046001600160a01b03166001600160a01b0316633c7a3aff6040518163ffffffff1660e01b815260040160206040518083038186803b158015610eb657600080fd5b505afa158015610eca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eee91906123ad565b63ffffffff16600660009054906101000a90046001600160a01b03166001600160a01b0316631865c57d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f4257600080fd5b505afa158015610f56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7a9190612261565b14610fc75760405162461bcd60e51b815260206004820152601060248201527f4e6f7420636f6d6d69742073746174650000000000000000000000000000000060448201526064016105b0565b60008981526002602090815260408083208584529091528082209190915560075490517f0f91ce1900000000000000000000000000000000000000000000000000000000815260048101849052336024820152604481018b90526001600160a01b0390911690630f91ce1990606401600060405180830381600087803b15801561105057600080fd5b505af1158015611064573d6000803e3d6000fd5b505050505b505050505050505050565b600082815260016020819052604090912001546110918133611aaf565b61109b8383611b2f565b505050565b6001600160a01b038116331461111e5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016105b0565b6111288282611bb6565b5050565b600082815260016020819052604090912001546111498133611aaf565b61109b8383611bb6565b60005460ff166111a55760405162461bcd60e51b815260206004820152601e60248201527f436f6e74726163742073686f756c6420626520696e697469616c697a6564000060448201526064016105b0565b60065460408051630eaf323560e31b8152905184926001600160a01b03169163757991a8916004808301926020929190829003018186803b1580156111e957600080fd5b505afa1580156111fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112219190612261565b811461126f5760405162461bcd60e51b815260206004820152600f60248201527f696e636f72726563742065706f6368000000000000000000000000000000000060448201526064016105b0565b600660009054906101000a90046001600160a01b03166001600160a01b0316633c7a3aff6040518163ffffffff1660e01b815260040160206040518083038186803b1580156112bd57600080fd5b505afa1580156112d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f591906123ad565b63ffffffff16600660009054906101000a90046001600160a01b03166001600160a01b0316631865c57d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561134957600080fd5b505afa15801561135d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113819190612261565b81146113cf5760405162461bcd60e51b815260206004820152600f60248201527f696e636f7272656374207374617465000000000000000000000000000000000060448201526064016105b0565b600754604051636022a48560e01b81523360048201526000916001600160a01b031690636022a4859060240160206040518083038186803b15801561141357600080fd5b505afa158015611427573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144b9190612261565b6000868152600260209081526040808320848452909152902054909150156114b55760405162461bcd60e51b815260206004820152601060248201527f616c726561647920636f6d6d697465640000000000000000000000000000000060448201526064016105b0565b6007546040516371e4cc7f60e11b8152600481018390526000916001600160a01b03169063e3c998fe906024016101406040518083038186803b1580156114fb57600080fd5b505afa15801561150f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153391906121cb565b6009549091506001600160a01b03166304c075696115526001896125c2565b6040518263ffffffff1660e01b815260040161157091815260200190565b60006040518083038186803b15801561158857600080fd5b505afa15801561159c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115c49190810190612110565b5115801561165c57506009546000906001600160a01b031663e38c7c426115ec60018a6125c2565b6040518263ffffffff1660e01b815260040161160a91815260200190565b60206040518083038186803b15801561162257600080fd5b505afa158015611636573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165a9190612261565b115b156116ca57600960009054906101000a90046001600160a01b03166001600160a01b0316639b87f6446040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156116b157600080fd5b505af11580156116c5573d6000803e3d6000fd5b505050505b6008546040517f54eae15e00000000000000000000000000000000000000000000000000000000815260048101849052602481018890526001600160a01b03909116906354eae15e90604401600060405180830381600087803b15801561173057600080fd5b505af1158015611744573d6000803e3d6000fd5b50505050600660009054906101000a90046001600160a01b03166001600160a01b031663375b3c0a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561179657600080fd5b505afa1580156117aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ce9190612261565b8160400151106118b55760008681526002602090815260408083208584529091529081902086905560075490517f188dc83b000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b039091169063188dc83b90602401600060405180830381600087803b15801561185457600080fd5b505af1158015611868573d6000803e3d6000fd5b505060408051898152602081018690529081018890524260608201527f6ad04b07dbe80ee3971460ebc13808fb6dd0fa67fbf7d7ebc4de85811d2c99289250608001905060405180910390a15b505050505050565b600054610100900460ff16806118d6575060005460ff16155b6119485760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016105b0565b600054610100900460ff1615801561196a576000805461ffff19166101011790555b60006119768133611aaf565b50600780546001600160a01b038088167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179092556008805487841690831617905560098054868416908316179055600680549285169290911691909117905580156119eb576000805461ff00191690555b5050505050565b600081815b8551811015611aa4576000868281518110611a2257634e487b7160e01b600052603260045260246000fd5b60200260200101519050808311611a64576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250611a91565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b5080611a9c81612620565b9150506119f7565b509092149392505050565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff1661112857611aed816001600160a01b03166014611c39565b611af8836020611c39565b604051602001611b099291906123d1565b60408051601f198184030181529082905262461bcd60e51b82526105b091600401612452565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff166111285760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff16156111285760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60606000611c488360026125a3565b611c5390600261258b565b67ffffffffffffffff811115611c7957634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611ca3576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611ce857634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611d5957634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000611d958460026125a3565b611da090600161258b565b90505b6001811115611e59577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611def57634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110611e1357634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93611e5281612609565b9050611da3565b508315611ea85760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105b0565b9392505050565b8035611eba81612667565b919050565b8051611eba81612667565b600082601f830112611eda578081fd5b81356020611eef611eea83612567565b612536565b82815281810190858301600585811b88018501891015611f0d578687fd5b865b86811015611fa657823567ffffffffffffffff811115611f2d578889fd5b8901603f81018b13611f3d578889fd5b868101356040611f4f611eea83612567565b808382528a820191508285018f84868a1b8801011115611f6d578d8efd5b8d95505b84861015611f8f578035835260019590950194918b01918b01611f71565b508952505050948601945091850191600101611f0f565b509198975050505050505050565b600082601f830112611fc4578081fd5b81516020611fd4611eea83612567565b80838252828201915082860187848660051b8901011115611ff3578586fd5b855b8581101561201157815184529284019290840190600101611ff5565b5090979650505050505050565b80518015158114611eba57600080fd5b60008060008060808587031215612043578384fd5b843561204e81612667565b9350602085013561205e81612667565b9250604085013561206e81612667565b9150606085013561207e81612667565b939692955090935050565b60006020828403121561209a578081fd5b5035919050565b600080604083850312156120b3578182fd5b8235915060208301356120c581612667565b809150509250929050565b6000602082840312156120e1578081fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114611ea8578182fd5b600060208284031215612121578081fd5b815167ffffffffffffffff80821115612138578283fd5b9083019060c0828603121561214b578283fd5b6121536124e9565b82518152602083015182811115612168578485fd5b61217487828601611fb4565b60208301525060408301518281111561218b578485fd5b61219787828601611fb4565b60408301525060608301516060820152608083015160808201526121bd60a0840161201e565b60a082015295945050505050565b600061014082840312156121dd578081fd5b6121e5612512565b825181526121f560208401611ebf565b602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015261223860e0840161201e565b60e08201526101008381015190820152610120612256818501611ebf565b908201529392505050565b600060208284031215612272578081fd5b5051919050565b6000806040838503121561228b578182fd5b50508035926020909101359150565b60008060008060008060c087890312156122b2578384fd5b863595506020808801359550604088013567ffffffffffffffff808211156122d8578687fd5b818a0191508a601f8301126122eb578687fd5b81356122f9611eea82612567565b8082825285820191508585018e878560051b8801011115612318578a8bfd5b8a95505b8386101561233a57803583526001959095019491860191860161231c565b509850505060608a0135925080831115612352578485fd5b505061236089828a01611eca565b9350506080870135915061237660a08801611eaf565b90509295509295509295565b600080600060608486031215612396578081fd5b505081359360208301359350604090920135919050565b6000602082840312156123be578081fd5b815163ffffffff81168114611ea8578182fd5b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516124098160178501602088016125d9565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516124468160288401602088016125d9565b01602801949350505050565b60208152600082518060208401526124718160408501602087016125d9565b601f01601f19169190910160400192915050565b600060a082018783526020878185015286604085015260a0606085015281865180845260c0860191508288019350845b818110156124d1578451835293830193918301916001016124b5565b50508093505050508260808301529695505050505050565b60405160c0810167ffffffffffffffff8111828210171561250c5761250c612651565b60405290565b604051610140810167ffffffffffffffff8111828210171561250c5761250c612651565b604051601f8201601f1916810167ffffffffffffffff8111828210171561255f5761255f612651565b604052919050565b600067ffffffffffffffff82111561258157612581612651565b5060051b60200190565b6000821982111561259e5761259e61263b565b500190565b60008160001904831182151516156125bd576125bd61263b565b500290565b6000828210156125d4576125d461263b565b500390565b60005b838110156125f45781810151838201526020016125dc565b83811115612603576000848401525b50505050565b6000816126185761261861263b565b506000190190565b60006000198214156126345761263461263b565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461267c57600080fd5b5056fea26469706673582212206ff5a4abd6c78de4b8fcfb56d4e26366d9a7233e3be51d985aa14b59b73c38ee64736f6c63430008040033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106101825760003560e01c80638ce7ff4a116100d8578063be102b1a1161008c578063d9169b3211610066578063d9169b3214610490578063f2f03877146104a3578063f8c8765e146104b657600080fd5b8063be102b1a14610427578063d13e2e6014610452578063d547741f1461047d57600080fd5b806391d14854116100bd57806391d14854146103b45780639c66556f146103ed578063a217fddf1461041f57600080fd5b80638ce7ff4a146103105780638fd5ff001461038357600080fd5b80632f2ff15d1161013a5780637164f0d6116101145780637164f0d6146102bf5780637542ff95146102ea57806389035730146102fd57600080fd5b80632f2ff15d1461026e57806336568abe1461028157806343e08fa81461029457600080fd5b8063125f68f11161016b578063125f68f1146101da578063248a9ca3146101ef578063283e29051461022157600080fd5b806301ffc9a7146101875780630f4ef8a6146101af575b600080fd5b61019a6101953660046120d0565b6104c9565b60405190151581526020015b60405180910390f35b6008546101c2906001600160a01b031681565b6040516001600160a01b0390911681526020016101a6565b6101ed6101e836600461229a565b610562565b005b6102136101fd366004612089565b6000908152600160208190526040909120015490565b6040519081526020016101a6565b61025961022f366004612382565b60036020908152600093845260408085208252928452828420905282529020805460019091015482565b604080519283526020830191909152016101a6565b6101ed61027c3660046120a1565b611074565b6101ed61028f3660046120a1565b6110a0565b6102136102a2366004612279565b600460209081526000928352604080842090915290825290205481565b6102136102cd366004612279565b600091825260026020908152604080842092845291905290205490565b6007546101c2906001600160a01b031681565b6006546101c2906001600160a01b031681565b61036861031e366004612382565b604080518082018252600080825260209182018190529485526003815281852093855292835280842091845290825291829020825180840190935280548352600101549082015290565b604080518251815260209283015192810192909252016101a6565b610213610391366004612382565b600560209081526000938452604080852082529284528284209052825290205481565b61019a6103c23660046120a1565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6102136103fb366004612382565b60009283526005602090815260408085209385529281528284209184525290205490565b610213600081565b610213610435366004612279565b600091825260046020908152604080842092845291905290205490565b610213610460366004612279565b600260209081526000928352604080842090915290825290205481565b6101ed61048b3660046120a1565b61112c565b6009546101c2906001600160a01b031681565b6101ed6104b1366004612279565b611153565b6101ed6104c436600461202e565b6118bd565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061055c57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b60005460ff166105b95760405162461bcd60e51b815260206004820152601e60248201527f436f6e74726163742073686f756c6420626520696e697469616c697a6564000060448201526064015b60405180910390fd5b60065460408051630eaf323560e31b8152905188926001600160a01b03169163757991a8916004808301926020929190829003018186803b1580156105fd57600080fd5b505afa158015610611573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106359190612261565b81146106835760405162461bcd60e51b815260206004820152600f60248201527f696e636f72726563742065706f6368000000000000000000000000000000000060448201526064016105b0565b600754604051636022a48560e01b81526001600160a01b0384811660048301526000921690636022a4859060240160206040518083038186803b1580156106c957600080fd5b505afa1580156106dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107019190612261565b9050600081116107535760405162461bcd60e51b815260206004820152601d60248201527f537472756374732e5374616b657220646f6573206e6f7420657869737400000060448201526064016105b0565b6007546040516371e4cc7f60e11b8152600481018390526000916001600160a01b03169063e3c998fe906024016101406040518083038186803b15801561079957600080fd5b505afa1580156107ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d191906121cb565b60008a815260026020908152604080832086845290915290205490915061083a5760405162461bcd60e51b815260206004820181905260248201527f6e6f7420636f6d6d69746564206f7220616c72656164792072657665616c656460448201526064016105b0565b60008981526002602090815260408083208584528252918290205482519182018c90529181018a90526060810187905260800160405160208183030381529060405280519060200120146108d05760405162461bcd60e51b815260206004820152601660248201527f696e636f7272656374207365637265742f76616c75650000000000000000000060448201526064016105b0565b336001600160a01b0385161415610e6857600660009054906101000a90046001600160a01b03166001600160a01b031663a475b5dd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561092f57600080fd5b505afa158015610943573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096791906123ad565b63ffffffff16600660009054906101000a90046001600160a01b03166001600160a01b0316631865c57d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156109bb57600080fd5b505afa1580156109cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f39190612261565b14610a405760405162461bcd60e51b815260206004820152601060248201527f4e6f742072657665616c2073746174650000000000000000000000000000000060448201526064016105b0565b6000816040015111610a945760405162461bcd60e51b815260206004820152601160248201527f6e6f6e706f736974697665207374616b6500000000000000000000000000000060448201526064016105b0565b60005b8751811015610d8457610b21878281518110610ac357634e487b7160e01b600052603260045260246000fd5b60200260200101518a8a8481518110610aec57634e487b7160e01b600052603260045260246000fd5b6020026020010151604051602001610b0691815260200190565b604051602081830303815290604052805190602001206119f2565b610b6d5760405162461bcd60e51b815260206004820152601460248201527f696e76616c6964206d65726b6c652070726f6f6600000000000000000000000060448201526064016105b0565b6007546040517fb98ef0d3000000000000000000000000000000000000000000000000000000008152600481018590526000916001600160a01b03169063b98ef0d39060240160206040518083038186803b158015610bcb57600080fd5b505afa158015610bdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c039190612261565b905060405180604001604052808a8481518110610c3057634e487b7160e01b600052603260045260246000fd5b60209081029190910181015182526040808701519282019290925260008e8152600382528281208882528252828120868252825282812084518155938201516001909401939093558d835260058152818320858452905281208a518392908c9086908110610cae57634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002054610ccf919061258b565b60008c815260056020908152604080832086845290915281208b519091908c9086908110610d0d57634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000208190555080600460008d8152602001908152602001600020600084815260200190815260200160002054610d57919061258b565b60008c81526004602090815260408083208684529091529020555080610d7c81612620565b915050610a97565b5060008981526002602090815260408083208584529091528082209190915560075490517f9864f70a00000000000000000000000000000000000000000000000000000000815260048101849052602481018b90526001600160a01b0390911690639864f70a90604401600060405180830381600087803b158015610e0857600080fd5b505af1158015610e1c573d6000803e3d6000fd5b505050507f17f4759c403dfc3fa26ab75ce82d3d090a0bdbfe9977d8ee87445d6dd83c68a1898383604001518a42604051610e5b959493929190612485565b60405180910390a1611069565b600660009054906101000a90046001600160a01b03166001600160a01b0316633c7a3aff6040518163ffffffff1660e01b815260040160206040518083038186803b158015610eb657600080fd5b505afa158015610eca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eee91906123ad565b63ffffffff16600660009054906101000a90046001600160a01b03166001600160a01b0316631865c57d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f4257600080fd5b505afa158015610f56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7a9190612261565b14610fc75760405162461bcd60e51b815260206004820152601060248201527f4e6f7420636f6d6d69742073746174650000000000000000000000000000000060448201526064016105b0565b60008981526002602090815260408083208584529091528082209190915560075490517f0f91ce1900000000000000000000000000000000000000000000000000000000815260048101849052336024820152604481018b90526001600160a01b0390911690630f91ce1990606401600060405180830381600087803b15801561105057600080fd5b505af1158015611064573d6000803e3d6000fd5b505050505b505050505050505050565b600082815260016020819052604090912001546110918133611aaf565b61109b8383611b2f565b505050565b6001600160a01b038116331461111e5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016105b0565b6111288282611bb6565b5050565b600082815260016020819052604090912001546111498133611aaf565b61109b8383611bb6565b60005460ff166111a55760405162461bcd60e51b815260206004820152601e60248201527f436f6e74726163742073686f756c6420626520696e697469616c697a6564000060448201526064016105b0565b60065460408051630eaf323560e31b8152905184926001600160a01b03169163757991a8916004808301926020929190829003018186803b1580156111e957600080fd5b505afa1580156111fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112219190612261565b811461126f5760405162461bcd60e51b815260206004820152600f60248201527f696e636f72726563742065706f6368000000000000000000000000000000000060448201526064016105b0565b600660009054906101000a90046001600160a01b03166001600160a01b0316633c7a3aff6040518163ffffffff1660e01b815260040160206040518083038186803b1580156112bd57600080fd5b505afa1580156112d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f591906123ad565b63ffffffff16600660009054906101000a90046001600160a01b03166001600160a01b0316631865c57d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561134957600080fd5b505afa15801561135d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113819190612261565b81146113cf5760405162461bcd60e51b815260206004820152600f60248201527f696e636f7272656374207374617465000000000000000000000000000000000060448201526064016105b0565b600754604051636022a48560e01b81523360048201526000916001600160a01b031690636022a4859060240160206040518083038186803b15801561141357600080fd5b505afa158015611427573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144b9190612261565b6000868152600260209081526040808320848452909152902054909150156114b55760405162461bcd60e51b815260206004820152601060248201527f616c726561647920636f6d6d697465640000000000000000000000000000000060448201526064016105b0565b6007546040516371e4cc7f60e11b8152600481018390526000916001600160a01b03169063e3c998fe906024016101406040518083038186803b1580156114fb57600080fd5b505afa15801561150f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153391906121cb565b6009549091506001600160a01b03166304c075696115526001896125c2565b6040518263ffffffff1660e01b815260040161157091815260200190565b60006040518083038186803b15801561158857600080fd5b505afa15801561159c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115c49190810190612110565b5115801561165c57506009546000906001600160a01b031663e38c7c426115ec60018a6125c2565b6040518263ffffffff1660e01b815260040161160a91815260200190565b60206040518083038186803b15801561162257600080fd5b505afa158015611636573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165a9190612261565b115b156116ca57600960009054906101000a90046001600160a01b03166001600160a01b0316639b87f6446040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156116b157600080fd5b505af11580156116c5573d6000803e3d6000fd5b505050505b6008546040517f54eae15e00000000000000000000000000000000000000000000000000000000815260048101849052602481018890526001600160a01b03909116906354eae15e90604401600060405180830381600087803b15801561173057600080fd5b505af1158015611744573d6000803e3d6000fd5b50505050600660009054906101000a90046001600160a01b03166001600160a01b031663375b3c0a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561179657600080fd5b505afa1580156117aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ce9190612261565b8160400151106118b55760008681526002602090815260408083208584529091529081902086905560075490517f188dc83b000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b039091169063188dc83b90602401600060405180830381600087803b15801561185457600080fd5b505af1158015611868573d6000803e3d6000fd5b505060408051898152602081018690529081018890524260608201527f6ad04b07dbe80ee3971460ebc13808fb6dd0fa67fbf7d7ebc4de85811d2c99289250608001905060405180910390a15b505050505050565b600054610100900460ff16806118d6575060005460ff16155b6119485760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016105b0565b600054610100900460ff1615801561196a576000805461ffff19166101011790555b60006119768133611aaf565b50600780546001600160a01b038088167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179092556008805487841690831617905560098054868416908316179055600680549285169290911691909117905580156119eb576000805461ff00191690555b5050505050565b600081815b8551811015611aa4576000868281518110611a2257634e487b7160e01b600052603260045260246000fd5b60200260200101519050808311611a64576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250611a91565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b5080611a9c81612620565b9150506119f7565b509092149392505050565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff1661112857611aed816001600160a01b03166014611c39565b611af8836020611c39565b604051602001611b099291906123d1565b60408051601f198184030181529082905262461bcd60e51b82526105b091600401612452565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff166111285760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff16156111285760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60606000611c488360026125a3565b611c5390600261258b565b67ffffffffffffffff811115611c7957634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611ca3576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611ce857634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611d5957634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000611d958460026125a3565b611da090600161258b565b90505b6001811115611e59577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611def57634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110611e1357634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93611e5281612609565b9050611da3565b508315611ea85760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105b0565b9392505050565b8035611eba81612667565b919050565b8051611eba81612667565b600082601f830112611eda578081fd5b81356020611eef611eea83612567565b612536565b82815281810190858301600585811b88018501891015611f0d578687fd5b865b86811015611fa657823567ffffffffffffffff811115611f2d578889fd5b8901603f81018b13611f3d578889fd5b868101356040611f4f611eea83612567565b808382528a820191508285018f84868a1b8801011115611f6d578d8efd5b8d95505b84861015611f8f578035835260019590950194918b01918b01611f71565b508952505050948601945091850191600101611f0f565b509198975050505050505050565b600082601f830112611fc4578081fd5b81516020611fd4611eea83612567565b80838252828201915082860187848660051b8901011115611ff3578586fd5b855b8581101561201157815184529284019290840190600101611ff5565b5090979650505050505050565b80518015158114611eba57600080fd5b60008060008060808587031215612043578384fd5b843561204e81612667565b9350602085013561205e81612667565b9250604085013561206e81612667565b9150606085013561207e81612667565b939692955090935050565b60006020828403121561209a578081fd5b5035919050565b600080604083850312156120b3578182fd5b8235915060208301356120c581612667565b809150509250929050565b6000602082840312156120e1578081fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114611ea8578182fd5b600060208284031215612121578081fd5b815167ffffffffffffffff80821115612138578283fd5b9083019060c0828603121561214b578283fd5b6121536124e9565b82518152602083015182811115612168578485fd5b61217487828601611fb4565b60208301525060408301518281111561218b578485fd5b61219787828601611fb4565b60408301525060608301516060820152608083015160808201526121bd60a0840161201e565b60a082015295945050505050565b600061014082840312156121dd578081fd5b6121e5612512565b825181526121f560208401611ebf565b602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015261223860e0840161201e565b60e08201526101008381015190820152610120612256818501611ebf565b908201529392505050565b600060208284031215612272578081fd5b5051919050565b6000806040838503121561228b578182fd5b50508035926020909101359150565b60008060008060008060c087890312156122b2578384fd5b863595506020808801359550604088013567ffffffffffffffff808211156122d8578687fd5b818a0191508a601f8301126122eb578687fd5b81356122f9611eea82612567565b8082825285820191508585018e878560051b8801011115612318578a8bfd5b8a95505b8386101561233a57803583526001959095019491860191860161231c565b509850505060608a0135925080831115612352578485fd5b505061236089828a01611eca565b9350506080870135915061237660a08801611eaf565b90509295509295509295565b600080600060608486031215612396578081fd5b505081359360208301359350604090920135919050565b6000602082840312156123be578081fd5b815163ffffffff81168114611ea8578182fd5b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516124098160178501602088016125d9565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516124468160288401602088016125d9565b01602801949350505050565b60208152600082518060208401526124718160408501602087016125d9565b601f01601f19169190910160400192915050565b600060a082018783526020878185015286604085015260a0606085015281865180845260c0860191508288019350845b818110156124d1578451835293830193918301916001016124b5565b50508093505050508260808301529695505050505050565b60405160c0810167ffffffffffffffff8111828210171561250c5761250c612651565b60405290565b604051610140810167ffffffffffffffff8111828210171561250c5761250c612651565b604051601f8201601f1916810167ffffffffffffffff8111828210171561255f5761255f612651565b604052919050565b600067ffffffffffffffff82111561258157612581612651565b5060051b60200190565b6000821982111561259e5761259e61263b565b500190565b60008160001904831182151516156125bd576125bd61263b565b500290565b6000828210156125d4576125d461263b565b500390565b60005b838110156125f45781810151838201526020016125dc565b83811115612603576000848401525b50505050565b6000816126185761261861263b565b506000190190565b60006000198214156126345761263461263b565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461267c57600080fd5b5056fea26469706673582212206ff5a4abd6c78de4b8fcfb56d4e26366d9a7233e3be51d985aa14b59b73c38ee64736f6c63430008040033","abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"epoch","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"stakerId","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"commitment","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"Committed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"epoch","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"stakerId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"stake","type":"uint256"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"Revealed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"blockManager","outputs":[{"internalType":"contract IBlockManager","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"epoch","type":"uint256"},{"internalType":"bytes32","name":"commitment","type":"bytes32"}],"name":"commit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"commitments","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"epoch","type":"uint256"},{"internalType":"uint256","name":"stakerId","type":"uint256"}],"name":"getCommitment","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"epoch","type":"uint256"},{"internalType":"uint256","name":"assetId","type":"uint256"}],"name":"getTotalInfluenceRevealed","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"epoch","type":"uint256"},{"internalType":"uint256","name":"stakerId","type":"uint256"},{"internalType":"uint256","name":"assetId","type":"uint256"}],"name":"getVote","outputs":[{"components":[{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"weight","type":"uint256"}],"internalType":"struct Structs.Vote","name":"vote","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"epoch","type":"uint256"},{"internalType":"uint256","name":"assetId","type":"uint256"},{"internalType":"uint256","name":"voteValue","type":"uint256"}],"name":"getVoteWeight","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"stakeManagerAddress","type":"address"},{"internalType":"address","name":"rewardManagerAddress","type":"address"},{"internalType":"address","name":"blockManagerAddress","type":"address"},{"internalType":"address","name":"parametersAddress","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"parameters","outputs":[{"internalType":"contract IParameters","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"epoch","type":"uint256"},{"internalType":"bytes32","name":"root","type":"bytes32"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes32[][]","name":"proofs","type":"bytes32[][]"},{"internalType":"bytes32","name":"secret","type":"bytes32"},{"internalType":"address","name":"stakerAddress","type":"address"}],"name":"reveal","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rewardManager","outputs":[{"internalType":"contract IRewardManager","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"stakeManager","outputs":[{"internalType":"contract IStakeManager","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"totalInfluenceRevealed","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"voteWeights","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"votes","outputs":[{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"weight","type":"uint256"}],"stateMutability":"view","type":"function"}]}