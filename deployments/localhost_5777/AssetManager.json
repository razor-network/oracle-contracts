{"metadata":"{\"compiler\":{\"version\":\"0.8.4\"},\"sources\":{\"contracts/Core/AssetManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interface/IParameters.sol\\\";\\nimport \\\"./storage/AssetStorage.sol\\\";\\nimport \\\"./ACL.sol\\\";\\n\\ncontract AssetManager is ACL, AssetStorage {\\n    IParameters public parameters;\\n\\n    event JobCreated(\\n        uint256 id,\\n        uint256 epoch,\\n        string url,\\n        string selector,\\n        string name,\\n        bool repeat,\\n        address creator,\\n        uint256 timestamp,\\n        assetTypes assetType\\n    );\\n\\n    event JobReported(\\n        uint256 id,\\n        uint256 value,\\n        uint256 epoch,\\n        string url,\\n        string selector,\\n        string name,\\n        bool repeat,\\n        address creator,\\n        bool active,\\n        uint256 timestamp\\n    );\\n\\n    event JobUpdated(uint256 id, uint256 epoch, string url, string selector, uint256 timestamp);\\n\\n    event JobActivityStatus(uint256 id, uint256 epoch, bool active, uint256 timestamp);\\n\\n    event CollectionCreated(\\n        uint256 id,\\n        uint256 epoch,\\n        string name,\\n        uint32 aggregationMethod,\\n        uint256[] jobIDs,\\n        bool active,\\n        address creator,\\n        uint256 timestamp,\\n        assetTypes assetType\\n    );\\n\\n    event CollectionReported(\\n        uint256 id,\\n        uint256 value,\\n        uint256 epoch,\\n        string name,\\n        uint32 aggregationMethod,\\n        uint256[] jobIDs,\\n        address creator,\\n        uint256 timestamp\\n    );\\n\\n    event CollectionUpdated(uint256 id, uint256 epoch, string name, uint256[] updatedJobIDs, uint256 timestamp);\\n\\n    event CollectionActivityStatus(uint256 id, uint256 epoch, bool active, uint256 timestamp);\\n\\n    constructor(address parametersAddress) {\\n        parameters = IParameters(parametersAddress);\\n    }\\n\\n    function createJob(\\n        string calldata url,\\n        string calldata selector,\\n        string calldata name,\\n        bool repeat\\n    ) external onlyRole(parameters.getAssetModifierHash()) {\\n        numAssets = numAssets + 1;\\n        uint256 epoch = parameters.getEpoch();\\n        Structs.Job memory job = Structs.Job(numAssets, epoch, url, selector, name, repeat, true, msg.sender, 0, uint256(assetTypes.Job));\\n        jobs[numAssets] = job;\\n\\n        emit JobCreated(numAssets, epoch, url, selector, name, repeat, msg.sender, block.timestamp, assetTypes.Job);\\n    }\\n\\n    function updateJob(\\n        uint256 jobID,\\n        string calldata url,\\n        string calldata selector\\n    ) external onlyRole(parameters.getAssetModifierHash()) {\\n        require(jobs[jobID].assetType == uint256(assetTypes.Job), \\\"Job ID not present\\\");\\n\\n        uint256 epoch = parameters.getEpoch();\\n\\n        jobs[jobID].url = url;\\n        jobs[jobID].selector = selector;\\n\\n        emit JobUpdated(jobID, epoch, url, selector, block.timestamp);\\n    }\\n\\n    function setAssetStatus(uint256 id, bool assetStatus) external onlyRole(parameters.getAssetModifierHash()) {\\n        require(id != 0, \\\"ID cannot be 0\\\");\\n        require(id <= numAssets, \\\"ID does not exist\\\");\\n\\n        uint256 epoch = parameters.getEpoch();\\n\\n        if (jobs[id].assetType == uint256(assetTypes.Job)) {\\n            jobs[id].active = assetStatus;\\n\\n            emit JobActivityStatus(id, epoch, jobs[id].active, block.timestamp);\\n        } else {\\n            collections[id].active = assetStatus;\\n\\n            emit CollectionActivityStatus(id, epoch, collections[id].active, block.timestamp);\\n        }\\n    }\\n\\n    function fulfillAsset(uint256 id, uint256 value) external onlyRole(parameters.getAssetConfirmerHash()) {\\n        uint256 epoch = parameters.getEpoch();\\n        if (jobs[id].assetType == uint256(assetTypes.Job)) {\\n            Structs.Job storage job = jobs[id];\\n\\n            if (!job.repeat) {\\n                job.active = false;\\n            }\\n\\n            job.result = value;\\n            emit JobReported(job.id, value, epoch, job.url, job.selector, job.name, job.repeat, job.creator, job.active, block.timestamp);\\n        } else if (collections[id].assetType == uint256(assetTypes.Collection)) {\\n            Structs.Collection storage collection = collections[id];\\n\\n            collection.result = value;\\n\\n            emit CollectionReported(\\n                collection.id,\\n                value,\\n                epoch,\\n                collection.name,\\n                collection.aggregationMethod,\\n                collection.jobIDs,\\n                collection.creator,\\n                block.timestamp\\n            );\\n        }\\n    }\\n\\n    function createCollection(\\n        string calldata name,\\n        uint256[] memory jobIDs,\\n        uint32 aggregationMethod\\n    ) external onlyRole(parameters.getAssetModifierHash()) {\\n        require(aggregationMethod > 0 && aggregationMethod < parameters.aggregationRange(), \\\"Aggregation range out of bounds\\\");\\n        require(jobIDs.length > 1, \\\"Number of jobIDs low to create collection\\\");\\n\\n        numAssets = numAssets + 1;\\n        uint256 epoch = parameters.getEpoch();\\n        collections[numAssets].id = numAssets;\\n        collections[numAssets].name = name;\\n        collections[numAssets].aggregationMethod = aggregationMethod;\\n        collections[numAssets].epoch = epoch;\\n        for (uint256 i = 0; i < jobIDs.length; i++) {\\n            require(jobs[jobIDs[i]].assetType == uint256(assetTypes.Job), \\\"Job ID not present\\\");\\n            require(jobs[jobIDs[i]].active, \\\"Job ID not active\\\");\\n            require(!collections[numAssets].jobIDExist[jobIDs[i]], \\\"Duplicate JobIDs sent\\\");\\n            collections[numAssets].jobIDs.push(jobIDs[i]);\\n            collections[numAssets].jobIDExist[jobIDs[i]] = true;\\n        }\\n        collections[numAssets].creator = msg.sender;\\n        collections[numAssets].assetType = uint256(assetTypes.Collection);\\n        collections[numAssets].active = true;\\n\\n        emit CollectionCreated(numAssets, epoch, name, aggregationMethod, jobIDs, true, msg.sender, block.timestamp, assetTypes.Collection);\\n    }\\n\\n    function addJobToCollection(uint256 collectionID, uint256 jobID) external onlyRole(parameters.getAssetModifierHash()) {\\n        require(collections[collectionID].assetType == uint256(assetTypes.Collection), \\\"Collection ID not present\\\");\\n        require(collections[collectionID].active, \\\"Collection is inactive\\\");\\n        require(jobs[jobID].assetType == uint256(assetTypes.Job), \\\"Job ID not present\\\");\\n        require(jobs[jobID].active, \\\"Job ID not active\\\");\\n        require(!collections[collectionID].jobIDExist[jobID], \\\"Job exists in this collection\\\");\\n\\n        uint256 epoch = parameters.getEpoch();\\n        collections[collectionID].jobIDs.push(jobID);\\n        collections[collectionID].jobIDExist[jobID] = true;\\n\\n        emit CollectionUpdated(collectionID, epoch, collections[collectionID].name, collections[collectionID].jobIDs, block.timestamp);\\n    }\\n\\n    function removeJobFromCollection(uint256 collectionID, uint256 jobIDIndex) external onlyRole(parameters.getAssetModifierHash()) {\\n        require(collections[collectionID].assetType == uint256(assetTypes.Collection), \\\"Collection ID not present\\\");\\n        require(collections[collectionID].jobIDs.length > jobIDIndex, \\\"Index not in range\\\");\\n\\n        uint256 epoch = parameters.getEpoch();\\n\\n        for (uint256 i = jobIDIndex; i < collections[collectionID].jobIDs.length - 1; i++) {\\n            collections[collectionID].jobIDs[i] = collections[collectionID].jobIDs[i + 1];\\n        }\\n        collections[collectionID].jobIDs.pop();\\n\\n        emit CollectionUpdated(collectionID, epoch, collections[collectionID].name, collections[collectionID].jobIDs, block.timestamp);\\n    }\\n\\n    function getResult(uint256 id) external view returns (uint256 result) {\\n        require(id != 0, \\\"ID cannot be 0\\\");\\n        require(id <= numAssets, \\\"ID does not exist\\\");\\n\\n        if (jobs[id].assetType == uint256(assetTypes.Job)) {\\n            return jobs[id].result;\\n        } else {\\n            return collections[id].result;\\n        }\\n    }\\n\\n    function getJob(uint256 id)\\n        external\\n        view\\n        returns (\\n            string memory url,\\n            string memory selector,\\n            string memory name,\\n            bool repeat,\\n            uint256 result,\\n            bool active\\n        )\\n    {\\n        require(jobs[id].assetType == uint256(assetTypes.Job), \\\"ID is not a job\\\");\\n        Structs.Job memory job = jobs[id];\\n        return (job.url, job.selector, job.name, job.repeat, job.result, job.active);\\n    }\\n\\n    function getCollection(uint256 id)\\n        external\\n        view\\n        returns (\\n            string memory name,\\n            uint32 aggregationMethod,\\n            uint256[] memory jobIDs,\\n            uint256 result,\\n            bool active\\n        )\\n    {\\n        require(collections[id].assetType == uint256(assetTypes.Collection), \\\"ID is not a collection\\\");\\n        return (\\n            collections[id].name,\\n            collections[id].aggregationMethod,\\n            collections[id].jobIDs,\\n            collections[id].result,\\n            collections[id].active\\n        );\\n    }\\n\\n    function getAssetType(uint256 id) external view returns (uint256) {\\n        require(id != 0, \\\"ID cannot be 0\\\");\\n        require(id <= numAssets, \\\"ID does not exist\\\");\\n\\n        if (jobs[id].assetType == uint256(assetTypes.Job)) {\\n            return uint256(assetTypes.Job);\\n        } else {\\n            return uint256(assetTypes.Collection);\\n        }\\n    }\\n\\n    function getActiveStatus(uint256 id) external view returns (bool) {\\n        require(id != 0, \\\"ID cannot be 0\\\");\\n        require(id <= numAssets, \\\"ID does not exist\\\");\\n\\n        if (jobs[id].assetType == uint256(assetTypes.Job)) {\\n            return jobs[id].active;\\n        } else {\\n            return collections[id].active;\\n        }\\n    }\\n\\n    function getNumAssets() external view returns (uint256) {\\n        return numAssets;\\n    }\\n}\\n\"},\"contracts/Core/interface/IParameters.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IParameters {\\n    function commit() external view returns (uint32);\\n\\n    function reveal() external view returns (uint32);\\n\\n    function propose() external view returns (uint32);\\n\\n    function dispute() external view returns (uint32);\\n\\n    function burnAddress() external view returns (address);\\n\\n    function penaltyNotRevealNum() external view returns (uint256);\\n\\n    function penaltyNotRevealDenom() external view returns (uint256);\\n\\n    function resetLockPenalty() external view returns (uint256);\\n\\n    function minStake() external view returns (uint256);\\n\\n    function withdrawLockPeriod() external view returns (uint256);\\n\\n    function withdrawReleasePeriod() external view returns (uint256);\\n\\n    function maxAltBlocks() external view returns (uint256);\\n\\n    function epochLength() external view returns (uint256);\\n\\n    function numStates() external view returns (uint256);\\n\\n    function gracePeriod() external view returns (uint256);\\n\\n    function aggregationRange() external view returns (uint256);\\n\\n    function exposureDenominator() external view returns (uint256);\\n\\n    function slashPenaltyNum() external view returns (uint256);\\n\\n    function slashPenaltyDenom() external view returns (uint256);\\n\\n    function getEpoch() external view returns (uint256);\\n\\n    function getState() external view returns (uint256);\\n\\n    function maxAge() external view returns (uint256);\\n\\n    function escapeHatchEnabled() external view returns (bool);\\n\\n    function getAssetConfirmerHash() external view returns (bytes32);\\n\\n    function getBlockConfirmerHash() external view returns (bytes32);\\n\\n    function getStakeModifierHash() external view returns (bytes32);\\n\\n    function getStakerActivityUpdaterHash() external view returns (bytes32);\\n\\n    function getRewardModifierHash() external view returns (bytes32);\\n\\n    function getAssetModifierHash() external view returns (bytes32);\\n\\n    function getDefaultAdminHash() external view returns (bytes32);\\n}\\n\"},\"contracts/lib/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nlibrary Structs {\\n    struct Vote {\\n        uint256 value;\\n        uint256 weight;\\n    }\\n\\n    struct Staker {\\n        uint256 id;\\n        address _address;\\n        uint256 stake;\\n        uint256 age;\\n        uint256 epochStaked;\\n        uint256 epochLastCommitted;\\n        uint256 epochLastRevealed;\\n        bool acceptDelegation;\\n        uint256 commission;\\n        address tokenAddress;\\n    }\\n\\n    struct Lock {\\n        uint256 amount; //amount in sTokens\\n        uint256 withdrawAfter;\\n    }\\n\\n    struct Block {\\n        uint256 proposerId;\\n        uint256[] ids;\\n        uint256[] medians;\\n        uint256 iteration;\\n        uint256 biggestInfluence;\\n        bool valid;\\n    }\\n\\n    struct Dispute {\\n        uint256 accWeight;\\n        uint256 median;\\n        uint256 lastVisited;\\n        uint256 assetId;\\n    }\\n\\n    struct Job {\\n        uint256 id;\\n        uint256 epoch;\\n        string url;\\n        string selector;\\n        string name;\\n        bool repeat;\\n        bool active;\\n        address creator;\\n        uint256 result;\\n        uint256 assetType;\\n    }\\n\\n    struct Collection {\\n        uint256 id;\\n        string name;\\n        uint32 aggregationMethod;\\n        uint256[] jobIDs;\\n        mapping(uint256 => bool) jobIDExist;\\n        uint256 epoch;\\n        bool active;\\n        address creator;\\n        uint256 result;\\n        uint256 assetType;\\n    }\\n}\\n\"},\"contracts/Core/storage/AssetStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../lib/Structs.sol\\\";\\n\\ncontract AssetStorage {\\n    enum assetTypes {\\n        None,\\n        Job,\\n        Collection\\n    }\\n    mapping(uint256 => Structs.Job) public jobs;\\n    mapping(uint256 => Structs.Collection) public collections;\\n\\n    uint256 public numAssets;\\n}\\n\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"},\"contracts/Core/ACL.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract ACL is AccessControl {\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n}\\n\"}}}","address":"0x4826533B4897376654Bb4d4AD88B7faFD0C98528","bytecode":"","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106101985760003560e01c806389035730116100e3578063a46fe83b1161008c578063ecc6b2fd11610066578063ecc6b2fd146103b6578063eddfa070146103c9578063fdbda0ec146103dc57600080fd5b8063a46fe83b14610375578063bf22c4571461037e578063d547741f146103a357600080fd5b80639a4b8c0d116100bd5780639a4b8c0d146103475780639bbc58851461035a578063a217fddf1461036d57600080fd5b806389035730146102d257806391d14854146102fd578063995e43391461033457600080fd5b806336568abe116101455780635a1f3c281161011f5780635a1f3c2814610293578063628aff1d146102b75780637812e0ce146102ca57600080fd5b806336568abe1461025a57806351be97171461026d5780635485dd941461028057600080fd5b806324e75ca01161017657806324e75ca01461021f5780632f2ff15d146102345780632f9fcc0a1461024757600080fd5b806301ffc9a71461019d578063180aedf3146101c5578063248a9ca3146101ee575b600080fd5b6101b06101ab366004612c73565b610403565b60405190151581526020015b60405180910390f35b6101d86101d3366004612c09565b61049c565b6040516101bc9a9998979695949392919061337c565b6102116101fc366004612c09565b60009081526020819052604090206001015490565b6040519081526020016101bc565b61023261022d366004612e53565b610694565b005b610232610242366004612c39565b610938565b610232610255366004612ef5565b610963565b610232610268366004612c39565b610ce7565b61023261027b366004612ef5565b610d73565b61023261028e366004612ef5565b611001565b6102a66102a1366004612c09565b611322565b6040516101bc959493929190613185565b6102326102c5366004612dac565b6114b3565b600354610211565b6004546102e5906001600160a01b031681565b6040516001600160a01b0390911681526020016101bc565b6101b061030b366004612c39565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b610211610342366004612c09565b611815565b610211610355366004612c09565b6118e6565b610232610368366004612e7e565b611994565b610211600081565b61021160035481565b61039161038c366004612c09565b611b8a565b6040516101bc9695949392919061312b565b6102326103b1366004612c39565b611e5d565b6101b06103c4366004612c09565b611e83565b6102326103d7366004612cb3565b611f5a565b6103ef6103ea366004612c09565b6125a1565b6040516101bc9897969594939291906131d0565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061049657507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b60016020819052600091825260409091208054918101546002820180549192916104c5906135bc565b80601f01602080910402602001604051908101604052809291908181526020018280546104f1906135bc565b801561053e5780601f106105135761010080835404028352916020019161053e565b820191906000526020600020905b81548152906001019060200180831161052157829003601f168201915b505050505090806003018054610553906135bc565b80601f016020809104026020016040519081016040528092919081815260200182805461057f906135bc565b80156105cc5780601f106105a1576101008083540402835291602001916105cc565b820191906000526020600020905b8154815290600101906020018083116105af57829003601f168201915b5050505050908060040180546105e1906135bc565b80601f016020809104026020016040519081016040528092919081815260200182805461060d906135bc565b801561065a5780601f1061062f5761010080835404028352916020019161065a565b820191906000526020600020905b81548152906001019060200180831161063d57829003601f168201915b5050505060058301546006840154600790940154929360ff8083169461010084049091169350620100009092046001600160a01b0316918a565b600480546040805163c44ac0d760e01b815290516001600160a01b039092169263c44ac0d7928282019260209290829003018186803b1580156106d657600080fd5b505afa1580156106ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070e9190612c21565b6107188133612680565b8261075b5760405162461bcd60e51b815260206004820152600e60248201526d049442063616e6e6f7420626520360941b60448201526064015b60405180910390fd5b6003548311156107a15760405162461bcd60e51b8152602060048201526011602482015270125108191bd95cc81b9bdd08195e1a5cdd607a1b6044820152606401610752565b6000600460009054906101000a90046001600160a01b03166001600160a01b031663757991a86040518163ffffffff1660e01b815260040160206040518083038186803b1580156107f157600080fd5b505afa158015610805573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108299190612c21565b9050600160008581526001602052604090206007015414156108c257600084815260016020908152604091829020600501805461ff00191661010087151581029190911791829055835188815292830185905260ff9104161515918101919091524260608201527f9ffdc358321cd9345c842a495d5ec1752997446f45b0f923f48be26aef56f6779060800160405180910390a1610932565b600084815260026020908152604091829020600601805460ff1916861515908117909155825187815291820184905260ff161515918101919091524260608201527f39dcba84f7da39e1af4fa74b39cec9951222992d9229f3469b88616b79c13104906080015b60405180910390a15b50505050565b6000828152602081905260409020600101546109548133612680565b61095e83836126fe565b505050565b600480546040805163c44ac0d760e01b815290516001600160a01b039092169263c44ac0d7928282019260209290829003018186803b1580156109a557600080fd5b505afa1580156109b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109dd9190612c21565b6109e78133612680565b600260008481526002602052604090206008015414610a485760405162461bcd60e51b815260206004820152601960248201527f436f6c6c656374696f6e204944206e6f742070726573656e74000000000000006044820152606401610752565b60008381526002602052604090206006015460ff16610aa95760405162461bcd60e51b815260206004820152601660248201527f436f6c6c656374696f6e20697320696e616374697665000000000000000000006044820152606401610752565b600160008381526001602052604090206007015414610b0a5760405162461bcd60e51b815260206004820152601260248201527f4a6f62204944206e6f742070726573656e7400000000000000000000000000006044820152606401610752565b600082815260016020526040902060050154610100900460ff16610b705760405162461bcd60e51b815260206004820152601160248201527f4a6f62204944206e6f74206163746976650000000000000000000000000000006044820152606401610752565b600083815260026020908152604080832085845260040190915290205460ff1615610bdd5760405162461bcd60e51b815260206004820152601d60248201527f4a6f622065786973747320696e207468697320636f6c6c656374696f6e0000006044820152606401610752565b6000600460009054906101000a90046001600160a01b03166001600160a01b031663757991a86040518163ffffffff1660e01b815260040160206040518083038186803b158015610c2d57600080fd5b505afa158015610c41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c659190612c21565b6000858152600260208181526040808420600381018054600181810183558288528588209091018b90558a8752600483018552838720805460ff191682179055958b905293909252519394507f82e260cefb04ca78918ec0d223924a9c7893749eec0ccb5749ed7ada6145fdd5936109299389938793919091019142906133fd565b6001600160a01b0381163314610d655760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610752565b610d6f828261279c565b5050565b60048054604080517f50f6202100000000000000000000000000000000000000000000000000000000815290516001600160a01b03909216926350f62021928282019260209290829003018186803b158015610dce57600080fd5b505afa158015610de2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e069190612c21565b610e108133612680565b6000600460009054906101000a90046001600160a01b03166001600160a01b031663757991a86040518163ffffffff1660e01b815260040160206040518083038186803b158015610e6057600080fd5b505afa158015610e74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e989190612c21565b905060016000858152600160205260409020600701541415610f5c576000848152600160205260409020600581015460ff16610edc5760058101805461ff00191690555b60068101849055805460058201546040517fd2799533a1f2d8906905c985b0ff37b6ef11d237cc1d100670814fcf17f939a992610f4e929091889187916002880191600389019160048a019160ff808216926001600160a01b0362010000840416926101009004909116904290613441565b60405180910390a150610932565b6002600085815260026020526040902060080154141561093257600084815260026020819052604091829020600781018690558054918101546006820154935191937f173ff8b323e1061c02aa3f3cd6fb0a4ca59159010b04ef845a4cb1f922293bbf93610ff293909289928892600189019263ffffffff169160038a01916101009091046001600160a01b03169042906134c4565b60405180910390a15050505050565b600480546040805163c44ac0d760e01b815290516001600160a01b039092169263c44ac0d7928282019260209290829003018186803b15801561104357600080fd5b505afa158015611057573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107b9190612c21565b6110858133612680565b6002600084815260026020526040902060080154146110e65760405162461bcd60e51b815260206004820152601960248201527f436f6c6c656374696f6e204944206e6f742070726573656e74000000000000006044820152606401610752565b60008381526002602052604090206003015482106111465760405162461bcd60e51b815260206004820152601260248201527f496e646578206e6f7420696e2072616e676500000000000000000000000000006044820152606401610752565b6000600460009054906101000a90046001600160a01b03166001600160a01b031663757991a86040518163ffffffff1660e01b815260040160206040518083038186803b15801561119657600080fd5b505afa1580156111aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ce9190612c21565b9050825b6000858152600260205260409020600301546111f090600190613562565b81101561128f57600085815260026020526040902060030161121382600161352b565b8154811061123157634e487b7160e01b600052603260045260246000fd5b906000526020600020015460026000878152602001908152602001600020600301828154811061127157634e487b7160e01b600052603260045260246000fd5b60009182526020909120015580611287816135f7565b9150506111d2565b5060008481526002602052604090206003018054806112be57634e487b7160e01b600052603160045260246000fd5b6000828152602080822083016000199081018390559092019092558582526002905260409081902090517f82e260cefb04ca78918ec0d223924a9c7893749eec0ccb5749ed7ada6145fdd591610929918791859160018201916003019042906133fd565b6060600081818060026000878152600260205260409020600801541461138a5760405162461bcd60e51b815260206004820152601660248201527f4944206973206e6f74206120636f6c6c656374696f6e000000000000000000006044820152606401610752565b60008681526002602081905260409091209081015460078201546006830154600184018054909463ffffffff90941693600301929160ff169085906113ce906135bc565b80601f01602080910402602001604051908101604052809291908181526020018280546113fa906135bc565b80156114475780601f1061141c57610100808354040283529160200191611447565b820191906000526020600020905b81548152906001019060200180831161142a57829003601f168201915b505050505094508280548060200260200160405190810160405280929190818152602001828054801561149957602002820191906000526020600020905b815481526020019060010190808311611485575b505050505092509450945094509450945091939590929450565b600480546040805163c44ac0d760e01b815290516001600160a01b039092169263c44ac0d7928282019260209290829003018186803b1580156114f557600080fd5b505afa158015611509573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152d9190612c21565b6115378133612680565b60035461154590600161352b565b6003556004805460408051630eaf323560e31b815290516000936001600160a01b039093169263757991a892808201926020929091829003018186803b15801561158e57600080fd5b505afa1580156115a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c69190612c21565b9050600060405180610140016040528060035481526020018381526020018b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250604080516020601f8c018190048102820181019092528a815291810191908b908b9081908401838280828437600092019190915250505090825250604080516020601f8a018190048102820181019092528881529181019190899089908190840183828082843760009201829052509385525050508615156020830152600160408301819052336060840152608083019190915260a09091019081525090508060016000600354815260200190815260200160002060008201518160000155602082015181600101556040820151816002019080519060200190611702929190612a91565b506060820151805161171e916003840191602090910190612a91565b506080820151805161173a916004840191602090910190612a91565b5060a082015160058201805460c085015160e086015161ffff1990921693151561ff001916939093176101009315158402177fffffffffffffffffffff0000000000000000000000000000000000000000ffff16620100006001600160a01b03909216919091021790558201516006820155610120909101516007909101556003546040517f96fb418077e63dc5174f60331e87f199546c77430b0ec171efd6e14da515a1fc916118019185908e908e908e908e908e908e908e903390429060019061322c565b60405180910390a150505050505050505050565b6000816118555760405162461bcd60e51b815260206004820152600e60248201526d049442063616e6e6f7420626520360941b6044820152606401610752565b60035482111561189b5760405162461bcd60e51b8152602060048201526011602482015270125108191bd95cc81b9bdd08195e1a5cdd607a1b6044820152606401610752565b600160008381526001602052604090206007015414156118cb575060009081526001602052604090206006015490565b5060009081526002602052604090206007015490565b919050565b6000816119265760405162461bcd60e51b815260206004820152600e60248201526d049442063616e6e6f7420626520360941b6044820152606401610752565b60035482111561196c5760405162461bcd60e51b8152602060048201526011602482015270125108191bd95cc81b9bdd08195e1a5cdd607a1b6044820152606401610752565b6001600083815260016020526040902060070154141561198d576001610496565b6002610496565b600480546040805163c44ac0d760e01b815290516001600160a01b039092169263c44ac0d7928282019260209290829003018186803b1580156119d657600080fd5b505afa1580156119ea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0e9190612c21565b611a188133612680565b600160008781526001602052604090206007015414611a795760405162461bcd60e51b815260206004820152601260248201527f4a6f62204944206e6f742070726573656e7400000000000000000000000000006044820152606401610752565b6000600460009054906101000a90046001600160a01b03166001600160a01b031663757991a86040518163ffffffff1660e01b815260040160206040518083038186803b158015611ac957600080fd5b505afa158015611add573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b019190612c21565b6000888152600160205260409020909150611b20906002018787612b15565b506000878152600160205260409020611b3d906003018585612b15565b507fb13f7793a5ff6093db000b2da0f150f4db77dadc4ed27da14c0810a1f8b6dd8c87828888888842604051611b7997969594939291906132b6565b60405180910390a150505050505050565b6060808060008080600160008881526001602052604090206007015414611bf35760405162461bcd60e51b815260206004820152600f60248201527f4944206973206e6f742061206a6f6200000000000000000000000000000000006044820152606401610752565b600087815260016020818152604080842081516101408101835281548152938101549284019290925260028201805491840191611c2f906135bc565b80601f0160208091040260200160405190810160405280929190818152602001828054611c5b906135bc565b8015611ca85780601f10611c7d57610100808354040283529160200191611ca8565b820191906000526020600020905b815481529060010190602001808311611c8b57829003601f168201915b50505050508152602001600382018054611cc1906135bc565b80601f0160208091040260200160405190810160405280929190818152602001828054611ced906135bc565b8015611d3a5780601f10611d0f57610100808354040283529160200191611d3a565b820191906000526020600020905b815481529060010190602001808311611d1d57829003601f168201915b50505050508152602001600482018054611d53906135bc565b80601f0160208091040260200160405190810160405280929190818152602001828054611d7f906135bc565b8015611dcc5780601f10611da157610100808354040283529160200191611dcc565b820191906000526020600020905b815481529060010190602001808311611daf57829003601f168201915b5050509183525050600582015460ff808216151560208401526101008083049091161515604080850191909152620100009092046001600160a01b0316606080850191909152600685015460808086019190915260079095015460a094850152918501519185015193850151928501519085015160c090950151919d939c50919a5090985091965090945092505050565b600082815260208190526040902060010154611e798133612680565b61095e838361279c565b600081611ec35760405162461bcd60e51b815260206004820152600e60248201526d049442063616e6e6f7420626520360941b6044820152606401610752565b600354821115611f095760405162461bcd60e51b8152602060048201526011602482015270125108191bd95cc81b9bdd08195e1a5cdd607a1b6044820152606401610752565b60016000838152600160205260409020600701541415611f415750600090815260016020526040902060050154610100900460ff1690565b5060009081526002602052604090206006015460ff1690565b600480546040805163c44ac0d760e01b815290516001600160a01b039092169263c44ac0d7928282019260209290829003018186803b158015611f9c57600080fd5b505afa158015611fb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fd49190612c21565b611fde8133612680565b60008263ffffffff1611801561208b575060048054604080517f3c5dd62f00000000000000000000000000000000000000000000000000000000815290516001600160a01b0390921692633c5dd62f928282019260209290829003018186803b15801561204a57600080fd5b505afa15801561205e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120829190612c21565b8263ffffffff16105b6120d75760405162461bcd60e51b815260206004820152601f60248201527f4167677265676174696f6e2072616e6765206f7574206f6620626f756e6473006044820152606401610752565b600183511161214e5760405162461bcd60e51b815260206004820152602960248201527f4e756d626572206f66206a6f62494473206c6f7720746f20637265617465206360448201527f6f6c6c656374696f6e00000000000000000000000000000000000000000000006064820152608401610752565b60035461215c90600161352b565b6003556004805460408051630eaf323560e31b815290516000936001600160a01b039093169263757991a892808201926020929091829003018186803b1580156121a557600080fd5b505afa1580156121b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121dd9190612c21565b6003546000818152600260205260409020908155909150612202906001018787612b15565b50600380546000908152600260208190526040808320909101805463ffffffff191663ffffffff8816179055915481529081206005018290555b84518110156124e157600180600087848151811061226a57634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002060070154146122d15760405162461bcd60e51b815260206004820152601260248201527f4a6f62204944206e6f742070726573656e7400000000000000000000000000006044820152606401610752565b600160008683815181106122f557634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002060050160019054906101000a900460ff166123685760405162461bcd60e51b815260206004820152601160248201527f4a6f62204944206e6f74206163746976650000000000000000000000000000006044820152606401610752565b60026000600354815260200190815260200160002060040160008683815181106123a257634e487b7160e01b600052603260045260246000fd5b60209081029190910181015182528101919091526040016000205460ff161561240d5760405162461bcd60e51b815260206004820152601560248201527f4475706c6963617465204a6f624944732073656e7400000000000000000000006044820152606401610752565b60026000600354815260200190815260200160002060030185828151811061244557634e487b7160e01b600052603260045260246000fd5b6020908102919091018101518254600181810185556000948552838520909101919091556003548352600290915260408220875191926004909101918890859081106124a157634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002060006101000a81548160ff02191690831515021790555080806124d9906135f7565b91505061223c565b50600380546000908152600260208190526040808320600690810180547fffffffffffffffffffffff0000000000000000000000000000000000000000ff163361010081029190911790915585548552828520600801849055855485529382902001805460ff19166001908117909155935490517f98ede6a9eb66bfd8e1b5040dc309d2b62022cf87a5228b8069d5cfb97ad00cf39461259194929387938d938d938c938e9391924291906132fe565b60405180910390a1505050505050565b600260205260009081526040902080546001820180549192916125c3906135bc565b80601f01602080910402602001604051908101604052809291908181526020018280546125ef906135bc565b801561263c5780601f106126115761010080835404028352916020019161263c565b820191906000526020600020905b81548152906001019060200180831161261f57829003601f168201915b505050506002830154600584015460068501546007860154600890960154949563ffffffff9093169491935060ff8116926101009091046001600160a01b03169188565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610d6f576126bc816001600160a01b0316601461281b565b6126c783602061281b565b6040516020016126d8929190613097565b60408051601f198184030181529082905262461bcd60e51b825261075291600401613118565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610d6f576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556127583390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1615610d6f576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6060600061282a836002613543565b61283590600261352b565b67ffffffffffffffff81111561285b57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612885576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106128ca57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061293b57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000612977846002613543565b61298290600161352b565b90505b6001811115612a3b577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106129d157634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106129f557634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93612a34816135a5565b9050612985565b508315612a8a5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610752565b9392505050565b828054612a9d906135bc565b90600052602060002090601f016020900481019282612abf5760008555612b05565b82601f10612ad857805160ff1916838001178555612b05565b82800160010185558215612b05579182015b82811115612b05578251825591602001919060010190612aea565b50612b11929150612b89565b5090565b828054612b21906135bc565b90600052602060002090601f016020900481019282612b435760008555612b05565b82601f10612b5c5782800160ff19823516178555612b05565b82800160010185558215612b05579182015b82811115612b05578235825591602001919060010190612b6e565b5b80821115612b115760008155600101612b8a565b803580151581146118e157600080fd5b60008083601f840112612bbf578182fd5b50813567ffffffffffffffff811115612bd6578182fd5b602083019150836020828501011115612bee57600080fd5b9250929050565b803563ffffffff811681146118e157600080fd5b600060208284031215612c1a578081fd5b5035919050565b600060208284031215612c32578081fd5b5051919050565b60008060408385031215612c4b578081fd5b8235915060208301356001600160a01b0381168114612c68578182fd5b809150509250929050565b600060208284031215612c84578081fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114612a8a578182fd5b60008060008060608587031215612cc8578182fd5b843567ffffffffffffffff80821115612cdf578384fd5b612ceb88838901612bae565b9096509450602091508682013581811115612d04578485fd5b8701601f81018913612d14578485fd5b803582811115612d2657612d26613628565b8060051b604051601f19603f83011681018181108682111715612d4b57612d4b613628565b604052828152858101945083860182850187018d1015612d69578889fd5b8894505b83851015612d8b578035865294860194600194909401938601612d6d565b50809750505050505050612da160408601612bf5565b905092959194509250565b60008060008060008060006080888a031215612dc6578283fd5b873567ffffffffffffffff80821115612ddd578485fd5b612de98b838c01612bae565b909950975060208a0135915080821115612e01578485fd5b612e0d8b838c01612bae565b909750955060408a0135915080821115612e25578485fd5b50612e328a828b01612bae565b9094509250612e45905060608901612b9e565b905092959891949750929550565b60008060408385031215612e65578182fd5b82359150612e7560208401612b9e565b90509250929050565b600080600080600060608688031215612e95578081fd5b85359450602086013567ffffffffffffffff80821115612eb3578283fd5b612ebf89838a01612bae565b90965094506040880135915080821115612ed7578283fd5b50612ee488828901612bae565b969995985093965092949392505050565b60008060408385031215612f07578182fd5b50508035926020909101359150565b6000815180845260208085019450808401835b83811015612f4557815187529582019590820190600101612f29565b509495945050505050565b6000815480845260208085019450838352808320835b83811015612f4557815487529582019560019182019101612f66565b60038110612fa057634e487b7160e01b600052602160045260246000fd5b9052565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60008151808452612fe5816020860160208601613579565b601f01601f19169290920160200192915050565b8054600090600181811c908083168061301357607f831692505b602080841082141561303357634e487b7160e01b86526022600452602486fd5b8388526020880182801561304e576001811461305f5761308a565b60ff1987168252828201975061308a565b60008981526020902060005b878110156130845781548482015290860190840161306b565b83019850505b5050505050505092915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516130cf816017850160208801613579565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000601791840191820152835161310c816028840160208801613579565b01602801949350505050565b602081526000612a8a6020830184612fcd565b60c08152600061313e60c0830189612fcd565b82810360208401526131508189612fcd565b905082810360408401526131648188612fcd565b951515606084015250506080810192909252151560a0909101529392505050565b60a08152600061319860a0830188612fcd565b63ffffffff8716602084015282810360408401526131b68187612f16565b606084019590955250509015156080909101529392505050565b60006101008a83528060208401526131ea8184018b612fcd565b63ffffffff9990991660408401525050606081019590955292151560808501526001600160a01b039190911660a084015260c083015260e09091015292915050565b60006101208e83528d602084015280604084015261324d8184018d8f612fa4565b90508281036060840152613262818b8d612fa4565b9050828103608084015261327781898b612fa4565b91505085151560a08301526001600160a01b03851660c08301528360e08301526132a5610100830184612f82565b9d9c50505050505050505050505050565b87815286602082015260a0604082015260006132d660a083018789612fa4565b82810360608401526132e9818688612fa4565b91505082608083015298975050505050505050565b60006101208c83528b602084015280604084015261331f8184018b8d612fa4565b905063ffffffff89166060840152828103608084015261333f8189612f16565b91505085151560a08301526001600160a01b03851660c08301528360e083015261336d610100830184612f82565b9b9a5050505050505050505050565b60006101408c83528b602084015280604084015261339c8184018c612fcd565b905082810360608401526133b0818b612fcd565b905082810360808401526133c4818a612fcd565b97151560a0840152505093151560c08501526001600160a01b039290921660e08401526101008301526101209091015295945050505050565b85815284602082015260a06040820152600061341c60a0830186612ff9565b828103606084015261342e8186612f50565b9150508260808301529695505050505050565b60006101408c83528b60208401528a60408401528060608401526134678184018b612ff9565b9050828103608084015261347b818a612ff9565b905082810360a084015261348f8189612ff9565b96151560c084015250506001600160a01b039390931660e0840152901515610100830152610120909101529695505050505050565b60006101008a83528960208401528860408401528060608401526134ea81840189612ff9565b905063ffffffff8716608084015282810360a084015261350a8187612f50565b6001600160a01b039590951660c0840152505060e001529695505050505050565b6000821982111561353e5761353e613612565b500190565b600081600019048311821515161561355d5761355d613612565b500290565b60008282101561357457613574613612565b500390565b60005b8381101561359457818101518382015260200161357c565b838111156109325750506000910152565b6000816135b4576135b4613612565b506000190190565b600181811c908216806135d057607f821691505b602082108114156135f157634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561360b5761360b613612565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122091b54617769e53828f4df1aa1797632900297e79182f588b1a84a52bbc1e1e9f64736f6c63430008040033","abi":[{"inputs":[{"internalType":"address","name":"parametersAddress","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"epoch","type":"uint256"},{"indexed":false,"internalType":"bool","name":"active","type":"bool"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"CollectionActivityStatus","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"epoch","type":"uint256"},{"indexed":false,"internalType":"string","name":"name","type":"string"},{"indexed":false,"internalType":"uint32","name":"aggregationMethod","type":"uint32"},{"indexed":false,"internalType":"uint256[]","name":"jobIDs","type":"uint256[]"},{"indexed":false,"internalType":"bool","name":"active","type":"bool"},{"indexed":false,"internalType":"address","name":"creator","type":"address"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"},{"indexed":false,"internalType":"enum AssetStorage.assetTypes","name":"assetType","type":"uint8"}],"name":"CollectionCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"epoch","type":"uint256"},{"indexed":false,"internalType":"string","name":"name","type":"string"},{"indexed":false,"internalType":"uint32","name":"aggregationMethod","type":"uint32"},{"indexed":false,"internalType":"uint256[]","name":"jobIDs","type":"uint256[]"},{"indexed":false,"internalType":"address","name":"creator","type":"address"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"CollectionReported","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"epoch","type":"uint256"},{"indexed":false,"internalType":"string","name":"name","type":"string"},{"indexed":false,"internalType":"uint256[]","name":"updatedJobIDs","type":"uint256[]"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"CollectionUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"epoch","type":"uint256"},{"indexed":false,"internalType":"bool","name":"active","type":"bool"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"JobActivityStatus","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"epoch","type":"uint256"},{"indexed":false,"internalType":"string","name":"url","type":"string"},{"indexed":false,"internalType":"string","name":"selector","type":"string"},{"indexed":false,"internalType":"string","name":"name","type":"string"},{"indexed":false,"internalType":"bool","name":"repeat","type":"bool"},{"indexed":false,"internalType":"address","name":"creator","type":"address"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"},{"indexed":false,"internalType":"enum AssetStorage.assetTypes","name":"assetType","type":"uint8"}],"name":"JobCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"epoch","type":"uint256"},{"indexed":false,"internalType":"string","name":"url","type":"string"},{"indexed":false,"internalType":"string","name":"selector","type":"string"},{"indexed":false,"internalType":"string","name":"name","type":"string"},{"indexed":false,"internalType":"bool","name":"repeat","type":"bool"},{"indexed":false,"internalType":"address","name":"creator","type":"address"},{"indexed":false,"internalType":"bool","name":"active","type":"bool"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"JobReported","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"epoch","type":"uint256"},{"indexed":false,"internalType":"string","name":"url","type":"string"},{"indexed":false,"internalType":"string","name":"selector","type":"string"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"JobUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"collectionID","type":"uint256"},{"internalType":"uint256","name":"jobID","type":"uint256"}],"name":"addJobToCollection","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"collections","outputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"string","name":"name","type":"string"},{"internalType":"uint32","name":"aggregationMethod","type":"uint32"},{"internalType":"uint256","name":"epoch","type":"uint256"},{"internalType":"bool","name":"active","type":"bool"},{"internalType":"address","name":"creator","type":"address"},{"internalType":"uint256","name":"result","type":"uint256"},{"internalType":"uint256","name":"assetType","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"uint256[]","name":"jobIDs","type":"uint256[]"},{"internalType":"uint32","name":"aggregationMethod","type":"uint32"}],"name":"createCollection","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"url","type":"string"},{"internalType":"string","name":"selector","type":"string"},{"internalType":"string","name":"name","type":"string"},{"internalType":"bool","name":"repeat","type":"bool"}],"name":"createJob","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"fulfillAsset","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"getActiveStatus","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"getAssetType","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"getCollection","outputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"uint32","name":"aggregationMethod","type":"uint32"},{"internalType":"uint256[]","name":"jobIDs","type":"uint256[]"},{"internalType":"uint256","name":"result","type":"uint256"},{"internalType":"bool","name":"active","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"getJob","outputs":[{"internalType":"string","name":"url","type":"string"},{"internalType":"string","name":"selector","type":"string"},{"internalType":"string","name":"name","type":"string"},{"internalType":"bool","name":"repeat","type":"bool"},{"internalType":"uint256","name":"result","type":"uint256"},{"internalType":"bool","name":"active","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getNumAssets","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"getResult","outputs":[{"internalType":"uint256","name":"result","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"jobs","outputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"epoch","type":"uint256"},{"internalType":"string","name":"url","type":"string"},{"internalType":"string","name":"selector","type":"string"},{"internalType":"string","name":"name","type":"string"},{"internalType":"bool","name":"repeat","type":"bool"},{"internalType":"bool","name":"active","type":"bool"},{"internalType":"address","name":"creator","type":"address"},{"internalType":"uint256","name":"result","type":"uint256"},{"internalType":"uint256","name":"assetType","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"numAssets","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"parameters","outputs":[{"internalType":"contract IParameters","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"collectionID","type":"uint256"},{"internalType":"uint256","name":"jobIDIndex","type":"uint256"}],"name":"removeJobFromCollection","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"bool","name":"assetStatus","type":"bool"}],"name":"setAssetStatus","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"jobID","type":"uint256"},{"internalType":"string","name":"url","type":"string"},{"internalType":"string","name":"selector","type":"string"}],"name":"updateJob","outputs":[],"stateMutability":"nonpayable","type":"function"}]}