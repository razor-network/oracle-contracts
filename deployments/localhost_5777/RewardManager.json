{"metadata":"{\"compiler\":{\"version\":\"0.8.4\"},\"sources\":{\"contracts/Core/RewardManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interface/IParameters.sol\\\";\\nimport \\\"./interface/IBlockManager.sol\\\";\\nimport \\\"./interface/IStakeManager.sol\\\";\\nimport \\\"./interface/IVoteManager.sol\\\";\\nimport \\\"./storage/RewardStorage.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\nimport \\\"./ACL.sol\\\";\\n\\n/// @title StakeManager\\n/// @notice StakeManager handles stake, unstake, withdraw, reward, functions\\n/// for stakers\\ncontract RewardManager is Initializable, ACL, RewardStorage {\\n    IParameters public parameters;\\n    IStakeManager public stakeManager;\\n    IVoteManager public voteManager;\\n    IBlockManager public blockManager;\\n\\n    modifier checkEpoch(uint256 epoch) {\\n        require(epoch == parameters.getEpoch(), \\\"incorrect epoch\\\");\\n        _;\\n    }\\n\\n    modifier checkState(uint256 state) {\\n        require(state == parameters.getState(), \\\"incorrect state\\\");\\n        _;\\n    }\\n\\n    constructor(uint256 _blockReward) {\\n        blockReward = _blockReward;\\n    }\\n\\n    /// @param stakeManagerAddress The address of the VoteManager contract\\n    /// @param voteManagersAddress The address of the VoteManager contract\\n    /// @param blockManagerAddress The address of the BlockManager contract\\n    /// @param parametersAddress The address of the StateManager contract\\n    function initialize(\\n        address stakeManagerAddress,\\n        address voteManagersAddress,\\n        address blockManagerAddress,\\n        address parametersAddress\\n    ) external initializer onlyRole(DEFAULT_ADMIN_ROLE) {\\n        stakeManager = IStakeManager(stakeManagerAddress);\\n        voteManager = IVoteManager(voteManagersAddress);\\n        blockManager = IBlockManager(blockManagerAddress);\\n        parameters = IParameters(parametersAddress);\\n    }\\n\\n    function updateBlockReward(uint256 _blockReward) external onlyRole(parameters.getDefaultAdminHash()) {\\n        blockReward = _blockReward;\\n    }\\n\\n    /// @notice gives penalty to stakers for failing to reveal or\\n    /// reveal value deviations\\n    /// @param stakerId The id of staker currently in consideration\\n    /// @param epoch the epoch value\\n    /// todo reduce complexity\\n    function givePenalties(uint256 stakerId, uint256 epoch) external initialized onlyRole(parameters.getRewardModifierHash()) {\\n        _givePenalties(stakerId, epoch);\\n    }\\n\\n    /// @notice The function gives block reward for one valid proposer in the\\n    /// previous epoch by increasing stake of staker\\n    /// called from confirmBlock function of BlockManager contract\\n    /// @param stakerId The ID of the staker\\n    function giveBlockReward(uint256 stakerId, uint256 epoch) external onlyRole(parameters.getRewardModifierHash()) {\\n        if (blockReward > 0) {\\n            uint256 newStake = stakeManager.getStaker(stakerId).stake + (blockReward);\\n            stakeManager.setStakerStake(stakerId, newStake, \\\"Block Reward\\\", epoch);\\n        }\\n    }\\n\\n    /// @notice Calculates the stake and age inactivity penalties of the staker\\n    /// @param epochs The difference of epochs where the staker was inactive\\n    /// @param stakeValue The Stake that staker had in last epoch\\n    function calculateInactivityPenalties(\\n        uint256 epochs,\\n        uint256 stakeValue,\\n        uint256 ageValue\\n    ) public view returns (uint256, uint256) {\\n        uint256 penalty = ((epochs) * (stakeValue * (parameters.penaltyNotRevealNum()))) / parameters.penaltyNotRevealDenom();\\n        uint256 newStake = penalty < stakeValue ? stakeValue - penalty : 0;\\n        uint256 penaltyAge = epochs * 10000;\\n        uint256 newAge = penaltyAge < ageValue ? ageValue - penaltyAge : 0;\\n        return (newStake, newAge);\\n    }\\n\\n    /// @notice The function gives out penalties to stakers during commit.\\n    /// The penalties are given for inactivity, failing to reveal\\n    /// , deviation from the median value of particular asset\\n    /// @param stakerId The staker id\\n    /// @param epoch The Epoch value in consideration\\n    function _giveInactivityPenalties(uint256 stakerId, uint256 epoch) internal {\\n        Structs.Staker memory thisStaker = stakeManager.getStaker(stakerId);\\n\\n        uint256 epochLastActive = thisStaker.epochStaked < thisStaker.epochLastRevealed\\n            ? thisStaker.epochLastRevealed\\n            : thisStaker.epochStaked;\\n        // penalize or reward if last active more than epoch - 1\\n        uint256 inactiveEpochs = (epoch - epochLastActive == 0) ? 0 : epoch - epochLastActive - 1;\\n\\n        if (inactiveEpochs <= parameters.gracePeriod()) {\\n            return;\\n        }\\n        uint256 previousStake = thisStaker.stake;\\n        uint256 previousAge = thisStaker.age;\\n        // uint256 currentStake = previousStake;\\n        (uint256 newStake, uint256 newAge) = calculateInactivityPenalties(inactiveEpochs, previousStake, previousAge);\\n        if (newStake < previousStake) {\\n            stakeManager.setStakerStake(thisStaker.id, newStake, \\\"Inactivity Penalty\\\", epoch);\\n        }\\n        if (newAge < previousAge) {\\n            stakeManager.setStakerAge(thisStaker.id, newAge, epoch);\\n        }\\n    }\\n\\n    function _givePenalties(uint256 stakerId, uint256 epoch) internal {\\n        _giveInactivityPenalties(stakerId, epoch);\\n        Structs.Staker memory thisStaker = stakeManager.getStaker(stakerId);\\n        uint256 previousAge = thisStaker.age;\\n        uint256 epochLastRevealed = thisStaker.epochLastRevealed;\\n\\n        Structs.Block memory _block = blockManager.getBlock(epochLastRevealed);\\n\\n        uint256[] memory mediansLastEpoch = _block.medians;\\n\\n        if (mediansLastEpoch.length > 0) {\\n            uint256 penalty = 0;\\n            for (uint256 i = 0; i < mediansLastEpoch.length; i++) {\\n                uint256 voteLastEpoch = voteManager.getVote(epochLastRevealed, thisStaker.id, i).value;\\n                uint256 medianLastEpoch = mediansLastEpoch[i];\\n\\n                if (voteLastEpoch > medianLastEpoch) {\\n                    penalty = penalty + (previousAge * (voteLastEpoch - medianLastEpoch)**2) / medianLastEpoch**2;\\n                } else {\\n                    penalty = penalty + (previousAge * (medianLastEpoch - voteLastEpoch)**2) / medianLastEpoch**2;\\n                }\\n            }\\n\\n            uint256 newAge = (previousAge + 10000 - (penalty));\\n            newAge = newAge > parameters.maxAge() ? parameters.maxAge() : newAge;\\n\\n            stakeManager.setStakerAge(thisStaker.id, newAge, epoch);\\n        }\\n    }\\n}\\n\"},\"contracts/Core/interface/IParameters.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IParameters {\\n    function commit() external view returns (uint32);\\n\\n    function reveal() external view returns (uint32);\\n\\n    function propose() external view returns (uint32);\\n\\n    function dispute() external view returns (uint32);\\n\\n    function burnAddress() external view returns (address);\\n\\n    function penaltyNotRevealNum() external view returns (uint256);\\n\\n    function penaltyNotRevealDenom() external view returns (uint256);\\n\\n    function resetLockPenalty() external view returns (uint256);\\n\\n    function minStake() external view returns (uint256);\\n\\n    function withdrawLockPeriod() external view returns (uint256);\\n\\n    function withdrawReleasePeriod() external view returns (uint256);\\n\\n    function maxAltBlocks() external view returns (uint256);\\n\\n    function epochLength() external view returns (uint256);\\n\\n    function numStates() external view returns (uint256);\\n\\n    function gracePeriod() external view returns (uint256);\\n\\n    function aggregationRange() external view returns (uint256);\\n\\n    function exposureDenominator() external view returns (uint256);\\n\\n    function slashPenaltyNum() external view returns (uint256);\\n\\n    function slashPenaltyDenom() external view returns (uint256);\\n\\n    function getEpoch() external view returns (uint256);\\n\\n    function getState() external view returns (uint256);\\n\\n    function maxAge() external view returns (uint256);\\n\\n    function escapeHatchEnabled() external view returns (bool);\\n\\n    function getAssetConfirmerHash() external view returns (bytes32);\\n\\n    function getBlockConfirmerHash() external view returns (bytes32);\\n\\n    function getStakeModifierHash() external view returns (bytes32);\\n\\n    function getStakerActivityUpdaterHash() external view returns (bytes32);\\n\\n    function getRewardModifierHash() external view returns (bytes32);\\n\\n    function getAssetModifierHash() external view returns (bytes32);\\n\\n    function getDefaultAdminHash() external view returns (bytes32);\\n}\\n\"},\"contracts/lib/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nlibrary Structs {\\n    struct Vote {\\n        uint256 value;\\n        uint256 weight;\\n    }\\n\\n    struct Staker {\\n        uint256 id;\\n        address _address;\\n        uint256 stake;\\n        uint256 age;\\n        uint256 epochStaked;\\n        uint256 epochLastCommitted;\\n        uint256 epochLastRevealed;\\n        bool acceptDelegation;\\n        uint256 commission;\\n        address tokenAddress;\\n    }\\n\\n    struct Lock {\\n        uint256 amount; //amount in sTokens\\n        uint256 withdrawAfter;\\n    }\\n\\n    struct Block {\\n        uint256 proposerId;\\n        uint256[] ids;\\n        uint256[] medians;\\n        uint256 iteration;\\n        uint256 biggestInfluence;\\n        bool valid;\\n    }\\n\\n    struct Dispute {\\n        uint256 accWeight;\\n        uint256 median;\\n        uint256 lastVisited;\\n        uint256 assetId;\\n    }\\n\\n    struct Job {\\n        uint256 id;\\n        uint256 epoch;\\n        string url;\\n        string selector;\\n        string name;\\n        bool repeat;\\n        bool active;\\n        address creator;\\n        uint256 result;\\n        uint256 assetType;\\n    }\\n\\n    struct Collection {\\n        uint256 id;\\n        string name;\\n        uint32 aggregationMethod;\\n        uint256[] jobIDs;\\n        mapping(uint256 => bool) jobIDExist;\\n        uint256 epoch;\\n        bool active;\\n        address creator;\\n        uint256 result;\\n        uint256 assetType;\\n    }\\n}\\n\"},\"contracts/Core/interface/IBlockManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../lib/Structs.sol\\\";\\n\\ninterface IBlockManager {\\n    // elected proposer proposes block.\\n    //we use a probabilistic method to elect stakers weighted by stake\\n    // protocol works like this.\\n    //select a staker pseudorandomly (not weighted by anything)\\n    // that staker then tosses a biased coin.\\n    //bias = hisStake/biggestStake. if its heads, he can propose block\\n    // end of iteration. try next iteration\\n    // note that only one staker or no stakers selected in each iteration.\\n    // stakers elected in higher iterations can also propose hoping that\\n    // stakers with lower iteration do not propose for some reason\\n    function propose(\\n        uint256 epoch,\\n        uint256[] memory ids,\\n        uint256[] memory medians,\\n        uint256 iteration,\\n        uint256 biggestInfluencerId\\n    ) external;\\n\\n    //anyone can give sorted votes in batches in dispute state\\n\\n    function giveSorted(\\n        uint256 epoch,\\n        uint256 assetId,\\n        uint256[] calldata sorted\\n    ) external;\\n\\n    function resetDispute(uint256 epoch) external;\\n\\n    function isElectedProposer(\\n        uint256 iteration,\\n        uint256 biggestInfluencerId,\\n        uint256 stakerId\\n    ) external;\\n\\n    function confirmBlock() external;\\n\\n    function getBlock(uint256 epoch) external view returns (Structs.Block memory _block);\\n\\n    function getBlockMedians(uint256 epoch) external view returns (uint256[] memory _blockMedians);\\n\\n    function getLowerCutoffs(uint256 epoch) external view returns (uint256[] memory _lowerCutoffs);\\n\\n    function getHigherCutoffs(uint256 epoch) external view returns (uint256[] memory _higherCutoffs);\\n\\n    function getProposedBlockMedians(uint256 epoch, uint256 proposedBlock) external view returns (uint256[] memory _blockMedians);\\n\\n    function getNumProposedBlocks(uint256 epoch) external view returns (uint256);\\n}\\n\"},\"contracts/Core/interface/IStakeManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../lib/Structs.sol\\\";\\n\\ninterface IStakeManager {\\n    function setStakerEpochLastRevealed(uint256 _id, uint256 _epochLastRevealed) external;\\n\\n    function updateCommitmentEpoch(uint256 stakerId) external;\\n\\n    function stake(uint256 epoch, uint256 amount) external;\\n\\n    function delegate(\\n        uint256 epoch,\\n        uint256 amount,\\n        uint256 stakerId\\n    ) external;\\n\\n    function unstake(uint256 epoch) external;\\n\\n    function withdraw(uint256 epoch) external;\\n\\n    function setDelegationAcceptance(bool status) external;\\n\\n    function setCommission(uint256 commission) external;\\n\\n    function decreaseCommission(uint256 commission) external;\\n\\n    function resetLock(uint256 stakerId) external;\\n\\n    function setStakerStake(\\n        uint256 _id,\\n        uint256 _stake,\\n        string memory _reason,\\n        uint256 _epoch\\n    ) external;\\n\\n    function slash(\\n        uint256 id,\\n        address bountyHunter,\\n        uint256 epoch\\n    ) external;\\n\\n    function setStakerAge(\\n        uint256 _id,\\n        uint256 _age,\\n        uint256 _epoch\\n    ) external;\\n\\n    function escape(address _address) external;\\n\\n    function getStakerId(address _address) external view returns (uint256);\\n\\n    function getStaker(uint256 _id) external view returns (Structs.Staker memory staker);\\n\\n    function getNumStakers() external view returns (uint256);\\n\\n    function getAge() external view returns (uint256);\\n\\n    function getInfluence(uint256 stakerId) external view returns (uint256);\\n}\\n\"},\"contracts/Core/interface/IVoteManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../lib/Structs.sol\\\";\\n\\ninterface IVoteManager {\\n    function commit(uint256 epoch, bytes32 commitment) external;\\n\\n    function reveal(\\n        uint256 epoch,\\n        bytes32 root,\\n        uint256[] calldata values,\\n        bytes32[][] calldata proofs,\\n        bytes32 secret,\\n        address stakerAddress\\n    ) external;\\n\\n    function getCommitment(uint256 epoch, uint256 stakerId) external view returns (bytes32);\\n\\n    function getVote(\\n        uint256 epoch,\\n        uint256 stakerId,\\n        uint256 assetId\\n    ) external view returns (Structs.Vote memory vote);\\n\\n    function getVoteWeight(\\n        uint256 epoch,\\n        uint256 assetId,\\n        uint256 voteValue\\n    ) external view returns (uint256);\\n\\n    function getTotalInfluenceRevealed(uint256 epoch, uint256 assetId) external view returns (uint256);\\n}\\n\"},\"contracts/Core/storage/RewardStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\nimport \\\"../../lib/Structs.sol\\\";\\n\\ncontract RewardStorage {\\n    uint256 public blockReward;\\n}\\n\"},\"contracts/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * Forked from OZ's (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/b9125001f0a1c44d596ca3a47536f1a467e3a29d/contracts/proxy/utils/Initializable.sol)\\n */\\n\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    modifier initialized() {\\n        require(_initialized, \\\"Contract should be initialized\\\");\\n        _;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"},\"contracts/Core/ACL.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract ACL is AccessControl {\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n}\\n\"}}}","address":"0x0E801D84Fa97b50751Dbf25036d067dCf18858bF","bytecode":"0x60806040523480156200001157600080fd5b5060405162001d4938038062001d498339810160408190526200003491620000e2565b620000416000336200004a565b600255620000fb565b6200005682826200005a565b5050565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff16620000565760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b600060208284031215620000f4578081fd5b5051919050565b611c3e806200010b6000396000f3fe608060405234801561001057600080fd5b506004361061011b5760003560e01c8063746c8b65116100b2578063a217fddf11610081578063d9169b3211610066578063d9169b321461029e578063f580ffcb146102b1578063f8c8765e146102c457600080fd5b8063a217fddf14610283578063d547741f1461028b57600080fd5b8063746c8b65146102115780637542ff9514610224578063890357301461023757806391d148541461024a57600080fd5b806336568abe116100ee57806336568abe1461019857806342c1e587146101ab57806354eae15e146101d657806369ce6533146101e957600080fd5b806301ffc9a7146101205780630ac168a114610148578063248a9ca31461015f5780632f2ff15d14610183575b600080fd5b61013361012e3660046116da565b6102d7565b60405190151581526020015b60405180910390f35b61015160025481565b60405190815260200161013f565b61015161016d36600461167b565b6000908152600160208190526040909120015490565b6101966101913660046116ab565b610370565b005b6101966101a63660046116ab565b61039c565b6005546101be906001600160a01b031681565b6040516001600160a01b03909116815260200161013f565b6101966101e43660046118b9565b61042d565b6101fc6101f73660046118da565b610519565b6040805192835260208301919091520161013f565b61019661021f3660046118b9565b6106a0565b6004546101be906001600160a01b031681565b6003546101be906001600160a01b031681565b6101336102583660046116ab565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610151600081565b6101966102993660046116ab565b610873565b6006546101be906001600160a01b031681565b6101966102bf36600461167b565b61089a565b6101966102d2366004611620565b610930565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061036a57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6000828152600160208190526040909120015461038d8133610a65565b6103978383610ae5565b505050565b6001600160a01b038116331461041f5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b6104298282610b6c565b5050565b60005460ff1661047f5760405162461bcd60e51b815260206004820152601e60248201527f436f6e74726163742073686f756c6420626520696e697469616c697a656400006044820152606401610416565b600360009054906101000a90046001600160a01b03166001600160a01b03166366061b176040518163ffffffff1660e01b815260040160206040518083038186803b1580156104cd57600080fd5b505afa1580156104e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105059190611693565b61050f8133610a65565b6103978383610bef565b6000806000600360009054906101000a90046001600160a01b03166001600160a01b031663b1cc45006040518163ffffffff1660e01b815260040160206040518083038186803b15801561056c57600080fd5b505afa158015610580573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a49190611693565b600360009054906101000a90046001600160a01b03166001600160a01b031663a86f5a3f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105f257600080fd5b505afa158015610606573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062a9190611693565b6106349087611b2c565b61063e9088611b2c565b6106489190611a1e565b9050600085821061065a576000610664565b6106648287611b4b565b9050600061067488612710611b2c565b90506000868210610686576000610690565b6106908288611b4b565b9299929850919650505050505050565b600360009054906101000a90046001600160a01b03166001600160a01b03166366061b176040518163ffffffff1660e01b815260040160206040518083038186803b1580156106ee57600080fd5b505afa158015610702573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107269190611693565b6107308133610a65565b6002541561039757600254600480546040516371e4cc7f60e11b8152918201869052600092916001600160a01b039091169063e3c998fe906024016101406040518083038186803b15801561078457600080fd5b505afa158015610798573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bc91906117d5565b604001516107ca9190611a06565b6004805460405163a8a3e96f60e01b81529182018790526024820183905260806044830152600c60848301527f426c6f636b20526577617264000000000000000000000000000000000000000060a4830152606482018690529192506001600160a01b039091169063a8a3e96f9060c401600060405180830381600087803b15801561085557600080fd5b505af1158015610869573d6000803e3d6000fd5b5050505050505050565b600082815260016020819052604090912001546108908133610a65565b6103978383610b6c565b600360009054906101000a90046001600160a01b03166001600160a01b031663b1a627816040518163ffffffff1660e01b815260040160206040518083038186803b1580156108e857600080fd5b505afa1580156108fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109209190611693565b61092a8133610a65565b50600255565b600054610100900460ff1680610949575060005460ff16155b6109bb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610416565b600054610100900460ff161580156109dd576000805461ffff19166101011790555b60006109e98133610a65565b50600480546001600160a01b038088167fffffffffffffffffffffffff000000000000000000000000000000000000000092831617909255600580548784169083161790556006805486841690831617905560038054928516929091169190911790558015610a5e576000805461ff00191690555b5050505050565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff1661042957610aa3816001600160a01b03166014611070565b610aae836020611070565b604051602001610abf929190611905565b60408051601f198184030181529082905262461bcd60e51b825261041691600401611986565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff166104295760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff16156104295760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b610bf982826112e6565b600480546040516371e4cc7f60e11b81529182018490526000916001600160a01b039091169063e3c998fe906024016101406040518083038186803b158015610c4157600080fd5b505afa158015610c55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7991906117d5565b606081015160c08201516006546040517f04c0756900000000000000000000000000000000000000000000000000000000815260048101839052939450919290916000916001600160a01b03909116906304c075699060240160006040518083038186803b158015610cea57600080fd5b505afa158015610cfe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d26919081019061171a565b604081015180519192509015611067576000805b8251811015610ec05760055487516040517f8ce7ff4a000000000000000000000000000000000000000000000000000000008152600481018890526024810191909152604481018390526000916001600160a01b031690638ce7ff4a90606401604080518083038186803b158015610db157600080fd5b505afa158015610dc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de9919061186b565b6000015190506000848381518110610e1157634e487b7160e01b600052603260045260246000fd5b6020026020010151905080821115610e6957610e2e600282611a81565b6002610e3a8385611b4b565b610e449190611a81565b610e4e908a611b2c565b610e589190611a1e565b610e629085611a06565b9350610eab565b610e74600282611a81565b6002610e808484611b4b565b610e8a9190611a81565b610e94908a611b2c565b610e9e9190611a1e565b610ea89085611a06565b93505b50508080610eb890611ba9565b915050610d3a565b50600081610ed087612710611a06565b610eda9190611b4b565b9050600360009054906101000a90046001600160a01b03166001600160a01b031663687043c56040518163ffffffff1660e01b815260040160206040518083038186803b158015610f2a57600080fd5b505afa158015610f3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f629190611693565b8111610f6e5780610ff4565b600360009054906101000a90046001600160a01b03166001600160a01b031663687043c56040518163ffffffff1660e01b815260040160206040518083038186803b158015610fbc57600080fd5b505afa158015610fd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff49190611693565b6004805489516040516313d2d9a360e01b81529283015260248201839052604482018b90529192506001600160a01b03909116906313d2d9a3906064015b600060405180830381600087803b15801561104c57600080fd5b505af1158015611060573d6000803e3d6000fd5b5050505050505b50505050505050565b6060600061107f836002611b2c565b61108a906002611a06565b67ffffffffffffffff8111156110b057634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156110da576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061111f57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061119057634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006111cc846002611b2c565b6111d7906001611a06565b90505b6001811115611290577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061122657634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061124a57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361128981611b92565b90506111da565b5083156112df5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610416565b9392505050565b600480546040516371e4cc7f60e11b81529182018490526000916001600160a01b039091169063e3c998fe906024016101406040518083038186803b15801561132e57600080fd5b505afa158015611342573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061136691906117d5565b905060008160c00151826080015110611383578160800151611389565b8160c001515b905060006113978285611b4b565b156113b75760016113a88386611b4b565b6113b29190611b4b565b6113ba565b60005b9050600360009054906101000a90046001600160a01b03166001600160a01b031663a06db7dc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561140a57600080fd5b505afa15801561141e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114429190611693565b811161144f575050505050565b60408301516060840151600080611467858585610519565b91509150838210156115125760048054885160405163a8a3e96f60e01b8152928301526024820184905260806044830152601260848301527f496e61637469766974792050656e616c7479000000000000000000000000000060a4830152606482018a90526001600160a01b03169063a8a3e96f9060c401600060405180830381600087803b1580156114f957600080fd5b505af115801561150d573d6000803e3d6000fd5b505050505b82811015611557576004805488516040516313d2d9a360e01b81529283015260248201839052604482018a90526001600160a01b0316906313d2d9a390606401611032565b505050505050505050565b805161156d81611bf0565b919050565b600082601f830112611582578081fd5b8151602067ffffffffffffffff8083111561159f5761159f611bda565b8260051b604051601f19603f830116810181811084821117156115c4576115c4611bda565b604052848152838101925086840182880185018910156115e2578687fd5b8692505b858310156116045780518452928401926001929092019184016115e6565b50979650505050505050565b8051801515811461156d57600080fd5b60008060008060808587031215611635578384fd5b843561164081611bf0565b9350602085013561165081611bf0565b9250604085013561166081611bf0565b9150606085013561167081611bf0565b939692955090935050565b60006020828403121561168c578081fd5b5035919050565b6000602082840312156116a4578081fd5b5051919050565b600080604083850312156116bd578182fd5b8235915060208301356116cf81611bf0565b809150509250929050565b6000602082840312156116eb578081fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146112df578182fd5b60006020828403121561172b578081fd5b815167ffffffffffffffff80821115611742578283fd5b9083019060c08286031215611755578283fd5b61175d6119b9565b82518152602083015182811115611772578485fd5b61177e87828601611572565b602083015250604083015182811115611795578485fd5b6117a187828601611572565b60408301525060608301516060820152608083015160808201526117c760a08401611610565b60a082015295945050505050565b600061014082840312156117e7578081fd5b6117ef6119e2565b825181526117ff60208401611562565b602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015261184260e08401611610565b60e08201526101008381015190820152610120611860818501611562565b908201529392505050565b60006040828403121561187c578081fd5b6040516040810181811067ffffffffffffffff8211171561189f5761189f611bda565b604052825181526020928301519281019290925250919050565b600080604083850312156118cb578081fd5b50508035926020909101359150565b6000806000606084860312156118ee578081fd5b505081359360208301359350604090920135919050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161193d816017850160208801611b62565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000601791840191820152835161197a816028840160208801611b62565b01602801949350505050565b60208152600082518060208401526119a5816040850160208701611b62565b601f01601f19169190910160400192915050565b60405160c0810167ffffffffffffffff811182821017156119dc576119dc611bda565b60405290565b604051610140810167ffffffffffffffff811182821017156119dc576119dc611bda565b60008219821115611a1957611a19611bc4565b500190565b600082611a3957634e487b7160e01b81526012600452602481fd5b500490565b600181815b80851115611a79578160001904821115611a5f57611a5f611bc4565b80851615611a6c57918102915b93841c9390800290611a43565b509250929050565b60006112df60ff841683600082611a9a5750600161036a565b81611aa75750600061036a565b8160018114611abd5760028114611ac757611ae3565b600191505061036a565b60ff841115611ad857611ad8611bc4565b50506001821b61036a565b5060208310610133831016604e8410600b8410161715611b06575081810a61036a565b611b108383611a3e565b8060001904821115611b2457611b24611bc4565b029392505050565b6000816000190483118215151615611b4657611b46611bc4565b500290565b600082821015611b5d57611b5d611bc4565b500390565b60005b83811015611b7d578181015183820152602001611b65565b83811115611b8c576000848401525b50505050565b600081611ba157611ba1611bc4565b506000190190565b6000600019821415611bbd57611bbd611bc4565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611c0557600080fd5b5056fea26469706673582212209a39559741e2a2fba014e78c045456e921d3129fbb87aa13659e6a053fd80ad464736f6c63430008040033","deployedBytecode":"0x608060405234801561001057600080fd5b506004361061011b5760003560e01c8063746c8b65116100b2578063a217fddf11610081578063d9169b3211610066578063d9169b321461029e578063f580ffcb146102b1578063f8c8765e146102c457600080fd5b8063a217fddf14610283578063d547741f1461028b57600080fd5b8063746c8b65146102115780637542ff9514610224578063890357301461023757806391d148541461024a57600080fd5b806336568abe116100ee57806336568abe1461019857806342c1e587146101ab57806354eae15e146101d657806369ce6533146101e957600080fd5b806301ffc9a7146101205780630ac168a114610148578063248a9ca31461015f5780632f2ff15d14610183575b600080fd5b61013361012e3660046116da565b6102d7565b60405190151581526020015b60405180910390f35b61015160025481565b60405190815260200161013f565b61015161016d36600461167b565b6000908152600160208190526040909120015490565b6101966101913660046116ab565b610370565b005b6101966101a63660046116ab565b61039c565b6005546101be906001600160a01b031681565b6040516001600160a01b03909116815260200161013f565b6101966101e43660046118b9565b61042d565b6101fc6101f73660046118da565b610519565b6040805192835260208301919091520161013f565b61019661021f3660046118b9565b6106a0565b6004546101be906001600160a01b031681565b6003546101be906001600160a01b031681565b6101336102583660046116ab565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610151600081565b6101966102993660046116ab565b610873565b6006546101be906001600160a01b031681565b6101966102bf36600461167b565b61089a565b6101966102d2366004611620565b610930565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061036a57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6000828152600160208190526040909120015461038d8133610a65565b6103978383610ae5565b505050565b6001600160a01b038116331461041f5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b6104298282610b6c565b5050565b60005460ff1661047f5760405162461bcd60e51b815260206004820152601e60248201527f436f6e74726163742073686f756c6420626520696e697469616c697a656400006044820152606401610416565b600360009054906101000a90046001600160a01b03166001600160a01b03166366061b176040518163ffffffff1660e01b815260040160206040518083038186803b1580156104cd57600080fd5b505afa1580156104e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105059190611693565b61050f8133610a65565b6103978383610bef565b6000806000600360009054906101000a90046001600160a01b03166001600160a01b031663b1cc45006040518163ffffffff1660e01b815260040160206040518083038186803b15801561056c57600080fd5b505afa158015610580573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a49190611693565b600360009054906101000a90046001600160a01b03166001600160a01b031663a86f5a3f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105f257600080fd5b505afa158015610606573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062a9190611693565b6106349087611b2c565b61063e9088611b2c565b6106489190611a1e565b9050600085821061065a576000610664565b6106648287611b4b565b9050600061067488612710611b2c565b90506000868210610686576000610690565b6106908288611b4b565b9299929850919650505050505050565b600360009054906101000a90046001600160a01b03166001600160a01b03166366061b176040518163ffffffff1660e01b815260040160206040518083038186803b1580156106ee57600080fd5b505afa158015610702573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107269190611693565b6107308133610a65565b6002541561039757600254600480546040516371e4cc7f60e11b8152918201869052600092916001600160a01b039091169063e3c998fe906024016101406040518083038186803b15801561078457600080fd5b505afa158015610798573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bc91906117d5565b604001516107ca9190611a06565b6004805460405163a8a3e96f60e01b81529182018790526024820183905260806044830152600c60848301527f426c6f636b20526577617264000000000000000000000000000000000000000060a4830152606482018690529192506001600160a01b039091169063a8a3e96f9060c401600060405180830381600087803b15801561085557600080fd5b505af1158015610869573d6000803e3d6000fd5b5050505050505050565b600082815260016020819052604090912001546108908133610a65565b6103978383610b6c565b600360009054906101000a90046001600160a01b03166001600160a01b031663b1a627816040518163ffffffff1660e01b815260040160206040518083038186803b1580156108e857600080fd5b505afa1580156108fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109209190611693565b61092a8133610a65565b50600255565b600054610100900460ff1680610949575060005460ff16155b6109bb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610416565b600054610100900460ff161580156109dd576000805461ffff19166101011790555b60006109e98133610a65565b50600480546001600160a01b038088167fffffffffffffffffffffffff000000000000000000000000000000000000000092831617909255600580548784169083161790556006805486841690831617905560038054928516929091169190911790558015610a5e576000805461ff00191690555b5050505050565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff1661042957610aa3816001600160a01b03166014611070565b610aae836020611070565b604051602001610abf929190611905565b60408051601f198184030181529082905262461bcd60e51b825261041691600401611986565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff166104295760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff16156104295760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b610bf982826112e6565b600480546040516371e4cc7f60e11b81529182018490526000916001600160a01b039091169063e3c998fe906024016101406040518083038186803b158015610c4157600080fd5b505afa158015610c55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7991906117d5565b606081015160c08201516006546040517f04c0756900000000000000000000000000000000000000000000000000000000815260048101839052939450919290916000916001600160a01b03909116906304c075699060240160006040518083038186803b158015610cea57600080fd5b505afa158015610cfe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d26919081019061171a565b604081015180519192509015611067576000805b8251811015610ec05760055487516040517f8ce7ff4a000000000000000000000000000000000000000000000000000000008152600481018890526024810191909152604481018390526000916001600160a01b031690638ce7ff4a90606401604080518083038186803b158015610db157600080fd5b505afa158015610dc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de9919061186b565b6000015190506000848381518110610e1157634e487b7160e01b600052603260045260246000fd5b6020026020010151905080821115610e6957610e2e600282611a81565b6002610e3a8385611b4b565b610e449190611a81565b610e4e908a611b2c565b610e589190611a1e565b610e629085611a06565b9350610eab565b610e74600282611a81565b6002610e808484611b4b565b610e8a9190611a81565b610e94908a611b2c565b610e9e9190611a1e565b610ea89085611a06565b93505b50508080610eb890611ba9565b915050610d3a565b50600081610ed087612710611a06565b610eda9190611b4b565b9050600360009054906101000a90046001600160a01b03166001600160a01b031663687043c56040518163ffffffff1660e01b815260040160206040518083038186803b158015610f2a57600080fd5b505afa158015610f3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f629190611693565b8111610f6e5780610ff4565b600360009054906101000a90046001600160a01b03166001600160a01b031663687043c56040518163ffffffff1660e01b815260040160206040518083038186803b158015610fbc57600080fd5b505afa158015610fd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff49190611693565b6004805489516040516313d2d9a360e01b81529283015260248201839052604482018b90529192506001600160a01b03909116906313d2d9a3906064015b600060405180830381600087803b15801561104c57600080fd5b505af1158015611060573d6000803e3d6000fd5b5050505050505b50505050505050565b6060600061107f836002611b2c565b61108a906002611a06565b67ffffffffffffffff8111156110b057634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156110da576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061111f57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061119057634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006111cc846002611b2c565b6111d7906001611a06565b90505b6001811115611290577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061122657634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061124a57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361128981611b92565b90506111da565b5083156112df5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610416565b9392505050565b600480546040516371e4cc7f60e11b81529182018490526000916001600160a01b039091169063e3c998fe906024016101406040518083038186803b15801561132e57600080fd5b505afa158015611342573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061136691906117d5565b905060008160c00151826080015110611383578160800151611389565b8160c001515b905060006113978285611b4b565b156113b75760016113a88386611b4b565b6113b29190611b4b565b6113ba565b60005b9050600360009054906101000a90046001600160a01b03166001600160a01b031663a06db7dc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561140a57600080fd5b505afa15801561141e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114429190611693565b811161144f575050505050565b60408301516060840151600080611467858585610519565b91509150838210156115125760048054885160405163a8a3e96f60e01b8152928301526024820184905260806044830152601260848301527f496e61637469766974792050656e616c7479000000000000000000000000000060a4830152606482018a90526001600160a01b03169063a8a3e96f9060c401600060405180830381600087803b1580156114f957600080fd5b505af115801561150d573d6000803e3d6000fd5b505050505b82811015611557576004805488516040516313d2d9a360e01b81529283015260248201839052604482018a90526001600160a01b0316906313d2d9a390606401611032565b505050505050505050565b805161156d81611bf0565b919050565b600082601f830112611582578081fd5b8151602067ffffffffffffffff8083111561159f5761159f611bda565b8260051b604051601f19603f830116810181811084821117156115c4576115c4611bda565b604052848152838101925086840182880185018910156115e2578687fd5b8692505b858310156116045780518452928401926001929092019184016115e6565b50979650505050505050565b8051801515811461156d57600080fd5b60008060008060808587031215611635578384fd5b843561164081611bf0565b9350602085013561165081611bf0565b9250604085013561166081611bf0565b9150606085013561167081611bf0565b939692955090935050565b60006020828403121561168c578081fd5b5035919050565b6000602082840312156116a4578081fd5b5051919050565b600080604083850312156116bd578182fd5b8235915060208301356116cf81611bf0565b809150509250929050565b6000602082840312156116eb578081fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146112df578182fd5b60006020828403121561172b578081fd5b815167ffffffffffffffff80821115611742578283fd5b9083019060c08286031215611755578283fd5b61175d6119b9565b82518152602083015182811115611772578485fd5b61177e87828601611572565b602083015250604083015182811115611795578485fd5b6117a187828601611572565b60408301525060608301516060820152608083015160808201526117c760a08401611610565b60a082015295945050505050565b600061014082840312156117e7578081fd5b6117ef6119e2565b825181526117ff60208401611562565b602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015261184260e08401611610565b60e08201526101008381015190820152610120611860818501611562565b908201529392505050565b60006040828403121561187c578081fd5b6040516040810181811067ffffffffffffffff8211171561189f5761189f611bda565b604052825181526020928301519281019290925250919050565b600080604083850312156118cb578081fd5b50508035926020909101359150565b6000806000606084860312156118ee578081fd5b505081359360208301359350604090920135919050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161193d816017850160208801611b62565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000601791840191820152835161197a816028840160208801611b62565b01602801949350505050565b60208152600082518060208401526119a5816040850160208701611b62565b601f01601f19169190910160400192915050565b60405160c0810167ffffffffffffffff811182821017156119dc576119dc611bda565b60405290565b604051610140810167ffffffffffffffff811182821017156119dc576119dc611bda565b60008219821115611a1957611a19611bc4565b500190565b600082611a3957634e487b7160e01b81526012600452602481fd5b500490565b600181815b80851115611a79578160001904821115611a5f57611a5f611bc4565b80851615611a6c57918102915b93841c9390800290611a43565b509250929050565b60006112df60ff841683600082611a9a5750600161036a565b81611aa75750600061036a565b8160018114611abd5760028114611ac757611ae3565b600191505061036a565b60ff841115611ad857611ad8611bc4565b50506001821b61036a565b5060208310610133831016604e8410600b8410161715611b06575081810a61036a565b611b108383611a3e565b8060001904821115611b2457611b24611bc4565b029392505050565b6000816000190483118215151615611b4657611b46611bc4565b500290565b600082821015611b5d57611b5d611bc4565b500390565b60005b83811015611b7d578181015183820152602001611b65565b83811115611b8c576000848401525b50505050565b600081611ba157611ba1611bc4565b506000190190565b6000600019821415611bbd57611bbd611bc4565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611c0557600080fd5b5056fea26469706673582212209a39559741e2a2fba014e78c045456e921d3129fbb87aa13659e6a053fd80ad464736f6c63430008040033","abi":[{"inputs":[{"internalType":"uint256","name":"_blockReward","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"blockManager","outputs":[{"internalType":"contract IBlockManager","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"blockReward","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"epochs","type":"uint256"},{"internalType":"uint256","name":"stakeValue","type":"uint256"},{"internalType":"uint256","name":"ageValue","type":"uint256"}],"name":"calculateInactivityPenalties","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"stakerId","type":"uint256"},{"internalType":"uint256","name":"epoch","type":"uint256"}],"name":"giveBlockReward","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"stakerId","type":"uint256"},{"internalType":"uint256","name":"epoch","type":"uint256"}],"name":"givePenalties","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"stakeManagerAddress","type":"address"},{"internalType":"address","name":"voteManagersAddress","type":"address"},{"internalType":"address","name":"blockManagerAddress","type":"address"},{"internalType":"address","name":"parametersAddress","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"parameters","outputs":[{"internalType":"contract IParameters","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"stakeManager","outputs":[{"internalType":"contract IStakeManager","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_blockReward","type":"uint256"}],"name":"updateBlockReward","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"voteManager","outputs":[{"internalType":"contract IVoteManager","name":"","type":"address"}],"stateMutability":"view","type":"function"}]}