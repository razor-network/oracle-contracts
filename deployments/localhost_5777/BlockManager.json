{"metadata":"{\"compiler\":{\"version\":\"0.8.4\"},\"sources\":{\"contracts/Core/BlockManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interface/IParameters.sol\\\";\\nimport \\\"./interface/IStakeManager.sol\\\";\\nimport \\\"./interface/IRewardManager.sol\\\";\\nimport \\\"./interface/IVoteManager.sol\\\";\\nimport \\\"./interface/IAssetManager.sol\\\";\\nimport \\\"./storage/BlockStorage.sol\\\";\\nimport \\\"../lib/Random.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\nimport \\\"./ACL.sol\\\";\\n\\ncontract BlockManager is Initializable, ACL, BlockStorage {\\n    IParameters public parameters;\\n    IStakeManager public stakeManager;\\n    IRewardManager public rewardManager;\\n    IVoteManager public voteManager;\\n    IAssetManager public assetManager;\\n\\n    event BlockConfirmed(uint256 epoch, uint256 stakerId, uint256[] medians, uint256[] ids, uint256 timestamp);\\n\\n    event Proposed(\\n        uint256 epoch,\\n        uint256 stakerId,\\n        uint256[] ids,\\n        uint256[] medians,\\n        uint256 iteration,\\n        uint256 biggestInfluencerId,\\n        uint256 timestamp\\n    );\\n\\n    modifier checkEpoch(uint256 epoch) {\\n        require(epoch == parameters.getEpoch(), \\\"incorrect epoch\\\");\\n        _;\\n    }\\n\\n    modifier checkState(uint256 state) {\\n        require(state == parameters.getState(), \\\"incorrect state\\\");\\n        _;\\n    }\\n\\n    function initialize(\\n        address stakeManagerAddress,\\n        address rewardManagerAddress,\\n        address voteManagerAddress,\\n        address assetManagerAddress,\\n        address parametersAddress\\n    ) external initializer onlyRole(DEFAULT_ADMIN_ROLE) {\\n        stakeManager = IStakeManager(stakeManagerAddress);\\n        rewardManager = IRewardManager(rewardManagerAddress);\\n        voteManager = IVoteManager(voteManagerAddress);\\n        assetManager = IAssetManager(assetManagerAddress);\\n        parameters = IParameters(parametersAddress);\\n    }\\n\\n    // elected proposer proposes block.\\n    //we use a probabilistic method to elect stakers weighted by stake\\n    // protocol works like this.\\n    //select a staker pseudorandomly (not weighted by anything)\\n    // that staker then tosses a biased coin.\\n    //bias = hisStake/biggestStake. if its heads, he can propose block\\n    // end of iteration. try next iteration\\n    // note that only one staker or no stakers selected in each iteration.\\n    // stakers elected in higher iterations can also propose hoping that\\n    // stakers with lower iteration do not propose for some reason\\n    function propose(\\n        uint256 epoch,\\n        uint256[] memory ids,\\n        uint256[] memory medians,\\n        uint256 iteration,\\n        uint256 biggestInfluencerId\\n    ) external initialized checkEpoch(epoch) checkState(parameters.propose()) {\\n        uint256 proposerId = stakeManager.getStakerId(msg.sender);\\n        require(isElectedProposer(iteration, biggestInfluencerId, proposerId), \\\"not elected\\\");\\n        require(stakeManager.getStaker(proposerId).stake >= parameters.minStake(), \\\"stake below minimum stake\\\");\\n\\n        uint256 biggestInfluence = stakeManager.getInfluence(biggestInfluencerId);\\n\\n        _insertAppropriately(epoch, Structs.Block(proposerId, ids, medians, iteration, biggestInfluence, true));\\n\\n        emit Proposed(epoch, proposerId, ids, medians, iteration, biggestInfluencerId, block.timestamp);\\n    }\\n\\n    //anyone can give sorted votes in batches in dispute state\\n    function giveSorted(\\n        uint256 epoch,\\n        uint256 assetId,\\n        uint256[] memory sorted\\n    ) external initialized checkEpoch(epoch) checkState(parameters.dispute()) {\\n        uint256 medianWeight = voteManager.getTotalInfluenceRevealed(epoch, assetId) / (2);\\n        uint256 accWeight = disputes[epoch][msg.sender].accWeight;\\n        uint256 lastVisited = disputes[epoch][msg.sender].lastVisited;\\n        if (disputes[epoch][msg.sender].accWeight == 0) {\\n            disputes[epoch][msg.sender].assetId = assetId;\\n        } else {\\n            require(disputes[epoch][msg.sender].assetId == assetId, \\\"AssetId not matching\\\");\\n        }\\n        for (uint256 i = 0; i < sorted.length; i++) {\\n            require(sorted[i] > lastVisited, \\\"sorted[i] is not greater than lastVisited\\\");\\n            lastVisited = sorted[i];\\n            accWeight = accWeight + (voteManager.getVoteWeight(epoch, assetId, sorted[i]));\\n\\n            if (disputes[epoch][msg.sender].median == 0 && accWeight > medianWeight) {\\n                disputes[epoch][msg.sender].median = sorted[i];\\n            }\\n        }\\n        disputes[epoch][msg.sender].lastVisited = lastVisited;\\n        disputes[epoch][msg.sender].accWeight = accWeight;\\n    }\\n\\n    // //if any mistake made during giveSorted, resetDispute and start again\\n    function resetDispute(uint256 epoch) external initialized checkEpoch(epoch) checkState(parameters.dispute()) {\\n        disputes[epoch][msg.sender] = Structs.Dispute(0, 0, 0, 0);\\n    }\\n\\n    function getBlock(uint256 epoch) external view returns (Structs.Block memory _block) {\\n        return (blocks[epoch]);\\n    }\\n\\n    function getBlockMedians(uint256 epoch) external view returns (uint256[] memory _blockMedians) {\\n        _blockMedians = blocks[epoch].medians;\\n        return (_blockMedians);\\n    }\\n\\n    function getProposedBlock(uint256 epoch, uint256 proposedBlock)\\n        external\\n        view\\n        returns (Structs.Block memory _block, uint256[] memory _blockMedians)\\n    {\\n        _block = proposedBlocks[epoch][proposedBlock];\\n        return (_block, _block.medians);\\n    }\\n\\n    function getProposedBlockMedians(uint256 epoch, uint256 proposedBlock) external view returns (uint256[] memory _blockMedians) {\\n        _blockMedians = proposedBlocks[epoch][proposedBlock].medians;\\n        return (_blockMedians);\\n    }\\n\\n    function getNumProposedBlocks(uint256 epoch) external view returns (uint256) {\\n        return (proposedBlocks[epoch].length);\\n    }\\n\\n    function confirmBlock() public initialized onlyRole(parameters.getBlockConfirmerHash()) {\\n        uint256 epoch = parameters.getEpoch();\\n\\n        for (uint8 i = 0; i < proposedBlocks[epoch - 1].length; i++) {\\n            if (proposedBlocks[epoch - 1][i].valid) {\\n                blocks[epoch - 1] = proposedBlocks[epoch - 1][i];\\n                uint256 proposerId = proposedBlocks[epoch - 1][i].proposerId;\\n                emit BlockConfirmed(\\n                    epoch - 1,\\n                    proposerId,\\n                    proposedBlocks[epoch - 1][i].medians,\\n                    proposedBlocks[epoch - 1][i].ids,\\n                    block.timestamp\\n                );\\n                for (uint8 j = 0; j < proposedBlocks[epoch - 1][i].ids.length; j++) {\\n                    assetManager.fulfillAsset(proposedBlocks[epoch - 1][i].ids[j], proposedBlocks[epoch - 1][i].medians[j]);\\n                }\\n                rewardManager.giveBlockReward(proposerId, epoch);\\n                return;\\n            }\\n        }\\n    }\\n\\n    function finalizeDispute(uint256 epoch, uint256 blockId) public initialized checkEpoch(epoch) checkState(parameters.dispute()) {\\n        uint256 assetId = disputes[epoch][msg.sender].assetId;\\n        require(\\n            disputes[epoch][msg.sender].accWeight == voteManager.getTotalInfluenceRevealed(epoch, assetId),\\n            \\\"Total influence revealed doesnt match\\\"\\n        );\\n        uint256 median = disputes[epoch][msg.sender].median;\\n        uint256 proposerId = proposedBlocks[epoch][blockId].proposerId;\\n        require(median > 0, \\\"median can not be zero\\\");\\n        if (proposedBlocks[epoch][blockId].medians[assetId] != median) {\\n            proposedBlocks[epoch][blockId].valid = false;\\n            stakeManager.slash(proposerId, msg.sender, epoch);\\n        } else {\\n            revert(\\\"Proposed Alternate block is identical to proposed block\\\");\\n        }\\n    }\\n\\n    function isElectedProposer(\\n        uint256 iteration,\\n        uint256 biggestInfluencerId,\\n        uint256 stakerId\\n    ) public view initialized returns (bool) {\\n        // generating pseudo random number (range 0..(totalstake - 1)), add (+1) to the result,\\n        // since prng returns 0 to max-1 and staker start from 1\\n        if ((Random.prng(10, stakeManager.getNumStakers(), keccak256(abi.encode(iteration)), parameters.epochLength()) + (1)) != stakerId) {\\n            return false;\\n        }\\n        bytes32 randHash = Random.prngHash(10, keccak256(abi.encode(stakerId, iteration)), parameters.epochLength());\\n        uint256 rand = uint256(randHash) % (2**32);\\n        uint256 biggestInfluence = stakeManager.getInfluence(biggestInfluencerId);\\n        uint256 influence = stakeManager.getInfluence(stakerId);\\n        if (rand * (biggestInfluence) > influence * (2**32)) return (false);\\n        return true;\\n    }\\n\\n    function _insertAppropriately(uint256 epoch, Structs.Block memory _block) internal {\\n        if (proposedBlocks[epoch].length == 0) {\\n            proposedBlocks[epoch].push(_block);\\n            return;\\n        }\\n\\n        uint256 pushAt = proposedBlocks[epoch].length;\\n        for (uint256 i = 0; i < proposedBlocks[epoch].length; i++) {\\n            if (proposedBlocks[epoch][i].biggestInfluence < _block.biggestInfluence) {\\n                pushAt = i;\\n                break;\\n            }\\n            if (proposedBlocks[epoch][i].iteration > _block.iteration) {\\n                pushAt = i;\\n                break;\\n            }\\n        }\\n\\n        proposedBlocks[epoch].push(_block);\\n        for (uint256 j = proposedBlocks[epoch].length - 1; j > (pushAt); j--) {\\n            proposedBlocks[epoch][j] = proposedBlocks[epoch][j - 1];\\n        }\\n\\n        proposedBlocks[epoch][pushAt] = _block;\\n\\n        if (proposedBlocks[epoch].length > parameters.maxAltBlocks()) {\\n            delete (proposedBlocks[epoch][proposedBlocks[epoch].length - 1]);\\n        }\\n    }\\n}\\n\"},\"contracts/Core/interface/IParameters.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IParameters {\\n    function commit() external view returns (uint32);\\n\\n    function reveal() external view returns (uint32);\\n\\n    function propose() external view returns (uint32);\\n\\n    function dispute() external view returns (uint32);\\n\\n    function burnAddress() external view returns (address);\\n\\n    function penaltyNotRevealNum() external view returns (uint256);\\n\\n    function penaltyNotRevealDenom() external view returns (uint256);\\n\\n    function resetLockPenalty() external view returns (uint256);\\n\\n    function minStake() external view returns (uint256);\\n\\n    function withdrawLockPeriod() external view returns (uint256);\\n\\n    function withdrawReleasePeriod() external view returns (uint256);\\n\\n    function maxAltBlocks() external view returns (uint256);\\n\\n    function epochLength() external view returns (uint256);\\n\\n    function numStates() external view returns (uint256);\\n\\n    function gracePeriod() external view returns (uint256);\\n\\n    function aggregationRange() external view returns (uint256);\\n\\n    function exposureDenominator() external view returns (uint256);\\n\\n    function slashPenaltyNum() external view returns (uint256);\\n\\n    function slashPenaltyDenom() external view returns (uint256);\\n\\n    function getEpoch() external view returns (uint256);\\n\\n    function getState() external view returns (uint256);\\n\\n    function maxAge() external view returns (uint256);\\n\\n    function escapeHatchEnabled() external view returns (bool);\\n\\n    function getAssetConfirmerHash() external view returns (bytes32);\\n\\n    function getBlockConfirmerHash() external view returns (bytes32);\\n\\n    function getStakeModifierHash() external view returns (bytes32);\\n\\n    function getStakerActivityUpdaterHash() external view returns (bytes32);\\n\\n    function getRewardModifierHash() external view returns (bytes32);\\n\\n    function getAssetModifierHash() external view returns (bytes32);\\n\\n    function getDefaultAdminHash() external view returns (bytes32);\\n}\\n\"},\"contracts/lib/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nlibrary Structs {\\n    struct Vote {\\n        uint256 value;\\n        uint256 weight;\\n    }\\n\\n    struct Staker {\\n        uint256 id;\\n        address _address;\\n        uint256 stake;\\n        uint256 age;\\n        uint256 epochStaked;\\n        uint256 epochLastCommitted;\\n        uint256 epochLastRevealed;\\n        bool acceptDelegation;\\n        uint256 commission;\\n        address tokenAddress;\\n    }\\n\\n    struct Lock {\\n        uint256 amount; //amount in sTokens\\n        uint256 withdrawAfter;\\n    }\\n\\n    struct Block {\\n        uint256 proposerId;\\n        uint256[] ids;\\n        uint256[] medians;\\n        uint256 iteration;\\n        uint256 biggestInfluence;\\n        bool valid;\\n    }\\n\\n    struct Dispute {\\n        uint256 accWeight;\\n        uint256 median;\\n        uint256 lastVisited;\\n        uint256 assetId;\\n    }\\n\\n    struct Job {\\n        uint256 id;\\n        uint256 epoch;\\n        string url;\\n        string selector;\\n        string name;\\n        bool repeat;\\n        bool active;\\n        address creator;\\n        uint256 result;\\n        uint256 assetType;\\n    }\\n\\n    struct Collection {\\n        uint256 id;\\n        string name;\\n        uint32 aggregationMethod;\\n        uint256[] jobIDs;\\n        mapping(uint256 => bool) jobIDExist;\\n        uint256 epoch;\\n        bool active;\\n        address creator;\\n        uint256 result;\\n        uint256 assetType;\\n    }\\n}\\n\"},\"contracts/Core/interface/IStakeManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../lib/Structs.sol\\\";\\n\\ninterface IStakeManager {\\n    function setStakerEpochLastRevealed(uint256 _id, uint256 _epochLastRevealed) external;\\n\\n    function updateCommitmentEpoch(uint256 stakerId) external;\\n\\n    function stake(uint256 epoch, uint256 amount) external;\\n\\n    function delegate(\\n        uint256 epoch,\\n        uint256 amount,\\n        uint256 stakerId\\n    ) external;\\n\\n    function unstake(uint256 epoch) external;\\n\\n    function withdraw(uint256 epoch) external;\\n\\n    function setDelegationAcceptance(bool status) external;\\n\\n    function setCommission(uint256 commission) external;\\n\\n    function decreaseCommission(uint256 commission) external;\\n\\n    function resetLock(uint256 stakerId) external;\\n\\n    function setStakerStake(\\n        uint256 _id,\\n        uint256 _stake,\\n        string memory _reason,\\n        uint256 _epoch\\n    ) external;\\n\\n    function slash(\\n        uint256 id,\\n        address bountyHunter,\\n        uint256 epoch\\n    ) external;\\n\\n    function setStakerAge(\\n        uint256 _id,\\n        uint256 _age,\\n        uint256 _epoch\\n    ) external;\\n\\n    function escape(address _address) external;\\n\\n    function getStakerId(address _address) external view returns (uint256);\\n\\n    function getStaker(uint256 _id) external view returns (Structs.Staker memory staker);\\n\\n    function getNumStakers() external view returns (uint256);\\n\\n    function getAge() external view returns (uint256);\\n\\n    function getInfluence(uint256 stakerId) external view returns (uint256);\\n}\\n\"},\"contracts/Core/interface/IRewardManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../lib/Structs.sol\\\";\\n\\ninterface IRewardManager {\\n    function givePenalties(uint256 stakerId, uint256 epoch) external;\\n\\n    function giveBlockReward(uint256 stakerId, uint256 epoch) external;\\n}\\n\"},\"contracts/Core/interface/IVoteManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../lib/Structs.sol\\\";\\n\\ninterface IVoteManager {\\n    function commit(uint256 epoch, bytes32 commitment) external;\\n\\n    function reveal(\\n        uint256 epoch,\\n        bytes32 root,\\n        uint256[] calldata values,\\n        bytes32[][] calldata proofs,\\n        bytes32 secret,\\n        address stakerAddress\\n    ) external;\\n\\n    function getCommitment(uint256 epoch, uint256 stakerId) external view returns (bytes32);\\n\\n    function getVote(\\n        uint256 epoch,\\n        uint256 stakerId,\\n        uint256 assetId\\n    ) external view returns (Structs.Vote memory vote);\\n\\n    function getVoteWeight(\\n        uint256 epoch,\\n        uint256 assetId,\\n        uint256 voteValue\\n    ) external view returns (uint256);\\n\\n    function getTotalInfluenceRevealed(uint256 epoch, uint256 assetId) external view returns (uint256);\\n}\\n\"},\"contracts/Core/interface/IAssetManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IAssetManager {\\n    function createJob(\\n        string calldata url,\\n        string calldata selector,\\n        bool repeat\\n    ) external;\\n\\n    function fulfillAsset(uint256 id, uint256 value) external;\\n\\n    function getResult(uint256 id) external view returns (uint256);\\n\\n    function getAssetType(uint256 id) external view returns (uint256);\\n\\n    function getJob(uint256 id)\\n        external\\n        view\\n        returns (\\n            string memory url,\\n            string memory selector,\\n            string memory name,\\n            bool repeat,\\n            uint256 result\\n        );\\n\\n    function getCollection(uint256 id)\\n        external\\n        view\\n        returns (\\n            string memory name,\\n            uint32 aggregationMethod,\\n            uint256[] memory jobIDs,\\n            uint256 result\\n        );\\n}\\n\"},\"contracts/Core/storage/BlockStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../lib/Structs.sol\\\";\\n\\ncontract BlockStorage {\\n    //epoch -> address -> dispute -> assetid\\n    mapping(uint256 => mapping(address => Structs.Dispute)) public disputes;\\n    //epoch -> proposalNumber -> block\\n    mapping(uint256 => Structs.Block[]) public proposedBlocks;\\n    mapping(uint256 => Structs.Block) public blocks;\\n}\\n\"},\"contracts/lib/Random.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nlibrary Random {\\n    // pseudo random number generator based on block hashes. returns 0 -> max-1\\n    function prng(\\n        uint8 numBlocks,\\n        uint256 max,\\n        bytes32 seed,\\n        uint256 epochLength\\n    ) public view returns (uint256) {\\n        bytes32 hash = prngHash(numBlocks, seed, epochLength);\\n        uint256 sum = uint256(hash);\\n        return (sum % max);\\n    }\\n\\n    // pseudo random hash generator based on block hashes.\\n    function prngHash(\\n        uint8 numBlocks,\\n        bytes32 seed,\\n        uint256 epochLength\\n    ) public view returns (bytes32) {\\n        bytes32 sum = blockHashes(numBlocks, epochLength);\\n        sum = keccak256(abi.encodePacked(sum, seed));\\n        return (sum);\\n    }\\n\\n    function blockHashes(uint8 numBlocks, uint256 epochLength) public view returns (bytes32) {\\n        bytes32 sum;\\n        // start from the start of the epoch\\n        uint256 blockNumberEpochStart = (block.number / (epochLength)) * (epochLength);\\n        for (uint8 i = 1; i <= numBlocks; i++) {\\n            sum = keccak256(abi.encodePacked(sum, blockhash(blockNumberEpochStart - i)));\\n        }\\n        return (sum);\\n    }\\n}\\n\"},\"contracts/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * Forked from OZ's (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/b9125001f0a1c44d596ca3a47536f1a467e3a29d/contracts/proxy/utils/Initializable.sol)\\n */\\n\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    modifier initialized() {\\n        require(_initialized, \\\"Contract should be initialized\\\");\\n        _;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"},\"contracts/Core/ACL.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract ACL is AccessControl {\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n}\\n\"}}}","address":"0x70e0bA845a1A0F2DA3359C97E0285013525FFC49","bytecode":"0x60806040523480156200001157600080fd5b506200001f60003362000025565b620000bd565b62000031828262000035565b5050565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff16620000315760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b613c7a80620000cd6000396000f3fe608060405234801561001057600080fd5b50600436106101b85760003560e01c80635ce8772f116100f95780639b87f64411610097578063d1a4a43d11610071578063d1a4a43d14610466578063d547741f14610479578063e38c7c421461048c578063f25b3f99146104ac57600080fd5b80639b87f64414610435578063a217fddf1461043d578063a27ce1ef1461044557600080fd5b806389035730116100d357806389035730146103a157806391d14854146103b457806392b48411146103ed57806394217ad11461042257600080fd5b80635ce8772f1461031c5780637542ff951461032f578063828496d61461034257600080fd5b8063248a9ca311610166578063378ab9a911610140578063378ab9a9146102c35780633cd32fd4146102e357806342c1e587146102f65780634e6753b71461030957600080fd5b8063248a9ca31461026b5780632f2ff15d1461029d57806336568abe146102b057600080fd5b80630f4ef8a6116101975780630f4ef8a61461021a5780631459457a146102455780631d69ff9b1461025857600080fd5b80629c9f8c146101bd57806301ffc9a7146101d257806304c07569146101fa575b600080fd5b6101d06101cb366004613723565b6104e6565b005b6101e56101e0366004613665565b610aad565b60405190151581526020015b60405180910390f35b61020d610208366004613606565b610b16565b6040516101f191906139f5565b60075461022d906001600160a01b031681565b6040516001600160a01b0390911681526020016101f1565b6101d0610253366004613596565b610c48565b6101e561026636600461380e565b610d8a565b61028f610279366004613606565b6000908152600160208190526040909120015490565b6040519081526020016101f1565b6101d06102ab366004613636565b611252565b6101d06102be366004613636565b61127e565b6102d66102d1366004613606565b61130a565b6040516101f191906139af565b6101d06102f136600461379f565b61136f565b60085461022d906001600160a01b031681565b6101d06103173660046137c0565b61196b565b6101d061032a366004613606565b611f73565b60065461022d906001600160a01b031681565b610381610350366004613636565b6002602081815260009384526040808520909152918352912080546001820154928201546003909201549092919084565b6040805194855260208501939093529183015260608201526080016101f1565b60055461022d906001600160a01b031681565b6101e56103c2366004613636565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6104006103fb36600461379f565b61222c565b60408051948552602085019390935291830152151560608201526080016101f1565b60095461022d906001600160a01b031681565b6101d0612275565b61028f600081565b61045861045336600461379f565b6128da565b6040516101f1929190613a08565b6102d661047436600461379f565b612a50565b6101d0610487366004613636565b612aea565b61028f61049a366004613606565b60009081526003602052604090205490565b6104006104ba366004613606565b600460208190526000918252604090912080546003820154928201546005909201549092919060ff1684565b60005460ff1661053d5760405162461bcd60e51b815260206004820152601e60248201527f436f6e74726163742073686f756c6420626520696e697469616c697a6564000060448201526064015b60405180910390fd5b60055460408051630eaf323560e31b8152905187926001600160a01b03169163757991a8916004808301926020929190829003018186803b15801561058157600080fd5b505afa158015610595573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b9919061361e565b81146105f95760405162461bcd60e51b815260206004820152600f60248201526e0d2dcc6dee4e4cac6e840cae0dec6d608b1b6044820152606401610534565b600560009054906101000a90046001600160a01b03166001600160a01b031663c198f8ba6040518163ffffffff1660e01b815260040160206040518083038186803b15801561064757600080fd5b505afa15801561065b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067f9190613839565b63ffffffff16600560009054906101000a90046001600160a01b03166001600160a01b0316631865c57d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156106d357600080fd5b505afa1580156106e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070b919061361e565b811461074b5760405162461bcd60e51b815260206004820152600f60248201526e696e636f727265637420737461746560881b6044820152606401610534565b6006546040517f6022a4850000000000000000000000000000000000000000000000000000000081523360048201526000916001600160a01b031690636022a4859060240160206040518083038186803b1580156107a857600080fd5b505afa1580156107bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e0919061361e565b90506107ed858583610d8a565b6108395760405162461bcd60e51b815260206004820152600b60248201527f6e6f7420656c65637465640000000000000000000000000000000000000000006044820152606401610534565b600560009054906101000a90046001600160a01b03166001600160a01b031663375b3c0a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561088757600080fd5b505afa15801561089b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bf919061361e565b6006546040517fe3c998fe000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b039091169063e3c998fe906024016101406040518083038186803b15801561091d57600080fd5b505afa158015610931573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610955919061368d565b6040015110156109a75760405162461bcd60e51b815260206004820152601960248201527f7374616b652062656c6f77206d696e696d756d207374616b65000000000000006044820152606401610534565b60065460405163b98ef0d360e01b8152600481018690526000916001600160a01b03169063b98ef0d39060240160206040518083038186803b1580156109ec57600080fd5b505afa158015610a00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a24919061361e565b9050610a5f896040518060c001604052808581526020018b81526020018a815260200189815260200184815260200160011515815250612b11565b7f0ae3cf996526ee39dbe842f2cf23ea039e5c81273dab4fbd8f632dff9624266189838a8a8a8a42604051610a9a9796959493929190613a36565b60405180910390a1505050505050505050565b60006001600160e01b031982167f7965db0b000000000000000000000000000000000000000000000000000000001480610b1057507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b610b516040518060c0016040528060008152602001606081526020016060815260200160008152602001600081526020016000151581525090565b600082815260046020908152604091829020825160c0810184528154815260018201805485518186028101860190965280865291949293858101939290830182828015610bbd57602002820191906000526020600020905b815481526020019060010190808311610ba9575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610c1557602002820191906000526020600020905b815481526020019060010190808311610c01575b5050509183525050600382015460208201526004820154604082015260059091015460ff16151560609091015292915050565b600054610100900460ff1680610c61575060005460ff16155b610cd35760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610534565b600054610100900460ff16158015610cf5576000805461ffff19166101011790555b6000610d018133613025565b50600680547fffffffffffffffffffffffff00000000000000000000000000000000000000009081166001600160a01b0389811691909117909255600780548216888416179055600880548216878416179055600980548216868416179055600580549091169184169190911790558015610d82576000805461ff00191690555b505050505050565b6000805460ff16610ddd5760405162461bcd60e51b815260206004820152601e60248201527f436f6e74726163742073686f756c6420626520696e697469616c697a656400006044820152606401610534565b8173__$3b76b38140ea5d8f6a5a565441556589de$__63320e985c600a600660009054906101000a90046001600160a01b03166001600160a01b031663bc788d466040518163ffffffff1660e01b815260040160206040518083038186803b158015610e4857600080fd5b505afa158015610e5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e80919061361e565b60408051602081018b90520160408051601f198184030181528282528051602091820120600554630afaeebf60e31b8552925190936001600160a01b03909316926357d775f8926004808301939192829003018186803b158015610ee357600080fd5b505afa158015610ef7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1b919061361e565b6040516001600160e01b031960e087901b16815260ff909416600485015260248401929092526044830152606482015260840160206040518083038186803b158015610f6657600080fd5b505af4158015610f7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9e919061361e565b610fa9906001613af5565b14610fb65750600061124b565b600073__$3b76b38140ea5d8f6a5a565441556589de$__63a874132b600a8588604051602001610ff0929190918252602082015260400190565b60408051601f198184030181528282528051602091820120600554630afaeebf60e31b8552925190936001600160a01b03909316926357d775f8926004808301939192829003018186803b15801561104757600080fd5b505afa15801561105b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107f919061361e565b6040516001600160e01b031960e086901b16815260ff90931660048401526024830191909152604482015260640160206040518083038186803b1580156110c557600080fd5b505af41580156110d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fd919061361e565b9050600061111064010000000083613bd9565b60065460405163b98ef0d360e01b8152600481018890529192506000916001600160a01b039091169063b98ef0d39060240160206040518083038186803b15801561115a57600080fd5b505afa15801561116e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611192919061361e565b60065460405163b98ef0d360e01b8152600481018890529192506000916001600160a01b039091169063b98ef0d39060240160206040518083038186803b1580156111dc57600080fd5b505afa1580156111f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611214919061361e565b905061122581640100000000613b21565b61122f8385613b21565b111561124257600094505050505061124b565b60019450505050505b9392505050565b6000828152600160208190526040909120015461126f8133613025565b61127983836130a5565b505050565b6001600160a01b03811633146112fc5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610534565b611306828261312c565b5050565b60008181526004602090815260409182902060020180548351818402810184019094528084526060939283018282801561136357602002820191906000526020600020905b81548152602001906001019080831161134f575b50505050509050919050565b60005460ff166113c15760405162461bcd60e51b815260206004820152601e60248201527f436f6e74726163742073686f756c6420626520696e697469616c697a656400006044820152606401610534565b60055460408051630eaf323560e31b8152905184926001600160a01b03169163757991a8916004808301926020929190829003018186803b15801561140557600080fd5b505afa158015611419573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143d919061361e565b811461147d5760405162461bcd60e51b815260206004820152600f60248201526e0d2dcc6dee4e4cac6e840cae0dec6d608b1b6044820152606401610534565b600560009054906101000a90046001600160a01b03166001600160a01b031663f240f7c36040518163ffffffff1660e01b815260040160206040518083038186803b1580156114cb57600080fd5b505afa1580156114df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115039190613839565b63ffffffff16600560009054906101000a90046001600160a01b03166001600160a01b0316631865c57d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561155757600080fd5b505afa15801561156b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158f919061361e565b81146115cf5760405162461bcd60e51b815260206004820152600f60248201526e696e636f727265637420737461746560881b6044820152606401610534565b600084815260026020908152604080832033845290915290819020600301546008549151635f08158d60e11b8152600481018790526024810182905290916001600160a01b03169063be102b1a9060440160206040518083038186803b15801561163857600080fd5b505afa15801561164c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611670919061361e565b6000868152600260209081526040808320338452909152902054146116fd5760405162461bcd60e51b815260206004820152602560248201527f546f74616c20696e666c75656e63652072657665616c656420646f65736e742060448201527f6d617463680000000000000000000000000000000000000000000000000000006064820152608401610534565b60008581526002602090815260408083203384528252808320600101548884526003909252822080549192918790811061174757634e487b7160e01b600052603260045260246000fd5b9060005260206000209060060201600001549050600082116117ab5760405162461bcd60e51b815260206004820152601660248201527f6d656469616e2063616e206e6f74206265207a65726f000000000000000000006044820152606401610534565b60008781526003602052604090208054839190889081106117dc57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060060201600201848154811061180c57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154146118f457600087815260036020526040812080548890811061184a57634e487b7160e01b600052603260045260246000fd5b60009182526020909120600691820201600501805460ff191692151592909217909155546040517f0f91ce1900000000000000000000000000000000000000000000000000000000815260048101839052336024820152604481018990526001600160a01b0390911690630f91ce1990606401600060405180830381600087803b1580156118d757600080fd5b505af11580156118eb573d6000803e3d6000fd5b50505050611962565b60405162461bcd60e51b815260206004820152603760248201527f50726f706f73656420416c7465726e61746520626c6f636b206973206964656e60448201527f746963616c20746f2070726f706f73656420626c6f636b0000000000000000006064820152608401610534565b50505050505050565b60005460ff166119bd5760405162461bcd60e51b815260206004820152601e60248201527f436f6e74726163742073686f756c6420626520696e697469616c697a656400006044820152606401610534565b60055460408051630eaf323560e31b8152905185926001600160a01b03169163757991a8916004808301926020929190829003018186803b158015611a0157600080fd5b505afa158015611a15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a39919061361e565b8114611a795760405162461bcd60e51b815260206004820152600f60248201526e0d2dcc6dee4e4cac6e840cae0dec6d608b1b6044820152606401610534565b600560009054906101000a90046001600160a01b03166001600160a01b031663f240f7c36040518163ffffffff1660e01b815260040160206040518083038186803b158015611ac757600080fd5b505afa158015611adb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aff9190613839565b63ffffffff16600560009054906101000a90046001600160a01b03166001600160a01b0316631865c57d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611b5357600080fd5b505afa158015611b67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8b919061361e565b8114611bcb5760405162461bcd60e51b815260206004820152600f60248201526e696e636f727265637420737461746560881b6044820152606401610534565b600854604051635f08158d60e11b815260048101879052602481018690526000916002916001600160a01b039091169063be102b1a9060440160206040518083038186803b158015611c1c57600080fd5b505afa158015611c30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c54919061361e565b611c5e9190613b0d565b600087815260026020818152604080842033855290915290912080549101549192509081611caa5760008881526002602090815260408083203384529091529020600301879055611d15565b60008881526002602090815260408083203384529091529020600301548714611d155760405162461bcd60e51b815260206004820152601460248201527f41737365744964206e6f74206d61746368696e670000000000000000000000006044820152606401610534565b60005b8651811015611f4a5781878281518110611d4257634e487b7160e01b600052603260045260246000fd5b602002602001015111611dbd5760405162461bcd60e51b815260206004820152602960248201527f736f727465645b695d206973206e6f742067726561746572207468616e206c6160448201527f73745669736974656400000000000000000000000000000000000000000000006064820152608401610534565b868181518110611ddd57634e487b7160e01b600052603260045260246000fd5b60200260200101519150600860009054906101000a90046001600160a01b03166001600160a01b0316639c66556f8a8a8a8581518110611e2d57634e487b7160e01b600052603260045260246000fd5b60200260200101516040518463ffffffff1660e01b8152600401611e64939291909283526020830191909152604082015260600190565b60206040518083038186803b158015611e7c57600080fd5b505afa158015611e90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb4919061361e565b611ebe9084613af5565b60008a8152600260209081526040808320338452909152902060010154909350158015611eea57508383115b15611f3857868181518110611f0f57634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008b815260028352604080822033835290935291909120600101555b80611f4281613b9e565b915050611d18565b506000978852600260208181526040808b20338c52909152909820978801559095555050505050565b60005460ff16611fc55760405162461bcd60e51b815260206004820152601e60248201527f436f6e74726163742073686f756c6420626520696e697469616c697a656400006044820152606401610534565b60055460408051630eaf323560e31b8152905183926001600160a01b03169163757991a8916004808301926020929190829003018186803b15801561200957600080fd5b505afa15801561201d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612041919061361e565b81146120815760405162461bcd60e51b815260206004820152600f60248201526e0d2dcc6dee4e4cac6e840cae0dec6d608b1b6044820152606401610534565b600560009054906101000a90046001600160a01b03166001600160a01b031663f240f7c36040518163ffffffff1660e01b815260040160206040518083038186803b1580156120cf57600080fd5b505afa1580156120e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121079190613839565b63ffffffff16600560009054906101000a90046001600160a01b03166001600160a01b0316631865c57d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561215b57600080fd5b505afa15801561216f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612193919061361e565b81146121d35760405162461bcd60e51b815260206004820152600f60248201526e696e636f727265637420737461746560881b6044820152606401610534565b505060408051608081018252600080825260208083018281528385018381526060850184815296845260028084528685203386529093529490922092518355905160018301559151918101919091559051600390910155565b6003602052816000526040600020818154811061224857600080fd5b60009182526020909120600690910201805460038201546004830154600590930154919450925060ff1684565b60005460ff166122c75760405162461bcd60e51b815260206004820152601e60248201527f436f6e74726163742073686f756c6420626520696e697469616c697a656400006044820152606401610534565b600560009054906101000a90046001600160a01b03166001600160a01b031663d98b3ced6040518163ffffffff1660e01b815260040160206040518083038186803b15801561231557600080fd5b505afa158015612329573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061234d919061361e565b6123578133613025565b60055460408051630eaf323560e31b815290516000926001600160a01b03169163757991a8916004808301926020929190829003018186803b15801561239c57600080fd5b505afa1580156123b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d4919061361e565b905060005b600360006123e8600185613b40565b815260208101919091526040016000205460ff821610156112795760036000612412600185613b40565b81526020019081526020016000208160ff168154811061244257634e487b7160e01b600052603260045260246000fd5b600091825260209091206005600690920201015460ff16156128c5576003600061246d600185613b40565b81526020019081526020016000208160ff168154811061249d57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060060201600460006001856124bc9190613b40565b8152602081019190915260400160002081548155600180830180546124e4928401919061341e565b50600282810180546124f9928401919061341e565b50600382810154828201556004808401549083015560059283015492909101805460ff191660ff9093161515929092179091556000908161253b600186613b40565b81526020019081526020016000208260ff168154811061256b57634e487b7160e01b600052603260045260246000fd5b600091825260209091206006909102015490507fe9c8841ed2456dc770efbf4a9a61103f6f9ebc906085a3614a7e113627b31c9d6125aa600185613b40565b82600360006125ba600189613b40565b81526020019081526020016000208560ff16815481106125ea57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016002016003600060018961260c9190613b40565b81526020019081526020016000208660ff168154811061263c57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016001014260405161265f959493929190613a87565b60405180910390a160005b60036000612679600187613b40565b81526020019081526020016000208360ff16815481106126a957634e487b7160e01b600052603260045260246000fd5b9060005260206000209060060201600101805490508160ff161015612840576009546001600160a01b03166351be9717600360006126e8600189613b40565b81526020019081526020016000208560ff168154811061271857634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016001018360ff168154811061274b57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154600360006001896127679190613b40565b81526020019081526020016000208660ff168154811061279757634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016002018460ff16815481106127ca57634e487b7160e01b600052603260045260246000fd5b90600052602060002001546040518363ffffffff1660e01b81526004016127fb929190918252602082015260400190565b600060405180830381600087803b15801561281557600080fd5b505af1158015612829573d6000803e3d6000fd5b50505050808061283890613bb9565b91505061266a565b506007546040517f746c8b6500000000000000000000000000000000000000000000000000000000815260048101839052602481018590526001600160a01b039091169063746c8b6590604401600060405180830381600087803b1580156128a757600080fd5b505af11580156128bb573d6000803e3d6000fd5b5050505050505050565b806128cf81613bb9565b9150506123d9565b50565b6129156040518060c0016040528060008152602001606081526020016060815260200160008152602001600081526020016000151581525090565b60008381526003602052604090208054606091908490811061294757634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016040518060c001604052908160008201548152602001600182018054806020026020016040519081016040528092919081815260200182805480156129b957602002820191906000526020600020905b8154815260200190600101908083116129a5575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015612a1157602002820191906000526020600020905b8154815260200190600101908083116129fd575b505050918352505060038201546020820152600482015460408083019190915260059092015460ff161515606090910152810151909590945092505050565b600082815260036020526040902080546060919083908110612a8257634e487b7160e01b600052603260045260246000fd5b9060005260206000209060060201600201805480602002602001604051908101604052809291908181526020018280548015612add57602002820191906000526020600020905b815481526020019060010190808311612ac9575b5050505050905092915050565b60008281526001602081905260409091200154612b078133613025565b611279838361312c565b600082815260036020526040902054612bb55760008281526003602090815260408220805460018181018355918452928290208451600690940201928355838201518051859493612b6693850192019061346e565b5060408201518051612b8291600284019160209091019061346e565b50606082015160038201556080820151600482015560a0909101516005909101805460ff19169115159190911790555050565b600082815260036020526040812054905b600084815260036020526040902054811015612c945760808301516000858152600360205260409020805483908110612c0f57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060060201600401541015612c2f57809150612c94565b60608301516000858152600360205260409020805483908110612c6257634e487b7160e01b600052603260045260246000fd5b9060005260206000209060060201600301541115612c8257809150612c94565b80612c8c81613b9e565b915050612bc6565b5060008381526003602090815260408220805460018181018355918452928290208551600690940201928355848201518051869493612cd793850192019061346e565b5060408201518051612cf391600284019160209091019061346e565b5060608201516003828101919091556080830151600483015560a0909201516005909101805460ff191691151591909117905560008481526020919091526040812054612d4290600190613b40565b90505b81811115612e44576000848152600360205260409020612d66600183613b40565b81548110612d8457634e487b7160e01b600052603260045260246000fd5b9060005260206000209060060201600360008681526020019081526020016000208281548110612dc457634e487b7160e01b600052603260045260246000fd5b60009182526020909120825460069092020190815560018083018054612ded928401919061341e565b5060028281018054612e02928401919061341e565b5060038281015490820155600480830154908201556005918201549101805460ff191660ff909216151591909117905580612e3c81613b87565b915050612d45565b506000838152600360205260409020805483919083908110612e7657634e487b7160e01b600052603260045260246000fd5b9060005260206000209060060201600082015181600001556020820151816001019080519060200190612eaa92919061346e565b5060408201518051612ec691600284019160209091019061346e565b5060608201516003820155608082015160048083019190915560a0909201516005918201805460ff191691151591909117905554604080517f379597e000000000000000000000000000000000000000000000000000000000815290516001600160a01b039092169263379597e0928282019260209290829003018186803b158015612f5157600080fd5b505afa158015612f65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f89919061361e565b60008481526003602052604090205411156112795760008381526003602052604090208054612fba90600190613b40565b81548110612fd857634e487b7160e01b600052603260045260246000fd5b60009182526020822060069091020181815590612ff860018301826134a9565b6130066002830160006134a9565b506000600382018190556004820155600501805460ff19169055505050565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff1661130657613063816001600160a01b031660146131af565b61306e8360206131af565b60405160200161307f92919061392e565b60408051601f198184030181529082905262461bcd60e51b8252610534916004016139c2565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff166113065760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff16156113065760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b606060006131be836002613b21565b6131c9906002613af5565b67ffffffffffffffff8111156131ef57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015613219576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061325e57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106132cf57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600061330b846002613b21565b613316906001613af5565b90505b60018111156133cf577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061336557634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061338957634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c936133c881613b87565b9050613319565b50831561124b5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610534565b82805482825590600052602060002090810192821561345e5760005260206000209182015b8281111561345e578254825591600101919060010190613443565b5061346a9291506134c3565b5090565b82805482825590600052602060002090810192821561345e579160200282015b8281111561345e57825182559160200191906001019061348e565b50805460008255906000526020600020908101906128d791905b5b8082111561346a57600081556001016134c4565b80516134e381613c2f565b919050565b600082601f8301126134f8578081fd5b8135602067ffffffffffffffff8083111561351557613515613c19565b8260051b604051601f19603f8301168101818110848211171561353a5761353a613c19565b60405284815283810192508684018288018501891015613558578687fd5b8692505b8583101561357a57803584529284019260019290920191840161355c565b50979650505050505050565b805180151581146134e357600080fd5b600080600080600060a086880312156135ad578081fd5b85356135b881613c2f565b945060208601356135c881613c2f565b935060408601356135d881613c2f565b925060608601356135e881613c2f565b915060808601356135f881613c2f565b809150509295509295909350565b600060208284031215613617578081fd5b5035919050565b60006020828403121561362f578081fd5b5051919050565b60008060408385031215613648578182fd5b82359150602083013561365a81613c2f565b809150509250929050565b600060208284031215613676578081fd5b81356001600160e01b03198116811461124b578182fd5b6000610140828403121561369f578081fd5b6136a7613acb565b825181526136b7602084016134d8565b602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c08201526136fa60e08401613586565b60e082015261010083810151908201526101206137188185016134d8565b908201529392505050565b600080600080600060a0868803121561373a578081fd5b85359450602086013567ffffffffffffffff80821115613758578283fd5b61376489838a016134e8565b95506040880135915080821115613779578283fd5b50613786888289016134e8565b9598949750949560608101359550608001359392505050565b600080604083850312156137b1578081fd5b50508035926020909101359150565b6000806000606084860312156137d4578081fd5b8335925060208401359150604084013567ffffffffffffffff8111156137f8578182fd5b613804868287016134e8565b9150509250925092565b600080600060608486031215613822578081fd5b505081359360208301359350604090920135919050565b60006020828403121561384a578081fd5b815163ffffffff8116811461124b578182fd5b6000815180845260208085019450808401835b8381101561388c57815187529582019590820190600101613870565b509495945050505050565b6000815480845260208085019450838352808320835b8381101561388c578154875295820195600191820191016138ad565b805182526000602082015160c060208501526138e860c085018261385d565b905060408301518482036040860152613901828261385d565b915050606083015160608501526080830151608085015260a0830151151560a08501528091505092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613966816017850160208801613b57565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516139a3816028840160208801613b57565b01602801949350505050565b60208152600061124b602083018461385d565b60208152600082518060208401526139e1816040850160208701613b57565b601f01601f19169190910160400192915050565b60208152600061124b60208301846138c9565b604081526000613a1b60408301856138c9565b8281036020840152613a2d818561385d565b95945050505050565b87815286602082015260e060408201526000613a5560e083018861385d565b8281036060840152613a67818861385d565b6080840196909652505060a081019290925260c090910152949350505050565b85815284602082015260a060408201526000613aa660a0830186613897565b8281036060840152613ab88186613897565b9150508260808301529695505050505050565b604051610140810167ffffffffffffffff81118282101715613aef57613aef613c19565b60405290565b60008219821115613b0857613b08613bed565b500190565b600082613b1c57613b1c613c03565b500490565b6000816000190483118215151615613b3b57613b3b613bed565b500290565b600082821015613b5257613b52613bed565b500390565b60005b83811015613b72578181015183820152602001613b5a565b83811115613b81576000848401525b50505050565b600081613b9657613b96613bed565b506000190190565b6000600019821415613bb257613bb2613bed565b5060010190565b600060ff821660ff811415613bd057613bd0613bed565b60010192915050565b600082613be857613be8613c03565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146128d757600080fdfea2646970667358221220cc95bde22e0e8470d2a9880e7b2e7c3467e113f63dc4fe70c17f6d73a77dc2fb64736f6c63430008040033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106101b85760003560e01c80635ce8772f116100f95780639b87f64411610097578063d1a4a43d11610071578063d1a4a43d14610466578063d547741f14610479578063e38c7c421461048c578063f25b3f99146104ac57600080fd5b80639b87f64414610435578063a217fddf1461043d578063a27ce1ef1461044557600080fd5b806389035730116100d357806389035730146103a157806391d14854146103b457806392b48411146103ed57806394217ad11461042257600080fd5b80635ce8772f1461031c5780637542ff951461032f578063828496d61461034257600080fd5b8063248a9ca311610166578063378ab9a911610140578063378ab9a9146102c35780633cd32fd4146102e357806342c1e587146102f65780634e6753b71461030957600080fd5b8063248a9ca31461026b5780632f2ff15d1461029d57806336568abe146102b057600080fd5b80630f4ef8a6116101975780630f4ef8a61461021a5780631459457a146102455780631d69ff9b1461025857600080fd5b80629c9f8c146101bd57806301ffc9a7146101d257806304c07569146101fa575b600080fd5b6101d06101cb366004613723565b6104e6565b005b6101e56101e0366004613665565b610aad565b60405190151581526020015b60405180910390f35b61020d610208366004613606565b610b16565b6040516101f191906139f5565b60075461022d906001600160a01b031681565b6040516001600160a01b0390911681526020016101f1565b6101d0610253366004613596565b610c48565b6101e561026636600461380e565b610d8a565b61028f610279366004613606565b6000908152600160208190526040909120015490565b6040519081526020016101f1565b6101d06102ab366004613636565b611252565b6101d06102be366004613636565b61127e565b6102d66102d1366004613606565b61130a565b6040516101f191906139af565b6101d06102f136600461379f565b61136f565b60085461022d906001600160a01b031681565b6101d06103173660046137c0565b61196b565b6101d061032a366004613606565b611f73565b60065461022d906001600160a01b031681565b610381610350366004613636565b6002602081815260009384526040808520909152918352912080546001820154928201546003909201549092919084565b6040805194855260208501939093529183015260608201526080016101f1565b60055461022d906001600160a01b031681565b6101e56103c2366004613636565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6104006103fb36600461379f565b61222c565b60408051948552602085019390935291830152151560608201526080016101f1565b60095461022d906001600160a01b031681565b6101d0612275565b61028f600081565b61045861045336600461379f565b6128da565b6040516101f1929190613a08565b6102d661047436600461379f565b612a50565b6101d0610487366004613636565b612aea565b61028f61049a366004613606565b60009081526003602052604090205490565b6104006104ba366004613606565b600460208190526000918252604090912080546003820154928201546005909201549092919060ff1684565b60005460ff1661053d5760405162461bcd60e51b815260206004820152601e60248201527f436f6e74726163742073686f756c6420626520696e697469616c697a6564000060448201526064015b60405180910390fd5b60055460408051630eaf323560e31b8152905187926001600160a01b03169163757991a8916004808301926020929190829003018186803b15801561058157600080fd5b505afa158015610595573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b9919061361e565b81146105f95760405162461bcd60e51b815260206004820152600f60248201526e0d2dcc6dee4e4cac6e840cae0dec6d608b1b6044820152606401610534565b600560009054906101000a90046001600160a01b03166001600160a01b031663c198f8ba6040518163ffffffff1660e01b815260040160206040518083038186803b15801561064757600080fd5b505afa15801561065b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067f9190613839565b63ffffffff16600560009054906101000a90046001600160a01b03166001600160a01b0316631865c57d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156106d357600080fd5b505afa1580156106e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070b919061361e565b811461074b5760405162461bcd60e51b815260206004820152600f60248201526e696e636f727265637420737461746560881b6044820152606401610534565b6006546040517f6022a4850000000000000000000000000000000000000000000000000000000081523360048201526000916001600160a01b031690636022a4859060240160206040518083038186803b1580156107a857600080fd5b505afa1580156107bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e0919061361e565b90506107ed858583610d8a565b6108395760405162461bcd60e51b815260206004820152600b60248201527f6e6f7420656c65637465640000000000000000000000000000000000000000006044820152606401610534565b600560009054906101000a90046001600160a01b03166001600160a01b031663375b3c0a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561088757600080fd5b505afa15801561089b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bf919061361e565b6006546040517fe3c998fe000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b039091169063e3c998fe906024016101406040518083038186803b15801561091d57600080fd5b505afa158015610931573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610955919061368d565b6040015110156109a75760405162461bcd60e51b815260206004820152601960248201527f7374616b652062656c6f77206d696e696d756d207374616b65000000000000006044820152606401610534565b60065460405163b98ef0d360e01b8152600481018690526000916001600160a01b03169063b98ef0d39060240160206040518083038186803b1580156109ec57600080fd5b505afa158015610a00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a24919061361e565b9050610a5f896040518060c001604052808581526020018b81526020018a815260200189815260200184815260200160011515815250612b11565b7f0ae3cf996526ee39dbe842f2cf23ea039e5c81273dab4fbd8f632dff9624266189838a8a8a8a42604051610a9a9796959493929190613a36565b60405180910390a1505050505050505050565b60006001600160e01b031982167f7965db0b000000000000000000000000000000000000000000000000000000001480610b1057507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b610b516040518060c0016040528060008152602001606081526020016060815260200160008152602001600081526020016000151581525090565b600082815260046020908152604091829020825160c0810184528154815260018201805485518186028101860190965280865291949293858101939290830182828015610bbd57602002820191906000526020600020905b815481526020019060010190808311610ba9575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610c1557602002820191906000526020600020905b815481526020019060010190808311610c01575b5050509183525050600382015460208201526004820154604082015260059091015460ff16151560609091015292915050565b600054610100900460ff1680610c61575060005460ff16155b610cd35760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610534565b600054610100900460ff16158015610cf5576000805461ffff19166101011790555b6000610d018133613025565b50600680547fffffffffffffffffffffffff00000000000000000000000000000000000000009081166001600160a01b0389811691909117909255600780548216888416179055600880548216878416179055600980548216868416179055600580549091169184169190911790558015610d82576000805461ff00191690555b505050505050565b6000805460ff16610ddd5760405162461bcd60e51b815260206004820152601e60248201527f436f6e74726163742073686f756c6420626520696e697469616c697a656400006044820152606401610534565b8173__$3b76b38140ea5d8f6a5a565441556589de$__63320e985c600a600660009054906101000a90046001600160a01b03166001600160a01b031663bc788d466040518163ffffffff1660e01b815260040160206040518083038186803b158015610e4857600080fd5b505afa158015610e5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e80919061361e565b60408051602081018b90520160408051601f198184030181528282528051602091820120600554630afaeebf60e31b8552925190936001600160a01b03909316926357d775f8926004808301939192829003018186803b158015610ee357600080fd5b505afa158015610ef7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1b919061361e565b6040516001600160e01b031960e087901b16815260ff909416600485015260248401929092526044830152606482015260840160206040518083038186803b158015610f6657600080fd5b505af4158015610f7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9e919061361e565b610fa9906001613af5565b14610fb65750600061124b565b600073__$3b76b38140ea5d8f6a5a565441556589de$__63a874132b600a8588604051602001610ff0929190918252602082015260400190565b60408051601f198184030181528282528051602091820120600554630afaeebf60e31b8552925190936001600160a01b03909316926357d775f8926004808301939192829003018186803b15801561104757600080fd5b505afa15801561105b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107f919061361e565b6040516001600160e01b031960e086901b16815260ff90931660048401526024830191909152604482015260640160206040518083038186803b1580156110c557600080fd5b505af41580156110d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fd919061361e565b9050600061111064010000000083613bd9565b60065460405163b98ef0d360e01b8152600481018890529192506000916001600160a01b039091169063b98ef0d39060240160206040518083038186803b15801561115a57600080fd5b505afa15801561116e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611192919061361e565b60065460405163b98ef0d360e01b8152600481018890529192506000916001600160a01b039091169063b98ef0d39060240160206040518083038186803b1580156111dc57600080fd5b505afa1580156111f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611214919061361e565b905061122581640100000000613b21565b61122f8385613b21565b111561124257600094505050505061124b565b60019450505050505b9392505050565b6000828152600160208190526040909120015461126f8133613025565b61127983836130a5565b505050565b6001600160a01b03811633146112fc5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610534565b611306828261312c565b5050565b60008181526004602090815260409182902060020180548351818402810184019094528084526060939283018282801561136357602002820191906000526020600020905b81548152602001906001019080831161134f575b50505050509050919050565b60005460ff166113c15760405162461bcd60e51b815260206004820152601e60248201527f436f6e74726163742073686f756c6420626520696e697469616c697a656400006044820152606401610534565b60055460408051630eaf323560e31b8152905184926001600160a01b03169163757991a8916004808301926020929190829003018186803b15801561140557600080fd5b505afa158015611419573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143d919061361e565b811461147d5760405162461bcd60e51b815260206004820152600f60248201526e0d2dcc6dee4e4cac6e840cae0dec6d608b1b6044820152606401610534565b600560009054906101000a90046001600160a01b03166001600160a01b031663f240f7c36040518163ffffffff1660e01b815260040160206040518083038186803b1580156114cb57600080fd5b505afa1580156114df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115039190613839565b63ffffffff16600560009054906101000a90046001600160a01b03166001600160a01b0316631865c57d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561155757600080fd5b505afa15801561156b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158f919061361e565b81146115cf5760405162461bcd60e51b815260206004820152600f60248201526e696e636f727265637420737461746560881b6044820152606401610534565b600084815260026020908152604080832033845290915290819020600301546008549151635f08158d60e11b8152600481018790526024810182905290916001600160a01b03169063be102b1a9060440160206040518083038186803b15801561163857600080fd5b505afa15801561164c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611670919061361e565b6000868152600260209081526040808320338452909152902054146116fd5760405162461bcd60e51b815260206004820152602560248201527f546f74616c20696e666c75656e63652072657665616c656420646f65736e742060448201527f6d617463680000000000000000000000000000000000000000000000000000006064820152608401610534565b60008581526002602090815260408083203384528252808320600101548884526003909252822080549192918790811061174757634e487b7160e01b600052603260045260246000fd5b9060005260206000209060060201600001549050600082116117ab5760405162461bcd60e51b815260206004820152601660248201527f6d656469616e2063616e206e6f74206265207a65726f000000000000000000006044820152606401610534565b60008781526003602052604090208054839190889081106117dc57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060060201600201848154811061180c57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154146118f457600087815260036020526040812080548890811061184a57634e487b7160e01b600052603260045260246000fd5b60009182526020909120600691820201600501805460ff191692151592909217909155546040517f0f91ce1900000000000000000000000000000000000000000000000000000000815260048101839052336024820152604481018990526001600160a01b0390911690630f91ce1990606401600060405180830381600087803b1580156118d757600080fd5b505af11580156118eb573d6000803e3d6000fd5b50505050611962565b60405162461bcd60e51b815260206004820152603760248201527f50726f706f73656420416c7465726e61746520626c6f636b206973206964656e60448201527f746963616c20746f2070726f706f73656420626c6f636b0000000000000000006064820152608401610534565b50505050505050565b60005460ff166119bd5760405162461bcd60e51b815260206004820152601e60248201527f436f6e74726163742073686f756c6420626520696e697469616c697a656400006044820152606401610534565b60055460408051630eaf323560e31b8152905185926001600160a01b03169163757991a8916004808301926020929190829003018186803b158015611a0157600080fd5b505afa158015611a15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a39919061361e565b8114611a795760405162461bcd60e51b815260206004820152600f60248201526e0d2dcc6dee4e4cac6e840cae0dec6d608b1b6044820152606401610534565b600560009054906101000a90046001600160a01b03166001600160a01b031663f240f7c36040518163ffffffff1660e01b815260040160206040518083038186803b158015611ac757600080fd5b505afa158015611adb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aff9190613839565b63ffffffff16600560009054906101000a90046001600160a01b03166001600160a01b0316631865c57d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611b5357600080fd5b505afa158015611b67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8b919061361e565b8114611bcb5760405162461bcd60e51b815260206004820152600f60248201526e696e636f727265637420737461746560881b6044820152606401610534565b600854604051635f08158d60e11b815260048101879052602481018690526000916002916001600160a01b039091169063be102b1a9060440160206040518083038186803b158015611c1c57600080fd5b505afa158015611c30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c54919061361e565b611c5e9190613b0d565b600087815260026020818152604080842033855290915290912080549101549192509081611caa5760008881526002602090815260408083203384529091529020600301879055611d15565b60008881526002602090815260408083203384529091529020600301548714611d155760405162461bcd60e51b815260206004820152601460248201527f41737365744964206e6f74206d61746368696e670000000000000000000000006044820152606401610534565b60005b8651811015611f4a5781878281518110611d4257634e487b7160e01b600052603260045260246000fd5b602002602001015111611dbd5760405162461bcd60e51b815260206004820152602960248201527f736f727465645b695d206973206e6f742067726561746572207468616e206c6160448201527f73745669736974656400000000000000000000000000000000000000000000006064820152608401610534565b868181518110611ddd57634e487b7160e01b600052603260045260246000fd5b60200260200101519150600860009054906101000a90046001600160a01b03166001600160a01b0316639c66556f8a8a8a8581518110611e2d57634e487b7160e01b600052603260045260246000fd5b60200260200101516040518463ffffffff1660e01b8152600401611e64939291909283526020830191909152604082015260600190565b60206040518083038186803b158015611e7c57600080fd5b505afa158015611e90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb4919061361e565b611ebe9084613af5565b60008a8152600260209081526040808320338452909152902060010154909350158015611eea57508383115b15611f3857868181518110611f0f57634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008b815260028352604080822033835290935291909120600101555b80611f4281613b9e565b915050611d18565b506000978852600260208181526040808b20338c52909152909820978801559095555050505050565b60005460ff16611fc55760405162461bcd60e51b815260206004820152601e60248201527f436f6e74726163742073686f756c6420626520696e697469616c697a656400006044820152606401610534565b60055460408051630eaf323560e31b8152905183926001600160a01b03169163757991a8916004808301926020929190829003018186803b15801561200957600080fd5b505afa15801561201d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612041919061361e565b81146120815760405162461bcd60e51b815260206004820152600f60248201526e0d2dcc6dee4e4cac6e840cae0dec6d608b1b6044820152606401610534565b600560009054906101000a90046001600160a01b03166001600160a01b031663f240f7c36040518163ffffffff1660e01b815260040160206040518083038186803b1580156120cf57600080fd5b505afa1580156120e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121079190613839565b63ffffffff16600560009054906101000a90046001600160a01b03166001600160a01b0316631865c57d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561215b57600080fd5b505afa15801561216f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612193919061361e565b81146121d35760405162461bcd60e51b815260206004820152600f60248201526e696e636f727265637420737461746560881b6044820152606401610534565b505060408051608081018252600080825260208083018281528385018381526060850184815296845260028084528685203386529093529490922092518355905160018301559151918101919091559051600390910155565b6003602052816000526040600020818154811061224857600080fd5b60009182526020909120600690910201805460038201546004830154600590930154919450925060ff1684565b60005460ff166122c75760405162461bcd60e51b815260206004820152601e60248201527f436f6e74726163742073686f756c6420626520696e697469616c697a656400006044820152606401610534565b600560009054906101000a90046001600160a01b03166001600160a01b031663d98b3ced6040518163ffffffff1660e01b815260040160206040518083038186803b15801561231557600080fd5b505afa158015612329573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061234d919061361e565b6123578133613025565b60055460408051630eaf323560e31b815290516000926001600160a01b03169163757991a8916004808301926020929190829003018186803b15801561239c57600080fd5b505afa1580156123b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d4919061361e565b905060005b600360006123e8600185613b40565b815260208101919091526040016000205460ff821610156112795760036000612412600185613b40565b81526020019081526020016000208160ff168154811061244257634e487b7160e01b600052603260045260246000fd5b600091825260209091206005600690920201015460ff16156128c5576003600061246d600185613b40565b81526020019081526020016000208160ff168154811061249d57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060060201600460006001856124bc9190613b40565b8152602081019190915260400160002081548155600180830180546124e4928401919061341e565b50600282810180546124f9928401919061341e565b50600382810154828201556004808401549083015560059283015492909101805460ff191660ff9093161515929092179091556000908161253b600186613b40565b81526020019081526020016000208260ff168154811061256b57634e487b7160e01b600052603260045260246000fd5b600091825260209091206006909102015490507fe9c8841ed2456dc770efbf4a9a61103f6f9ebc906085a3614a7e113627b31c9d6125aa600185613b40565b82600360006125ba600189613b40565b81526020019081526020016000208560ff16815481106125ea57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016002016003600060018961260c9190613b40565b81526020019081526020016000208660ff168154811061263c57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016001014260405161265f959493929190613a87565b60405180910390a160005b60036000612679600187613b40565b81526020019081526020016000208360ff16815481106126a957634e487b7160e01b600052603260045260246000fd5b9060005260206000209060060201600101805490508160ff161015612840576009546001600160a01b03166351be9717600360006126e8600189613b40565b81526020019081526020016000208560ff168154811061271857634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016001018360ff168154811061274b57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154600360006001896127679190613b40565b81526020019081526020016000208660ff168154811061279757634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016002018460ff16815481106127ca57634e487b7160e01b600052603260045260246000fd5b90600052602060002001546040518363ffffffff1660e01b81526004016127fb929190918252602082015260400190565b600060405180830381600087803b15801561281557600080fd5b505af1158015612829573d6000803e3d6000fd5b50505050808061283890613bb9565b91505061266a565b506007546040517f746c8b6500000000000000000000000000000000000000000000000000000000815260048101839052602481018590526001600160a01b039091169063746c8b6590604401600060405180830381600087803b1580156128a757600080fd5b505af11580156128bb573d6000803e3d6000fd5b5050505050505050565b806128cf81613bb9565b9150506123d9565b50565b6129156040518060c0016040528060008152602001606081526020016060815260200160008152602001600081526020016000151581525090565b60008381526003602052604090208054606091908490811061294757634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016040518060c001604052908160008201548152602001600182018054806020026020016040519081016040528092919081815260200182805480156129b957602002820191906000526020600020905b8154815260200190600101908083116129a5575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015612a1157602002820191906000526020600020905b8154815260200190600101908083116129fd575b505050918352505060038201546020820152600482015460408083019190915260059092015460ff161515606090910152810151909590945092505050565b600082815260036020526040902080546060919083908110612a8257634e487b7160e01b600052603260045260246000fd5b9060005260206000209060060201600201805480602002602001604051908101604052809291908181526020018280548015612add57602002820191906000526020600020905b815481526020019060010190808311612ac9575b5050505050905092915050565b60008281526001602081905260409091200154612b078133613025565b611279838361312c565b600082815260036020526040902054612bb55760008281526003602090815260408220805460018181018355918452928290208451600690940201928355838201518051859493612b6693850192019061346e565b5060408201518051612b8291600284019160209091019061346e565b50606082015160038201556080820151600482015560a0909101516005909101805460ff19169115159190911790555050565b600082815260036020526040812054905b600084815260036020526040902054811015612c945760808301516000858152600360205260409020805483908110612c0f57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060060201600401541015612c2f57809150612c94565b60608301516000858152600360205260409020805483908110612c6257634e487b7160e01b600052603260045260246000fd5b9060005260206000209060060201600301541115612c8257809150612c94565b80612c8c81613b9e565b915050612bc6565b5060008381526003602090815260408220805460018181018355918452928290208551600690940201928355848201518051869493612cd793850192019061346e565b5060408201518051612cf391600284019160209091019061346e565b5060608201516003828101919091556080830151600483015560a0909201516005909101805460ff191691151591909117905560008481526020919091526040812054612d4290600190613b40565b90505b81811115612e44576000848152600360205260409020612d66600183613b40565b81548110612d8457634e487b7160e01b600052603260045260246000fd5b9060005260206000209060060201600360008681526020019081526020016000208281548110612dc457634e487b7160e01b600052603260045260246000fd5b60009182526020909120825460069092020190815560018083018054612ded928401919061341e565b5060028281018054612e02928401919061341e565b5060038281015490820155600480830154908201556005918201549101805460ff191660ff909216151591909117905580612e3c81613b87565b915050612d45565b506000838152600360205260409020805483919083908110612e7657634e487b7160e01b600052603260045260246000fd5b9060005260206000209060060201600082015181600001556020820151816001019080519060200190612eaa92919061346e565b5060408201518051612ec691600284019160209091019061346e565b5060608201516003820155608082015160048083019190915560a0909201516005918201805460ff191691151591909117905554604080517f379597e000000000000000000000000000000000000000000000000000000000815290516001600160a01b039092169263379597e0928282019260209290829003018186803b158015612f5157600080fd5b505afa158015612f65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f89919061361e565b60008481526003602052604090205411156112795760008381526003602052604090208054612fba90600190613b40565b81548110612fd857634e487b7160e01b600052603260045260246000fd5b60009182526020822060069091020181815590612ff860018301826134a9565b6130066002830160006134a9565b506000600382018190556004820155600501805460ff19169055505050565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff1661130657613063816001600160a01b031660146131af565b61306e8360206131af565b60405160200161307f92919061392e565b60408051601f198184030181529082905262461bcd60e51b8252610534916004016139c2565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff166113065760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff16156113065760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b606060006131be836002613b21565b6131c9906002613af5565b67ffffffffffffffff8111156131ef57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015613219576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061325e57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106132cf57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600061330b846002613b21565b613316906001613af5565b90505b60018111156133cf577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061336557634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061338957634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c936133c881613b87565b9050613319565b50831561124b5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610534565b82805482825590600052602060002090810192821561345e5760005260206000209182015b8281111561345e578254825591600101919060010190613443565b5061346a9291506134c3565b5090565b82805482825590600052602060002090810192821561345e579160200282015b8281111561345e57825182559160200191906001019061348e565b50805460008255906000526020600020908101906128d791905b5b8082111561346a57600081556001016134c4565b80516134e381613c2f565b919050565b600082601f8301126134f8578081fd5b8135602067ffffffffffffffff8083111561351557613515613c19565b8260051b604051601f19603f8301168101818110848211171561353a5761353a613c19565b60405284815283810192508684018288018501891015613558578687fd5b8692505b8583101561357a57803584529284019260019290920191840161355c565b50979650505050505050565b805180151581146134e357600080fd5b600080600080600060a086880312156135ad578081fd5b85356135b881613c2f565b945060208601356135c881613c2f565b935060408601356135d881613c2f565b925060608601356135e881613c2f565b915060808601356135f881613c2f565b809150509295509295909350565b600060208284031215613617578081fd5b5035919050565b60006020828403121561362f578081fd5b5051919050565b60008060408385031215613648578182fd5b82359150602083013561365a81613c2f565b809150509250929050565b600060208284031215613676578081fd5b81356001600160e01b03198116811461124b578182fd5b6000610140828403121561369f578081fd5b6136a7613acb565b825181526136b7602084016134d8565b602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c08201526136fa60e08401613586565b60e082015261010083810151908201526101206137188185016134d8565b908201529392505050565b600080600080600060a0868803121561373a578081fd5b85359450602086013567ffffffffffffffff80821115613758578283fd5b61376489838a016134e8565b95506040880135915080821115613779578283fd5b50613786888289016134e8565b9598949750949560608101359550608001359392505050565b600080604083850312156137b1578081fd5b50508035926020909101359150565b6000806000606084860312156137d4578081fd5b8335925060208401359150604084013567ffffffffffffffff8111156137f8578182fd5b613804868287016134e8565b9150509250925092565b600080600060608486031215613822578081fd5b505081359360208301359350604090920135919050565b60006020828403121561384a578081fd5b815163ffffffff8116811461124b578182fd5b6000815180845260208085019450808401835b8381101561388c57815187529582019590820190600101613870565b509495945050505050565b6000815480845260208085019450838352808320835b8381101561388c578154875295820195600191820191016138ad565b805182526000602082015160c060208501526138e860c085018261385d565b905060408301518482036040860152613901828261385d565b915050606083015160608501526080830151608085015260a0830151151560a08501528091505092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613966816017850160208801613b57565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516139a3816028840160208801613b57565b01602801949350505050565b60208152600061124b602083018461385d565b60208152600082518060208401526139e1816040850160208701613b57565b601f01601f19169190910160400192915050565b60208152600061124b60208301846138c9565b604081526000613a1b60408301856138c9565b8281036020840152613a2d818561385d565b95945050505050565b87815286602082015260e060408201526000613a5560e083018861385d565b8281036060840152613a67818861385d565b6080840196909652505060a081019290925260c090910152949350505050565b85815284602082015260a060408201526000613aa660a0830186613897565b8281036060840152613ab88186613897565b9150508260808301529695505050505050565b604051610140810167ffffffffffffffff81118282101715613aef57613aef613c19565b60405290565b60008219821115613b0857613b08613bed565b500190565b600082613b1c57613b1c613c03565b500490565b6000816000190483118215151615613b3b57613b3b613bed565b500290565b600082821015613b5257613b52613bed565b500390565b60005b83811015613b72578181015183820152602001613b5a565b83811115613b81576000848401525b50505050565b600081613b9657613b96613bed565b506000190190565b6000600019821415613bb257613bb2613bed565b5060010190565b600060ff821660ff811415613bd057613bd0613bed565b60010192915050565b600082613be857613be8613c03565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146128d757600080fdfea2646970667358221220cc95bde22e0e8470d2a9880e7b2e7c3467e113f63dc4fe70c17f6d73a77dc2fb64736f6c63430008040033","abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"epoch","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"stakerId","type":"uint256"},{"indexed":false,"internalType":"uint256[]","name":"medians","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"BlockConfirmed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"epoch","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"stakerId","type":"uint256"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"medians","type":"uint256[]"},{"indexed":false,"internalType":"uint256","name":"iteration","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"biggestInfluencerId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"Proposed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"assetManager","outputs":[{"internalType":"contract IAssetManager","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"blocks","outputs":[{"internalType":"uint256","name":"proposerId","type":"uint256"},{"internalType":"uint256","name":"iteration","type":"uint256"},{"internalType":"uint256","name":"biggestInfluence","type":"uint256"},{"internalType":"bool","name":"valid","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"confirmBlock","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"","type":"address"}],"name":"disputes","outputs":[{"internalType":"uint256","name":"accWeight","type":"uint256"},{"internalType":"uint256","name":"median","type":"uint256"},{"internalType":"uint256","name":"lastVisited","type":"uint256"},{"internalType":"uint256","name":"assetId","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"epoch","type":"uint256"},{"internalType":"uint256","name":"blockId","type":"uint256"}],"name":"finalizeDispute","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"epoch","type":"uint256"}],"name":"getBlock","outputs":[{"components":[{"internalType":"uint256","name":"proposerId","type":"uint256"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"medians","type":"uint256[]"},{"internalType":"uint256","name":"iteration","type":"uint256"},{"internalType":"uint256","name":"biggestInfluence","type":"uint256"},{"internalType":"bool","name":"valid","type":"bool"}],"internalType":"struct Structs.Block","name":"_block","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"epoch","type":"uint256"}],"name":"getBlockMedians","outputs":[{"internalType":"uint256[]","name":"_blockMedians","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"epoch","type":"uint256"}],"name":"getNumProposedBlocks","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"epoch","type":"uint256"},{"internalType":"uint256","name":"proposedBlock","type":"uint256"}],"name":"getProposedBlock","outputs":[{"components":[{"internalType":"uint256","name":"proposerId","type":"uint256"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"medians","type":"uint256[]"},{"internalType":"uint256","name":"iteration","type":"uint256"},{"internalType":"uint256","name":"biggestInfluence","type":"uint256"},{"internalType":"bool","name":"valid","type":"bool"}],"internalType":"struct Structs.Block","name":"_block","type":"tuple"},{"internalType":"uint256[]","name":"_blockMedians","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"epoch","type":"uint256"},{"internalType":"uint256","name":"proposedBlock","type":"uint256"}],"name":"getProposedBlockMedians","outputs":[{"internalType":"uint256[]","name":"_blockMedians","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"epoch","type":"uint256"},{"internalType":"uint256","name":"assetId","type":"uint256"},{"internalType":"uint256[]","name":"sorted","type":"uint256[]"}],"name":"giveSorted","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"stakeManagerAddress","type":"address"},{"internalType":"address","name":"rewardManagerAddress","type":"address"},{"internalType":"address","name":"voteManagerAddress","type":"address"},{"internalType":"address","name":"assetManagerAddress","type":"address"},{"internalType":"address","name":"parametersAddress","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"iteration","type":"uint256"},{"internalType":"uint256","name":"biggestInfluencerId","type":"uint256"},{"internalType":"uint256","name":"stakerId","type":"uint256"}],"name":"isElectedProposer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"parameters","outputs":[{"internalType":"contract IParameters","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"epoch","type":"uint256"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"medians","type":"uint256[]"},{"internalType":"uint256","name":"iteration","type":"uint256"},{"internalType":"uint256","name":"biggestInfluencerId","type":"uint256"}],"name":"propose","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"proposedBlocks","outputs":[{"internalType":"uint256","name":"proposerId","type":"uint256"},{"internalType":"uint256","name":"iteration","type":"uint256"},{"internalType":"uint256","name":"biggestInfluence","type":"uint256"},{"internalType":"bool","name":"valid","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"epoch","type":"uint256"}],"name":"resetDispute","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rewardManager","outputs":[{"internalType":"contract IRewardManager","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"stakeManager","outputs":[{"internalType":"contract IStakeManager","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"voteManager","outputs":[{"internalType":"contract IVoteManager","name":"","type":"address"}],"stateMutability":"view","type":"function"}]}