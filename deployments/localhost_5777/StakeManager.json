{"metadata":"{\"compiler\":{\"version\":\"0.8.4\"},\"sources\":{\"contracts/Core/StakeManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interface/IParameters.sol\\\";\\nimport \\\"./interface/IRewardManager.sol\\\";\\nimport \\\"./interface/IVoteManager.sol\\\";\\nimport \\\"./storage/StakeStorage.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\nimport \\\"../RAZOR.sol\\\";\\nimport \\\"./ACL.sol\\\";\\nimport \\\"../Pause.sol\\\";\\nimport \\\"../StakedToken.sol\\\";\\n\\n/// @title StakeManager\\n/// @notice StakeManager handles stake, unstake, withdraw, reward, functions\\n/// for stakers\\n\\ncontract StakeManager is Initializable, ACL, StakeStorage, Pause {\\n    IParameters public parameters;\\n    IRewardManager public rewardManager;\\n    RAZOR public razor;\\n    IVoteManager public voteManager;\\n    //[math.floor(math.sqrt(i*10000)/2) for i in range(1,100)]\\n    uint256[] public maturities = [\\n        50,\\n        70,\\n        86,\\n        100,\\n        111,\\n        122,\\n        132,\\n        141,\\n        150,\\n        158,\\n        165,\\n        173,\\n        180,\\n        187,\\n        193,\\n        200,\\n        206,\\n        212,\\n        217,\\n        223,\\n        229,\\n        234,\\n        239,\\n        244,\\n        250,\\n        254,\\n        259,\\n        264,\\n        269,\\n        273,\\n        278,\\n        282,\\n        287,\\n        291,\\n        295,\\n        300,\\n        304,\\n        308,\\n        312,\\n        316,\\n        320,\\n        324,\\n        327,\\n        331,\\n        335,\\n        339,\\n        342,\\n        346,\\n        350,\\n        353,\\n        357,\\n        360,\\n        364,\\n        367,\\n        370,\\n        374,\\n        377,\\n        380,\\n        384,\\n        387,\\n        390,\\n        393,\\n        396,\\n        400,\\n        403,\\n        406,\\n        409,\\n        412,\\n        415,\\n        418,\\n        421,\\n        424,\\n        427,\\n        430,\\n        433,\\n        435,\\n        438,\\n        441,\\n        444,\\n        447,\\n        450,\\n        452,\\n        455,\\n        458,\\n        460,\\n        463,\\n        466,\\n        469,\\n        471,\\n        474,\\n        476,\\n        479,\\n        482,\\n        484,\\n        487,\\n        489,\\n        492,\\n        494,\\n        497\\n    ];\\n    event StakeChange(uint256 indexed stakerId, uint256 previousStake, uint256 newStake, string reason, uint256 epoch, uint256 timestamp);\\n\\n    event AgeChange(uint256 indexed stakerId, uint256 previousAge, uint256 newAge, uint256 epoch, uint256 timestamp);\\n\\n    event Staked(uint256 epoch, uint256 indexed stakerId, uint256 previousStake, uint256 newStake, uint256 timestamp);\\n\\n    event Unstaked(uint256 epoch, uint256 indexed stakerId, uint256 amount, uint256 newStake, uint256 timestamp, address unstaker);\\n\\n    event Withdrew(uint256 epoch, uint256 indexed stakerId, uint256 amount, uint256 newStake, uint256 timestamp, address withdrawer);\\n\\n    event Delegated(uint256 epoch, uint256 indexed stakerId, address delegator, uint256 previousStake, uint256 newStake, uint256 timestamp);\\n\\n    event DelegationAcceptanceChanged(uint256 indexed stakerId, address staker, bool delegationEnabled);\\n\\n    modifier checkEpoch(uint256 epoch) {\\n        require(epoch == parameters.getEpoch(), \\\"incorrect epoch\\\");\\n        _;\\n    }\\n\\n    modifier checkState(uint256 state) {\\n        require(state == parameters.getState(), \\\"incorrect state\\\");\\n        _;\\n    }\\n\\n    /// @param razorAddress The address of the Razor token ERC20 contract\\n    /// @param rewardManagerAddress The address of the RewardManager contract\\n    /// @param voteManagersAddress The address of the VoteManager contract\\n    /// @param parametersAddress The address of the StateManager contract\\n    function initialize(\\n        address razorAddress,\\n        address rewardManagerAddress,\\n        address voteManagersAddress,\\n        address parametersAddress\\n    ) external initializer onlyRole(DEFAULT_ADMIN_ROLE) {\\n        razor = RAZOR(razorAddress);\\n        rewardManager = IRewardManager(rewardManagerAddress);\\n        voteManager = IVoteManager(voteManagersAddress);\\n        parameters = IParameters(parametersAddress);\\n    }\\n\\n    /// @param _id The ID of the staker\\n    /// @param _epochLastRevealed The number of epoch that staker revealed asset values\\n    function setStakerEpochLastRevealed(uint256 _id, uint256 _epochLastRevealed)\\n        external\\n        initialized\\n        onlyRole(parameters.getStakerActivityUpdaterHash())\\n    {\\n        stakers[_id].epochLastRevealed = _epochLastRevealed;\\n    }\\n\\n    /// @param stakerId The ID of the staker\\n    function updateCommitmentEpoch(uint256 stakerId) external initialized onlyRole(parameters.getStakerActivityUpdaterHash()) {\\n        stakers[stakerId].epochLastCommitted = parameters.getEpoch();\\n    }\\n\\n    /// @notice stake during commit state only\\n    /// we check epoch during every transaction to avoid withholding and rebroadcasting attacks\\n    /// @param epoch The Epoch value for which staker is requesting to stake\\n    /// @param amount The amount in RZR\\n    function stake(uint256 epoch, uint256 amount) external initialized checkEpoch(epoch) checkState(parameters.commit()) whenNotPaused {\\n        require(amount >= parameters.minStake(), \\\"staked amount is less than minimum stake required\\\");\\n        require(razor.transferFrom(msg.sender, address(this), amount), \\\"sch transfer failed\\\");\\n        uint256 stakerId = stakerIds[msg.sender];\\n        uint256 previousStake = stakers[stakerId].stake;\\n        if (stakerId == 0) {\\n            numStakers = numStakers + (1);\\n            StakedToken sToken = new StakedToken();\\n            stakers[numStakers] = Structs.Staker(numStakers, msg.sender, amount, 10000, epoch, 0, 0, false, 0, address(sToken));\\n            // Minting\\n            sToken.mint(msg.sender, amount); // as 1RZR = 1 sRZR\\n            stakerId = numStakers;\\n            stakerIds[msg.sender] = stakerId;\\n        } else {\\n            StakedToken sToken = StakedToken(stakers[stakerId].tokenAddress);\\n            uint256 totalSupply = sToken.totalSupply();\\n            uint256 toMint = _convertRZRtoSRZR(amount, stakers[stakerId].stake, totalSupply); // RZRs to sRZRs\\n\\n            // WARNING: ALLOWING STAKE TO BE ADDED AFTER WITHDRAW/SLASH, consequences need an analysis\\n            // For more info, See issue -: https://github.com/razor-network/contracts/issues/112\\n            stakers[stakerId].stake = stakers[stakerId].stake + (amount);\\n            // Mint sToken as Amount * (totalSupplyOfToken/previousStake)\\n            sToken.mint(msg.sender, toMint);\\n        }\\n\\n        emit Staked(epoch, stakerId, previousStake, stakers[stakerId].stake, block.timestamp);\\n    }\\n\\n    /// @notice Delegation\\n    /// @param epoch The Epoch value for which staker is requesting to stake\\n    /// @param amount The amount in RZR\\n    /// @param stakerId The Id of staker whom you want to delegate\\n    function delegate(\\n        uint256 epoch,\\n        uint256 amount,\\n        uint256 stakerId\\n    ) external initialized checkEpoch(epoch) checkState(parameters.commit()) whenNotPaused {\\n        require(stakers[stakerId].acceptDelegation, \\\"Delegetion not accpected\\\");\\n        require(stakers[stakerId].tokenAddress != address(0x0000000000000000000000000000000000000000), \\\"Staker has not staked yet\\\");\\n        // Step 1:  Razor Token Transfer : Amount\\n        require(razor.transferFrom(msg.sender, address(this), amount), \\\"RZR token transfer failed\\\");\\n\\n        // Step 2 : Calculate Mintable amount\\n        StakedToken sToken = StakedToken(stakers[stakerId].tokenAddress);\\n        uint256 totalSupply = sToken.totalSupply();\\n        uint256 toMint = _convertRZRtoSRZR(amount, stakers[stakerId].stake, totalSupply);\\n\\n        // Step 3: Increase given stakers stake by : Amount\\n        uint256 previousStake = stakers[stakerId].stake;\\n        stakers[stakerId].stake = stakers[stakerId].stake + (amount);\\n\\n        // Step 4:  Mint sToken as Amount * (totalSupplyOfToken/previousStake)\\n        sToken.mint(msg.sender, toMint);\\n\\n        emit Delegated(epoch, stakerId, msg.sender, previousStake, stakers[stakerId].stake, block.timestamp);\\n    }\\n\\n    /// @notice staker/delegator must call unstake() to lock their sRZRs\\n    // and should wait for params.withdraw_after period\\n    // after which she can call withdraw() in withdrawReleasePeriod.\\n    // If this period pass, lock expires and she will have to resetLock() to able to withdraw again\\n    /// @param epoch The Epoch value for which staker is requesting to unstake\\n    /// @param stakerId The Id of staker associated with sRZR which user want to unstake\\n    /// @param sAmount The Amount in sRZR\\n    function unstake(\\n        uint256 epoch,\\n        uint256 stakerId,\\n        uint256 sAmount\\n    ) external initialized checkEpoch(epoch) checkState(parameters.commit()) whenNotPaused {\\n        Structs.Staker storage staker = stakers[stakerId];\\n        require(staker.id != 0, \\\"staker.id = 0\\\");\\n        require(staker.stake > 0, \\\"Nonpositive stake\\\");\\n        require(locks[msg.sender][staker.tokenAddress].amount == 0, \\\"Existing Lock\\\");\\n        require(sAmount > 0, \\\"Non-Positive Amount\\\");\\n        StakedToken sToken = StakedToken(staker.tokenAddress);\\n        require(sToken.balanceOf(msg.sender) >= sAmount, \\\"Invalid Amount\\\");\\n        locks[msg.sender][staker.tokenAddress] = Structs.Lock(sAmount, epoch + (parameters.withdrawLockPeriod()));\\n        emit Unstaked(epoch, stakerId, sAmount, staker.stake, block.timestamp, msg.sender);\\n        //emit event here\\n    }\\n\\n    /// @notice staker/delegator can withdraw their funds after calling unstake and withdrawAfter period.\\n    // To be eligible for withdraw it must be called with in withDrawReleasePeriod(),\\n    //this is added to avoid front-run unstake/withdraw.\\n    // For Staker, To be eligible for withdraw she must not participate in lock duration,\\n    //this is added to avoid hit and run dispute attack.\\n    // For Delegator, there is no such restriction\\n    // Both Staker and Delegator should have their locked funds(sRZR) present in\\n    //their wallet at time of if not withdraw reverts\\n    // And they have to use resetLock()\\n    /// @param epoch The Epoch value for which staker is requesting to unstake\\n    /// @param stakerId The Id of staker associated with sRZR which user want to withdraw\\n    function withdraw(uint256 epoch, uint256 stakerId)\\n        external\\n        initialized\\n        checkEpoch(epoch)\\n        checkState(parameters.commit())\\n        whenNotPaused\\n    {\\n        Structs.Staker storage staker = stakers[stakerId];\\n        Structs.Lock storage lock = locks[msg.sender][staker.tokenAddress];\\n\\n        require(staker.id != 0, \\\"staker doesnt exist\\\");\\n        require(lock.withdrawAfter != 0, \\\"Did not unstake\\\");\\n        require(lock.withdrawAfter <= epoch, \\\"Withdraw epoch not reached\\\");\\n        require(lock.withdrawAfter + parameters.withdrawReleasePeriod() >= epoch, \\\"Release Period Passed\\\"); // Can Use ResetLock\\n        require(staker.stake > 0, \\\"Nonpositive Stake\\\");\\n        if (stakerIds[msg.sender] == stakerId) {\\n            // Staker Must not particiapte in withdraw lock period, To counter Hit and Run Attacks\\n            require((lock.withdrawAfter - parameters.withdrawLockPeriod()) >= staker.epochLastRevealed, \\\"Participated in Lock Period\\\");\\n            require(voteManager.getCommitment(epoch, stakerId) == 0x0, \\\"Already commited\\\");\\n        }\\n\\n        StakedToken sToken = StakedToken(staker.tokenAddress);\\n        require(sToken.balanceOf(msg.sender) >= lock.amount, \\\"locked amount lost\\\"); // Can Use ResetLock\\n\\n        uint256 rAmount = _convertSRZRToRZR(lock.amount, staker.stake, sToken.totalSupply());\\n        require(sToken.burn(msg.sender, lock.amount), \\\"Token burn Failed\\\");\\n        staker.stake = staker.stake - rAmount;\\n\\n        // Function to Reset the lock\\n        _resetLock(stakerId);\\n\\n        // Transfer commission in case of delegators\\n        // Check commission rate >0\\n        if (stakerIds[msg.sender] != stakerId && staker.commission > 0) {\\n            uint256 commission = (rAmount * staker.commission) / 100;\\n            require(razor.transfer(staker._address, commission), \\\"couldnt transfer\\\");\\n            rAmount = rAmount - commission;\\n        }\\n\\n        //Transfer stake\\n        require(razor.transfer(msg.sender, rAmount), \\\"couldnt transfer\\\");\\n\\n        emit Withdrew(epoch, stakerId, rAmount, staker.stake, block.timestamp, msg.sender);\\n    }\\n\\n    /// @notice remove all funds in case of emergency\\n    function escape(address _address) external initialized onlyRole(DEFAULT_ADMIN_ROLE) whenPaused {\\n        if (parameters.escapeHatchEnabled()) {\\n            razor.transfer(_address, razor.balanceOf(address(this)));\\n        } else {\\n            revert(\\\"escape hatch is disabled\\\");\\n        }\\n    }\\n\\n    /// @notice Used by staker to set delegation acceptance, its set as False by default\\n    function setDelegationAcceptance(bool status) external {\\n        uint256 stakerId = stakerIds[msg.sender];\\n        require(stakerId != 0, \\\"staker id = 0\\\");\\n        stakers[stakerId].acceptDelegation = status;\\n        emit DelegationAcceptanceChanged(stakerId, msg.sender, status);\\n    }\\n\\n    /// @notice Used by staker to set commision for delegation\\n    function setCommission(uint256 commission) external {\\n        uint256 stakerId = stakerIds[msg.sender];\\n        require(stakerId != 0, \\\"staker id = 0\\\");\\n        require(stakers[stakerId].acceptDelegation, \\\"Delegetion not accpected\\\");\\n        require(stakers[stakerId].commission == 0, \\\"Commission already intilised\\\");\\n        stakers[stakerId].commission = commission;\\n    }\\n\\n    /// @notice As of now we only allow decresing commision, as with increase staker would have unfair adv\\n    function decreaseCommission(uint256 commission) external {\\n        uint256 stakerId = stakerIds[msg.sender];\\n        require(stakerId != 0, \\\"staker id = 0\\\");\\n        require(commission != 0, \\\"Invalid Commission Update\\\");\\n        require(stakers[stakerId].commission > commission, \\\"Invalid Commission Update\\\");\\n        stakers[stakerId].commission = commission;\\n    }\\n\\n    /// @notice Used by anyone whose lock expired or who lost funds, and want to request withdraw\\n    // Here we have added penalty to avoid repeating front-run unstake/witndraw attack\\n    function resetLock(uint256 stakerId) external initialized whenNotPaused {\\n        // Lock should be expired if you want to reset\\n        require(locks[msg.sender][stakers[stakerId].tokenAddress].amount != 0, \\\"Existing Lock doesnt exist\\\");\\n        require(stakers[stakerId].id != 0, \\\"staker.id = 0\\\");\\n\\n        Structs.Staker storage staker = stakers[stakerId];\\n        StakedToken sToken = StakedToken(stakers[stakerId].tokenAddress);\\n\\n        uint256 penalty = (staker.stake * parameters.resetLockPenalty()) / 100;\\n\\n        // Converting Penalty into sAmount\\n        uint256 sAmount = _convertRZRtoSRZR(penalty, staker.stake, sToken.totalSupply());\\n\\n        //Burning sAmount from msg.sender\\n        require(sToken.burn(msg.sender, sAmount), \\\"Token burn Failed\\\");\\n\\n        //Updating Staker Stake\\n        staker.stake = staker.stake - penalty;\\n\\n        _resetLock(stakerId);\\n    }\\n\\n    /// @notice External function for setting stake of the staker\\n    /// Used by RewardManager\\n    /// @param _id of the staker\\n    /// @param _stake the amount of Razor tokens staked\\n    function setStakerStake(\\n        uint256 _id,\\n        uint256 _stake,\\n        string memory _reason,\\n        uint256 _epoch\\n    ) external onlyRole(parameters.getStakeModifierHash()) {\\n        _setStakerStake(_id, _stake, _reason, _epoch);\\n    }\\n\\n    /// @notice The function is used by the Votemanager reveal function\\n    /// to penalise the staker who lost his secret and make his stake less by \\\"slashPenaltyAmount\\\" and\\n    /// transfer to bounty hunter half the \\\"slashPenaltyAmount\\\" of the staker\\n    /// @param id The ID of the staker who is penalised\\n    /// @param bountyHunter The address of the bounty hunter\\n    function slash(\\n        uint256 id,\\n        address bountyHunter,\\n        uint256 epoch\\n    ) external onlyRole(parameters.getStakeModifierHash()) {\\n        uint256 slashPenaltyAmount = (stakers[id].stake * parameters.slashPenaltyNum()) / parameters.slashPenaltyDenom();\\n        uint256 newStake = stakers[id].stake - slashPenaltyAmount;\\n        uint256 halfPenalty = slashPenaltyAmount / 2;\\n\\n        if (halfPenalty == 0) return;\\n\\n        _setStakerStake(id, newStake, \\\"Slashed\\\", epoch);\\n        //reward half the amount to bounty hunter\\n        //please note that since slashing is a critical part of consensus algorithm,\\n        //the following transfers are not `reuquire`d. even if the transfers fail, the slashing\\n        //tx should complete.\\n        razor.transfer(bountyHunter, halfPenalty);\\n        //burn half the amount\\n        razor.transfer(parameters.burnAddress(), halfPenalty);\\n    }\\n\\n    function setStakerAge(\\n        uint256 _id,\\n        uint256 _age,\\n        uint256 _epoch\\n    ) external onlyRole(parameters.getStakeModifierHash()) {\\n        uint256 previousAge = stakers[_id].age;\\n        stakers[_id].age = _age;\\n        emit AgeChange(_id, previousAge, _age, _epoch, block.timestamp);\\n    }\\n\\n    /// @param _address Address of the staker\\n    /// @return The staker ID\\n    function getStakerId(address _address) external view returns (uint256) {\\n        return (stakerIds[_address]);\\n    }\\n\\n    /// @param _id The staker ID\\n    /// @return staker The Struct of staker information\\n    function getStaker(uint256 _id) external view returns (Structs.Staker memory staker) {\\n        return (stakers[_id]);\\n    }\\n\\n    /// @return The number of stakers in the razor network\\n    function getNumStakers() external view returns (uint256) {\\n        return (numStakers);\\n    }\\n\\n    /// @return age of staker\\n    function getAge(uint256 stakerId) external view returns (uint256) {\\n        return stakers[stakerId].age;\\n    }\\n\\n    /// @return influence of staker\\n    function getInfluence(uint256 stakerId) external view returns (uint256) {\\n        return _getMaturity(stakerId) * stakers[stakerId].stake;\\n    }\\n\\n    /// @return stake of staker\\n    function getStake(uint256 stakerId) external view returns (uint256) {\\n        return stakers[stakerId].stake;\\n    }\\n\\n    /// @notice Internal function for setting stake of the staker\\n    /// @param _id of the staker\\n    /// @param _stake the amount of Razor tokens staked\\n    function _setStakerStake(\\n        uint256 _id,\\n        uint256 _stake,\\n        string memory _reason,\\n        uint256 _epoch\\n    ) internal {\\n        uint256 previousStake = stakers[_id].stake;\\n        stakers[_id].stake = _stake;\\n        emit StakeChange(_id, previousStake, _stake, _reason, _epoch, block.timestamp);\\n    }\\n\\n    /// @return maturity of staker\\n    function _getMaturity(uint256 stakerId) internal view returns (uint256) {\\n        uint256 index = stakers[stakerId].age / 10000;\\n\\n        return maturities[index];\\n    }\\n\\n    /// @notice 1 sRZR = ? RZR\\n    // Used to calcualte sRZR into RZR value\\n    /// @param _sAmount The Amount in sRZR\\n    /// @param _currentStake The cuurent stake of associated staker\\n    function _convertSRZRToRZR(\\n        uint256 _sAmount,\\n        uint256 _currentStake,\\n        uint256 _totalSupply\\n    ) internal pure returns (uint256) {\\n        return ((_sAmount * _currentStake) / _totalSupply);\\n    }\\n\\n    /// @notice 1 RZR = ? sRZR\\n    // Used to calcualte RZR into sRZR value\\n    /// @param _amount The Amount in RZR\\n    /// @param _currentStake The cuurent stake of associated staker\\n    /// @param _totalSupply The totalSupply of sRZR\\n    function _convertRZRtoSRZR(\\n        uint256 _amount,\\n        uint256 _currentStake,\\n        uint256 _totalSupply\\n    ) internal pure returns (uint256) {\\n        // Follwoing require is included to cover case where\\n        // CurrentStake Becomes zero beacues of penalties,\\n        //this is likely scenario when staker stakes is slashed to 0 for invalid block.\\n        require(_currentStake != 0, \\\"Stakers Stake is 0\\\");\\n        return ((_amount * _totalSupply) / _currentStake);\\n    }\\n\\n    function _resetLock(uint256 stakerId) private {\\n        locks[msg.sender][stakers[stakerId].tokenAddress] = Structs.Lock({amount: 0, withdrawAfter: 0});\\n    }\\n}\\n\"},\"contracts/Core/interface/IParameters.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IParameters {\\n    function commit() external view returns (uint32);\\n\\n    function reveal() external view returns (uint32);\\n\\n    function propose() external view returns (uint32);\\n\\n    function dispute() external view returns (uint32);\\n\\n    function burnAddress() external view returns (address);\\n\\n    function penaltyNotRevealNum() external view returns (uint256);\\n\\n    function penaltyNotRevealDenom() external view returns (uint256);\\n\\n    function resetLockPenalty() external view returns (uint256);\\n\\n    function minStake() external view returns (uint256);\\n\\n    function withdrawLockPeriod() external view returns (uint256);\\n\\n    function withdrawReleasePeriod() external view returns (uint256);\\n\\n    function maxAltBlocks() external view returns (uint256);\\n\\n    function epochLength() external view returns (uint256);\\n\\n    function numStates() external view returns (uint256);\\n\\n    function gracePeriod() external view returns (uint256);\\n\\n    function aggregationRange() external view returns (uint256);\\n\\n    function exposureDenominator() external view returns (uint256);\\n\\n    function slashPenaltyNum() external view returns (uint256);\\n\\n    function slashPenaltyDenom() external view returns (uint256);\\n\\n    function getEpoch() external view returns (uint256);\\n\\n    function getState() external view returns (uint256);\\n\\n    function maxAge() external view returns (uint256);\\n\\n    function escapeHatchEnabled() external view returns (bool);\\n\\n    function getAssetConfirmerHash() external view returns (bytes32);\\n\\n    function getBlockConfirmerHash() external view returns (bytes32);\\n\\n    function getStakeModifierHash() external view returns (bytes32);\\n\\n    function getStakerActivityUpdaterHash() external view returns (bytes32);\\n\\n    function getRewardModifierHash() external view returns (bytes32);\\n\\n    function getAssetModifierHash() external view returns (bytes32);\\n\\n    function getDefaultAdminHash() external view returns (bytes32);\\n}\\n\"},\"contracts/lib/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nlibrary Structs {\\n    struct Vote {\\n        uint256 value;\\n        uint256 weight;\\n    }\\n\\n    struct Staker {\\n        uint256 id;\\n        address _address;\\n        uint256 stake;\\n        uint256 age;\\n        uint256 epochStaked;\\n        uint256 epochLastCommitted;\\n        uint256 epochLastRevealed;\\n        bool acceptDelegation;\\n        uint256 commission;\\n        address tokenAddress;\\n    }\\n\\n    struct Lock {\\n        uint256 amount; //amount in sTokens\\n        uint256 withdrawAfter;\\n    }\\n\\n    struct Block {\\n        uint256 proposerId;\\n        uint256[] ids;\\n        uint256[] medians;\\n        uint256 iteration;\\n        uint256 biggestInfluence;\\n        bool valid;\\n    }\\n\\n    struct Dispute {\\n        uint256 accWeight;\\n        uint256 median;\\n        uint256 lastVisited;\\n        uint256 assetId;\\n    }\\n\\n    struct Job {\\n        uint256 id;\\n        uint256 epoch;\\n        string url;\\n        string selector;\\n        string name;\\n        bool repeat;\\n        bool active;\\n        address creator;\\n        uint256 result;\\n        uint256 assetType;\\n    }\\n\\n    struct Collection {\\n        uint256 id;\\n        string name;\\n        uint32 aggregationMethod;\\n        uint256[] jobIDs;\\n        mapping(uint256 => bool) jobIDExist;\\n        uint256 epoch;\\n        bool active;\\n        address creator;\\n        uint256 result;\\n        uint256 assetType;\\n    }\\n}\\n\"},\"contracts/Core/interface/IRewardManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../lib/Structs.sol\\\";\\n\\ninterface IRewardManager {\\n    function givePenalties(uint256 stakerId, uint256 epoch) external;\\n\\n    function giveBlockReward(uint256 stakerId, uint256 epoch) external;\\n}\\n\"},\"contracts/Core/interface/IVoteManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../lib/Structs.sol\\\";\\n\\ninterface IVoteManager {\\n    function commit(uint256 epoch, bytes32 commitment) external;\\n\\n    function reveal(\\n        uint256 epoch,\\n        bytes32 root,\\n        uint256[] calldata values,\\n        bytes32[][] calldata proofs,\\n        bytes32 secret,\\n        address stakerAddress\\n    ) external;\\n\\n    function getCommitment(uint256 epoch, uint256 stakerId) external view returns (bytes32);\\n\\n    function getVote(\\n        uint256 epoch,\\n        uint256 stakerId,\\n        uint256 assetId\\n    ) external view returns (Structs.Vote memory vote);\\n\\n    function getVoteWeight(\\n        uint256 epoch,\\n        uint256 assetId,\\n        uint256 voteValue\\n    ) external view returns (uint256);\\n\\n    function getTotalInfluenceRevealed(uint256 epoch, uint256 assetId) external view returns (uint256);\\n}\\n\"},\"contracts/Core/storage/StakeStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../lib/Structs.sol\\\";\\n\\ncontract StakeStorage {\\n    uint256 public numStakers;\\n\\n    mapping(address => uint256) public stakerIds;\\n    mapping(uint256 => Structs.Staker) public stakers;\\n    mapping(address => mapping(address => Structs.Lock)) public locks;\\n}\\n\"},\"contracts/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * Forked from OZ's (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/b9125001f0a1c44d596ca3a47536f1a467e3a29d/contracts/proxy/utils/Initializable.sol)\\n */\\n\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    modifier initialized() {\\n        require(_initialized, \\\"Contract should be initialized\\\");\\n        _;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"},\"contracts/RAZOR.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/**\\n * @title RAZOR\\n * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.\\n * Note they can later distribute these tokens as they wish using `transfer` and other\\n * `ERC20` functions.\\n */\\n\\ncontract RAZOR is ERC20 {\\n    /**\\n     * @dev Constructor that gives msg.sender all of existing tokens.\\n     */\\n    constructor(uint256 initialSupply) ERC20(\\\"RAZOR\\\", \\\"RAZOR\\\") {\\n        _mint(msg.sender, initialSupply);\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"},\"contracts/Core/ACL.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract ACL is AccessControl {\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n}\\n\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"},\"contracts/Pause.sol\":{\"content\":\"pragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./Core/ACL.sol\\\";\\n\\ncontract Pause is Pausable, ACL {\\n    function pause() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        Pausable._pause();\\n    }\\n\\n    function unpause() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        Pausable._unpause();\\n    }\\n}\\n\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"contracts/StakedToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract StakedToken is ERC20, Ownable {\\n    constructor() ERC20(\\\"sRZR\\\", \\\"sRZR\\\") {}\\n\\n    function mint(address account, uint256 amount) external onlyOwner returns (bool) {\\n        _mint(account, amount);\\n        return true;\\n    }\\n\\n    function burn(address account, uint256 amount) external onlyOwner returns (bool) {\\n        _burn(account, amount);\\n        return true;\\n    }\\n}\\n\"}}}","address":"0x99bbA657f2BbC93c02D617f8bA121cB8Fc104Acf","bytecode":"0x610ce060405260326080908152604660a052605660c052606460e052606f61010052607a610120526084610140908152608d610160526096610180908152609e6101a05260a56101c05260ad6101e05260b46102005260bb6102205260c16102405260c86102605260ce6102805260d46102a05260d96102c05260df6102e05260e56103005260ea6103205260ef6103405260f46103605260fa6103805260fe6103a0526101036103c0526101086103e05261010d61040052610111610420526101166104405261011a6104605261011f610480526101236104a0526101276104c05261012c6104e05261013061050052610134610520526101386105405261013c61056052610580919091526101446105a0526101476105c05261014b6105e05261014f61060052610153610620526101566106405261015a6106605261015e610680526101616106a0526101656106c0526101686106e05261016c6107005261016f6107205261017261074052610176610760526101796107805261017c6107a0526107c0526101836107e052610186610800526101896108205261018c6108405261019061086052610193610880526101966108a0526101996108c05261019c6108e05261019f610900526101a2610920526101a5610940526101a8610960526101ab610980526101ae6109a0526101b16109c0526101b36109e0526101b6610a00526101b9610a20526101bc610a40526101bf610a60526101c2610a80526101c4610aa0526101c7610ac0526101ca610ae0526101cc610b00526101cf610b20526101d2610b40526101d5610b60526101d7610b80526101da610ba0526101dc610bc0526101df610be0526101e2610c00526101e4610c20526101e7610c40526101e9610c60526101ec610c80526101ee610ca0526101f1610cc052620002af90600a90606362000374565b50348015620002bd57600080fd5b506000805462ff000019168155620002d69033620002dc565b620003e1565b620002e88282620002ec565b5050565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff16620002e85760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b828054828255906000526020600020908101928215620003b8579160200282015b82811115620003b8578251829061ffff1690559160200191906001019062000395565b50620003c6929150620003ca565b5090565b5b80821115620003c65760008155600101620003cb565b615cf880620003f16000396000f3fe60806040523480156200001157600080fd5b5060043610620003015760003560e01c80637b0472f01162000199578063b98ef0d311620000e9578063ce325bf81162000097578063e3c998fe116200007a578063e3c998fe14620006ec578063f8c8765e1462000712578063fd5e6dd1146200072957600080fd5b8063ce325bf814620006af578063d547741f14620006d557600080fd5b8063bd97b37511620000cc578063bd97b375146200062a578063c05f61551462000641578063c8ae0d7d146200068c57600080fd5b8063b98ef0d3146200060a578063bc788d46146200062157600080fd5b8063928c91d511620001475780639cb6ed7e116200012a5780639cb6ed7e14620005d3578063a217fddf14620005ea578063a8a3e96f14620005f357600080fd5b8063928c91d514620005a55780639864f70a14620005bc57600080fd5b806385d628fd116200017c57806385d628fd146200053e57806389035730146200055557806391d14854146200056957600080fd5b80637b0472f0146200051d5780638456cb59146200053457600080fd5b806336568abe1162000255578063441a3e7011620002035780636022a48511620001e65780636022a48514620004d057806366fb64d014620004fc5780636c8b052a146200051357600080fd5b8063441a3e7014620004a75780635c975abb14620004be57600080fd5b8063421c53ca1162000238578063421c53ca1462000468578063426dbe4e146200047f57806342c1e587146200049357600080fd5b806336568abe14620004475780633f4ba83a146200045e57600080fd5b8063188dc83b11620002b35780632c2984a111620002965780632c2984a114620004025780632f2ff15d1462000419578063355e6b43146200043057600080fd5b8063188dc83b14620003c4578063248a9ca314620003db57600080fd5b80630f4ef8a611620002e85780630f4ef8a614620003675780630f91ce19146200039457806313d2d9a314620003ad57600080fd5b806301ffc9a714620003065780630e37008a1462000332575b600080fd5b6200031d620003173660046200478d565b620007f4565b60405190151581526020015b60405180910390f35b620003586200034336600462004734565b60009081526004602052604090206003015490565b60405190815260200162000329565b6007546200037b906001600160a01b031681565b6040516001600160a01b03909116815260200162000329565b620003ab620003a5366004620047b7565b6200085e565b005b620003ab620003be366004620048e2565b62000c88565b620003ab620003d536600462004734565b62000d87565b62000358620003ec36600462004734565b6000908152600160208190526040909120015490565b620003ab6200041336600462004734565b62000f18565b620003ab6200042a36600462004766565b6200102c565b620003ab6200044136600462004734565b6200105c565b620003ab6200045836600462004766565b6200116f565b620003ab620011ff565b620003ab6200047936600462004734565b6200121a565b6008546200037b906001600160a01b031681565b6009546200037b906001600160a01b031681565b620003ab620004b8366004620047f1565b62001631565b60005462010000900460ff166200031d565b62000358620004e136600462004617565b6001600160a01b031660009081526003602052604090205490565b620003ab6200050d366004620048e2565b6200226b565b6200035860025481565b620003ab6200052e366004620047f1565b620028b3565b620003ab62003189565b620003ab6200054f366004620046f6565b620031a1565b6006546200037b906001600160a01b031681565b6200031d6200057a36600462004766565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b62000358620005b636600462004734565b6200324e565b620003ab620005cd366004620047f1565b62003270565b620003ab620005e436600462004617565b62003370565b62000358600081565b620003ab6200060436600462004813565b62003610565b620003586200061b36600462004734565b620036b4565b60025462000358565b620003ab6200063b366004620048e2565b620036dd565b620006766200065236600462004655565b60056020908152600092835260408084209091529082529020805460019091015482565b6040805192835260208301919091520162000329565b620003586200069d36600462004617565b60036020526000908152604090205481565b62000358620006c036600462004734565b60009081526004602052604090206002015490565b620003ab620006e636600462004766565b62003d28565b62000703620006fd36600462004734565b62003d53565b604051620003299190620049fc565b620003ab6200072336600462004692565b62003e52565b6200079c6200073a36600462004734565b6004602081905260009182526040909120805460018201546002830154600384015494840154600585015460068601546007870154600888015460099098015496986001600160a01b03968716989597909694959394929360ff90921692168a565b604080519a8b526001600160a01b03998a1660208c01528a01979097526060890195909552608088019390935260a087019190915260c0860152151560e0850152610100840152166101208201526101400162000329565b60006001600160e01b031982167f7965db0b0000000000000000000000000000000000000000000000000000000014806200085857507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b600660009054906101000a90046001600160a01b03166001600160a01b03166380638d426040518163ffffffff1660e01b815260040160206040518083038186803b158015620008ad57600080fd5b505afa158015620008c2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008e891906200474d565b620008f4813362003f8d565b600654604080517fd31d4d6e00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163d31d4d6e916004808301926020929190829003018186803b1580156200095357600080fd5b505afa15801562000968573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200098e91906200474d565b600660009054906101000a90046001600160a01b03166001600160a01b0316636160a0a76040518163ffffffff1660e01b815260040160206040518083038186803b158015620009dd57600080fd5b505afa158015620009f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a1891906200474d565b60008781526004602052604090206002015462000a36919062004b00565b62000a42919062004adf565b6000868152600460205260408120600201549192509062000a6590839062004b22565b9050600062000a7660028462004adf565b90508062000a875750505062000c82565b62000aca87836040518060400160405280600781526020017f536c6173686564000000000000000000000000000000000000000000000000008152508862004016565b60085460405163a9059cbb60e01b81526001600160a01b038881166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b15801562000b1957600080fd5b505af115801562000b2e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b54919062004715565b50600854600654604080517f70d5ae0500000000000000000000000000000000000000000000000000000000815290516001600160a01b039384169363a9059cbb9316916370d5ae05916004808301926020929190829003018186803b15801562000bbe57600080fd5b505afa15801562000bd3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000bf9919062004636565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401602060405180830381600087803b15801562000c4257600080fd5b505af115801562000c57573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c7d919062004715565b505050505b50505050565b600660009054906101000a90046001600160a01b03166001600160a01b03166380638d426040518163ffffffff1660e01b815260040160206040518083038186803b15801562000cd757600080fd5b505afa15801562000cec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d1291906200474d565b62000d1e813362003f8d565b600084815260046020908152604091829020600301805490869055825181815291820186905291810184905242606082015285907f5d31a2df5bccb91e14f473b91e40b973794f5a39d13a37dabf6c580cb4c20915906080015b60405180910390a25050505050565b60005460ff1662000ddf5760405162461bcd60e51b815260206004820152601e60248201527f436f6e74726163742073686f756c6420626520696e697469616c697a6564000060448201526064015b60405180910390fd5b600660009054906101000a90046001600160a01b03166001600160a01b0316639cec6f8a6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000e2e57600080fd5b505afa15801562000e43573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e6991906200474d565b62000e75813362003f8d565b600660009054906101000a90046001600160a01b03166001600160a01b031663757991a86040518163ffffffff1660e01b815260040160206040518083038186803b15801562000ec457600080fd5b505afa15801562000ed9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000eff91906200474d565b6000928352600460205260409092206005019190915550565b336000908152600360205260409020548062000f675760405162461bcd60e51b815260206004820152600d60248201526c07374616b6572206964203d203609c1b604482015260640162000dd6565b8162000fb65760405162461bcd60e51b815260206004820152601960248201527f496e76616c696420436f6d6d697373696f6e2055706461746500000000000000604482015260640162000dd6565b6000818152600460205260409020600801548210620010185760405162461bcd60e51b815260206004820152601960248201527f496e76616c696420436f6d6d697373696f6e2055706461746500000000000000604482015260640162000dd6565b600090815260046020526040902060080155565b600082815260016020819052604090912001546200104b813362003f8d565b6200105783836200406a565b505050565b3360009081526003602052604090205480620010ab5760405162461bcd60e51b815260206004820152600d60248201526c07374616b6572206964203d203609c1b604482015260640162000dd6565b60008181526004602052604090206007015460ff166200110e5760405162461bcd60e51b815260206004820152601860248201527f44656c65676574696f6e206e6f74206163637065637465640000000000000000604482015260640162000dd6565b60008181526004602052604090206008015415620010185760405162461bcd60e51b815260206004820152601c60248201527f436f6d6d697373696f6e20616c726561647920696e74696c6973656400000000604482015260640162000dd6565b6001600160a01b0381163314620011ef5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c660000000000000000000000000000000000606482015260840162000dd6565b620011fb8282620040f2565b5050565b60006200120d813362003f8d565b6200121762004176565b50565b60005460ff166200126e5760405162461bcd60e51b815260206004820152601e60248201527f436f6e74726163742073686f756c6420626520696e697469616c697a65640000604482015260640162000dd6565b60005462010000900460ff1615620012bc5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640162000dd6565b33600090815260056020908152604080832084845260048352818420600901546001600160a01b031684529091529020546200133b5760405162461bcd60e51b815260206004820152601a60248201527f4578697374696e67204c6f636b20646f65736e74206578697374000000000000604482015260640162000dd6565b600081815260046020526040902054620013985760405162461bcd60e51b815260206004820152600d60248201527f7374616b65722e6964203d203000000000000000000000000000000000000000604482015260640162000dd6565b6000818152600460208181526040808420600981015460065483517f86d51626000000000000000000000000000000000000000000000000000000008152935192966001600160a01b0392831696909560649593909216936386d5162693808301939290829003018186803b1580156200141157600080fd5b505afa15801562001426573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200144c91906200474d565b84600201546200145d919062004b00565b62001469919062004adf565b90506000620014f2828560020154856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015620014b157600080fd5b505afa158015620014c6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620014ec91906200474d565b6200421c565b604051632770a7eb60e21b8152336004820152602481018290529091506001600160a01b03841690639dc29fac90604401602060405180830381600087803b1580156200153e57600080fd5b505af115801562001553573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001579919062004715565b620015c75760405162461bcd60e51b815260206004820152601160248201527f546f6b656e206275726e204661696c6564000000000000000000000000000000604482015260640162000dd6565b818460020154620015d9919062004b22565b600285015560408051808201825260008082526020808301828152338352600582528483208a845260048352858420600901546001600160a01b031684529091529290209051815590516001909101555b5050505050565b60005460ff16620016855760405162461bcd60e51b815260206004820152601e60248201527f436f6e74726163742073686f756c6420626520696e697469616c697a65640000604482015260640162000dd6565b60065460408051630eaf323560e31b8152905184926001600160a01b03169163757991a8916004808301926020929190829003018186803b158015620016ca57600080fd5b505afa158015620016df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200170591906200474d565b8114620017475760405162461bcd60e51b815260206004820152600f60248201526e0d2dcc6dee4e4cac6e840cae0dec6d608b1b604482015260640162000dd6565b600660009054906101000a90046001600160a01b03166001600160a01b0316633c7a3aff6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200179657600080fd5b505afa158015620017ab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620017d191906200490e565b63ffffffff16600660009054906101000a90046001600160a01b03166001600160a01b0316631865c57d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200182657600080fd5b505afa1580156200183b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200186191906200474d565b8114620018a35760405162461bcd60e51b815260206004820152600f60248201526e696e636f727265637420737461746560881b604482015260640162000dd6565b60005462010000900460ff1615620018f15760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640162000dd6565b60008381526004602090815260408083203384526005835281842060098201546001600160a01b031685529092529091208154620019725760405162461bcd60e51b815260206004820152601360248201527f7374616b657220646f65736e7420657869737400000000000000000000000000604482015260640162000dd6565b6001810154620019c55760405162461bcd60e51b815260206004820152600f60248201527f446964206e6f7420756e7374616b650000000000000000000000000000000000604482015260640162000dd6565b858160010154111562001a1b5760405162461bcd60e51b815260206004820152601a60248201527f57697468647261772065706f6368206e6f742072656163686564000000000000604482015260640162000dd6565b600654604080517f13072f49000000000000000000000000000000000000000000000000000000008152905188926001600160a01b0316916313072f49916004808301926020929190829003018186803b15801562001a7957600080fd5b505afa15801562001a8e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001ab491906200474d565b826001015462001ac5919062004ac4565b101562001b155760405162461bcd60e51b815260206004820152601560248201527f52656c6561736520506572696f64205061737365640000000000000000000000604482015260640162000dd6565b600082600201541162001b6b5760405162461bcd60e51b815260206004820152601160248201527f4e6f6e706f736974697665205374616b65000000000000000000000000000000604482015260640162000dd6565b3360009081526003602052604090205485141562001d62578160060154600660009054906101000a90046001600160a01b03166001600160a01b0316632628490f6040518163ffffffff1660e01b815260040160206040518083038186803b15801562001bd757600080fd5b505afa15801562001bec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001c1291906200474d565b826001015462001c23919062004b22565b101562001c735760405162461bcd60e51b815260206004820152601b60248201527f50617274696369706174656420696e204c6f636b20506572696f640000000000604482015260640162000dd6565b6009546040517f7164f0d600000000000000000000000000000000000000000000000000000000815260048101889052602481018790526001600160a01b0390911690637164f0d69060440160206040518083038186803b15801562001cd857600080fd5b505afa15801562001ced573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001d1391906200474d565b1562001d625760405162461bcd60e51b815260206004820152601060248201527f416c726561647920636f6d6d6974656400000000000000000000000000000000604482015260640162000dd6565b600982015481546040516370a0823160e01b81523360048201526001600160a01b039092169182906370a082319060240160206040518083038186803b15801562001dac57600080fd5b505afa15801562001dc1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001de791906200474d565b101562001e375760405162461bcd60e51b815260206004820152601260248201527f6c6f636b656420616d6f756e74206c6f73740000000000000000000000000000604482015260640162000dd6565b600062001ec283600001548560020154846001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801562001e8157600080fd5b505afa15801562001e96573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001ebc91906200474d565b6200428e565b8354604051632770a7eb60e21b815233600482015260248101919091529091506001600160a01b03831690639dc29fac90604401602060405180830381600087803b15801562001f1157600080fd5b505af115801562001f26573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001f4c919062004715565b62001f9a5760405162461bcd60e51b815260206004820152601160248201527f546f6b656e206275726e204661696c6564000000000000000000000000000000604482015260640162000dd6565b80846002015462001fac919062004b22565b600285015560408051808201825260008082526020808301828152338352600582528483208c845260048352858420600901546001600160a01b0316845290915292902090518155905160019091015533600090815260036020526040902054871480159062002020575060008460080154115b156200213657600060648560080154836200203c919062004b00565b62002048919062004adf565b600854600187015460405163a9059cbb60e01b81526001600160a01b03918216600482015260248101849052929350169063a9059cbb90604401602060405180830381600087803b1580156200209d57600080fd5b505af1158015620020b2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620020d8919062004715565b620021265760405162461bcd60e51b815260206004820152601060248201527f636f756c646e74207472616e7366657200000000000000000000000000000000604482015260640162000dd6565b62002132818362004b22565b9150505b60085460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b1580156200218357600080fd5b505af115801562002198573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620021be919062004715565b6200220c5760405162461bcd60e51b815260206004820152601060248201527f636f756c646e74207472616e7366657200000000000000000000000000000000604482015260640162000dd6565b6002840154604080518a8152602081018490529081019190915242606082015233608082015287907fcb952ec1bf200aac22a46945af9d0fb0a338afa67b1e450baa494d49a60238bd9060a00160405180910390a25050505050505050565b60005460ff16620022bf5760405162461bcd60e51b815260206004820152601e60248201527f436f6e74726163742073686f756c6420626520696e697469616c697a65640000604482015260640162000dd6565b60065460408051630eaf323560e31b8152905185926001600160a01b03169163757991a8916004808301926020929190829003018186803b1580156200230457600080fd5b505afa15801562002319573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200233f91906200474d565b8114620023815760405162461bcd60e51b815260206004820152600f60248201526e0d2dcc6dee4e4cac6e840cae0dec6d608b1b604482015260640162000dd6565b600660009054906101000a90046001600160a01b03166001600160a01b0316633c7a3aff6040518163ffffffff1660e01b815260040160206040518083038186803b158015620023d057600080fd5b505afa158015620023e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200240b91906200490e565b63ffffffff16600660009054906101000a90046001600160a01b03166001600160a01b0316631865c57d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200246057600080fd5b505afa15801562002475573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200249b91906200474d565b8114620024dd5760405162461bcd60e51b815260206004820152600f60248201526e696e636f727265637420737461746560881b604482015260640162000dd6565b60005462010000900460ff16156200252b5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640162000dd6565b60008381526004602052604090206007015460ff166200258e5760405162461bcd60e51b815260206004820152601860248201527f44656c65676574696f6e206e6f74206163637065637465640000000000000000604482015260640162000dd6565b6000838152600460205260409020600901546001600160a01b0316620025f75760405162461bcd60e51b815260206004820152601960248201527f5374616b657220686173206e6f74207374616b65642079657400000000000000604482015260640162000dd6565b6008546040516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b03909116906323b872dd90606401602060405180830381600087803b1580156200264a57600080fd5b505af11580156200265f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002685919062004715565b620026d35760405162461bcd60e51b815260206004820152601960248201527f525a5220746f6b656e207472616e73666572206661696c656400000000000000604482015260640162000dd6565b60008381526004602081815260408084206009015481516318160ddd60e01b815291516001600160a01b03909116949385936318160ddd9380830193919290829003018186803b1580156200272757600080fd5b505afa1580156200273c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200276291906200474d565b6000868152600460205260408120600201549192509062002786908890846200421c565b600087815260046020526040902060020154909150620027a7888262004ac4565b60008881526004602081905260409182902060020192909255516340c10f1960e01b81523391810191909152602481018390526001600160a01b038516906340c10f1990604401602060405180830381600087803b1580156200280957600080fd5b505af11580156200281e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002844919062004715565b506000878152600460209081526040918290206002015482518c815233928101929092528183018490526060820152426080820152905188917f62c8696fe18e088d2a304fd3b56ab661b0e33cd63749ede69d4986b79d0e3f7f919081900360a00190a2505050505050505050565b60005460ff16620029075760405162461bcd60e51b815260206004820152601e60248201527f436f6e74726163742073686f756c6420626520696e697469616c697a65640000604482015260640162000dd6565b60065460408051630eaf323560e31b8152905184926001600160a01b03169163757991a8916004808301926020929190829003018186803b1580156200294c57600080fd5b505afa15801562002961573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200298791906200474d565b8114620029c95760405162461bcd60e51b815260206004820152600f60248201526e0d2dcc6dee4e4cac6e840cae0dec6d608b1b604482015260640162000dd6565b600660009054906101000a90046001600160a01b03166001600160a01b0316633c7a3aff6040518163ffffffff1660e01b815260040160206040518083038186803b15801562002a1857600080fd5b505afa15801562002a2d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002a5391906200490e565b63ffffffff16600660009054906101000a90046001600160a01b03166001600160a01b0316631865c57d6040518163ffffffff1660e01b815260040160206040518083038186803b15801562002aa857600080fd5b505afa15801562002abd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002ae391906200474d565b811462002b255760405162461bcd60e51b815260206004820152600f60248201526e696e636f727265637420737461746560881b604482015260640162000dd6565b60005462010000900460ff161562002b735760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640162000dd6565b600660009054906101000a90046001600160a01b03166001600160a01b031663375b3c0a6040518163ffffffff1660e01b815260040160206040518083038186803b15801562002bc257600080fd5b505afa15801562002bd7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002bfd91906200474d565b83101562002c745760405162461bcd60e51b815260206004820152603160248201527f7374616b656420616d6f756e74206973206c657373207468616e206d696e696d60448201527f756d207374616b65207265717569726564000000000000000000000000000000606482015260840162000dd6565b6008546040516323b872dd60e01b8152336004820152306024820152604481018590526001600160a01b03909116906323b872dd90606401602060405180830381600087803b15801562002cc757600080fd5b505af115801562002cdc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002d02919062004715565b62002d505760405162461bcd60e51b815260206004820152601360248201527f736368207472616e73666572206661696c656400000000000000000000000000604482015260640162000dd6565b336000908152600360209081526040808320548084526004909252909120600201548162002fb05760025462002d8890600162004ac4565b60025560405160009062002d9c9062004609565b604051809103906000f08015801562002db9573d6000803e3d6000fd5b5090506040518061014001604052806002548152602001336001600160a01b031681526020018781526020016127108152602001888152602001600081526020016000815260200160001515815260200160008152602001826001600160a01b03168152506004600060025481526020019081526020016000206000820151816000015560208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548160ff02191690831515021790555061010082015181600801556101208201518160090160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550905050806001600160a01b03166340c10f1933886040518363ffffffff1660e01b815260040162002f3b9291906001600160a01b03929092168252602082015260400190565b602060405180830381600087803b15801562002f5657600080fd5b505af115801562002f6b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002f91919062004715565b5050600254336000908152600360205260409020819055915062003127565b60008281526004602081815260408084206009015481516318160ddd60e01b815291516001600160a01b03909116949385936318160ddd9380830193919290829003018186803b1580156200300457600080fd5b505afa15801562003019573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200303f91906200474d565b6000858152600460205260408120600201549192509062003063908990846200421c565b6000868152600460205260409020600201549091506200308590899062004ac4565b60008681526004602081905260409182902060020192909255516340c10f1960e01b81523391810191909152602481018290526001600160a01b038416906340c10f1990604401602060405180830381600087803b158015620030e757600080fd5b505af1158015620030fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003122919062004715565b505050505b60008281526004602090815260409182902060020154825189815291820184905281830152426060820152905183917f52d3b6bf695a499d39fcdb47e3b450c09f2f6aa091ca8809cc51c00e705996cc919081900360800190a2505050505050565b600062003197813362003f8d565b620012176200429d565b3360009081526003602052604090205480620031f05760405162461bcd60e51b815260206004820152600d60248201526c07374616b6572206964203d203609c1b604482015260640162000dd6565b600081815260046020908152604091829020600701805460ff191685151590811790915582513381529182015282917f9a1aef695ad010619946ddd232921e3c91ab385c2aba29927a1c6c675b01391a910160405180910390a25050565b600a81815481106200325f57600080fd5b600091825260209091200154905081565b60005460ff16620032c45760405162461bcd60e51b815260206004820152601e60248201527f436f6e74726163742073686f756c6420626520696e697469616c697a65640000604482015260640162000dd6565b600660009054906101000a90046001600160a01b03166001600160a01b0316639cec6f8a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200331357600080fd5b505afa15801562003328573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200334e91906200474d565b6200335a813362003f8d565b5060009182526004602052604090912060060155565b60005460ff16620033c45760405162461bcd60e51b815260206004820152601e60248201527f436f6e74726163742073686f756c6420626520696e697469616c697a65640000604482015260640162000dd6565b6000620033d2813362003f8d565b60005462010000900460ff166200342c5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015260640162000dd6565b600660009054906101000a90046001600160a01b03166001600160a01b031663862114bc6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200347b57600080fd5b505afa15801562003490573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620034b6919062004715565b15620035c7576008546040516370a0823160e01b81523060048201526001600160a01b039091169063a9059cbb90849083906370a082319060240160206040518083038186803b1580156200350a57600080fd5b505afa1580156200351f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200354591906200474d565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156200358c57600080fd5b505af1158015620035a1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001057919062004715565b60405162461bcd60e51b815260206004820152601860248201527f6573636170652068617463682069732064697361626c65640000000000000000604482015260640162000dd6565b600660009054906101000a90046001600160a01b03166001600160a01b03166380638d426040518163ffffffff1660e01b815260040160206040518083038186803b1580156200365f57600080fd5b505afa15801562003674573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200369a91906200474d565b620036a6813362003f8d565b6200162a8585858562004016565b600081815260046020526040812060020154620036d18362004325565b62000858919062004b00565b60005460ff16620037315760405162461bcd60e51b815260206004820152601e60248201527f436f6e74726163742073686f756c6420626520696e697469616c697a65640000604482015260640162000dd6565b60065460408051630eaf323560e31b8152905185926001600160a01b03169163757991a8916004808301926020929190829003018186803b1580156200377657600080fd5b505afa1580156200378b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620037b191906200474d565b8114620037f35760405162461bcd60e51b815260206004820152600f60248201526e0d2dcc6dee4e4cac6e840cae0dec6d608b1b604482015260640162000dd6565b600660009054906101000a90046001600160a01b03166001600160a01b0316633c7a3aff6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200384257600080fd5b505afa15801562003857573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200387d91906200490e565b63ffffffff16600660009054906101000a90046001600160a01b03166001600160a01b0316631865c57d6040518163ffffffff1660e01b815260040160206040518083038186803b158015620038d257600080fd5b505afa158015620038e7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200390d91906200474d565b81146200394f5760405162461bcd60e51b815260206004820152600f60248201526e696e636f727265637420737461746560881b604482015260640162000dd6565b60005462010000900460ff16156200399d5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640162000dd6565b60008481526004602052604090208054620039fb5760405162461bcd60e51b815260206004820152600d60248201527f7374616b65722e6964203d203000000000000000000000000000000000000000604482015260640162000dd6565b600081600201541162003a515760405162461bcd60e51b815260206004820152601160248201527f4e6f6e706f736974697665207374616b65000000000000000000000000000000604482015260640162000dd6565b33600090815260056020908152604080832060098501546001600160a01b031684529091529020541562003ac85760405162461bcd60e51b815260206004820152600d60248201527f4578697374696e67204c6f636b00000000000000000000000000000000000000604482015260640162000dd6565b6000841162003b1a5760405162461bcd60e51b815260206004820152601360248201527f4e6f6e2d506f73697469766520416d6f756e7400000000000000000000000000604482015260640162000dd6565b60098101546040516370a0823160e01b81523360048201526001600160a01b0390911690859082906370a082319060240160206040518083038186803b15801562003b6457600080fd5b505afa15801562003b79573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003b9f91906200474d565b101562003bef5760405162461bcd60e51b815260206004820152600e60248201527f496e76616c696420416d6f756e74000000000000000000000000000000000000604482015260640162000dd6565b6040518060400160405280868152602001600660009054906101000a90046001600160a01b03166001600160a01b0316632628490f6040518163ffffffff1660e01b815260040160206040518083038186803b15801562003c4f57600080fd5b505afa15801562003c64573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003c8a91906200474d565b62003c96908a62004ac4565b905233600081815260056020908152604080832060098801546001600160a01b031684528252918290208451815593810151600190940193909355600285015481518b815293840189905290830152426060830152608082015286907fb44df4d75e3569b7ec13a48a861de49778faac2eab0dbbb625f1ad8b136f9b299060a00160405180910390a250505050505050565b6000828152600160208190526040909120015462003d47813362003f8d565b620010578383620040f2565b62003dbe6040518061014001604052806000815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000815260200160006001600160a01b031681525090565b506000908152600460208181526040928390208351610140810185528154815260018201546001600160a01b039081169382019390935260028201549481019490945260038101546060850152918201546080840152600582015460a0840152600682015460c0840152600782015460ff16151560e084015260088201546101008401526009909101541661012082015290565b600054610100900460ff168062003e6c575060005460ff16155b62003ee05760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840162000dd6565b600054610100900460ff1615801562003f03576000805461ffff19166101011790555b600062003f11813362003f8d565b50600880546001600160a01b038088167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179092556007805487841690831617905560098054868416908316179055600680549285169290911691909117905580156200162a576000805461ff00191690555050505050565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff16620011fb5762003fce816001600160a01b031660146200437f565b62003fdb8360206200437f565b60405160200162003fee92919062004962565b60408051601f198184030181529082905262461bcd60e51b825262000dd691600401620049e7565b60008481526004602052604090819020600201805490859055905185907fab9982d99de79485b3cd6d1e72c881fd0342f42f1cbc7d220d4f373b97c4f3639062000d78908490889088908890429062004a8f565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff16620011fb5760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff1615620011fb5760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60005462010000900460ff16620041d05760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015260640162000dd6565b6000805462ff0000191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6000826200426d5760405162461bcd60e51b815260206004820152601260248201527f5374616b657273205374616b6520697320300000000000000000000000000000604482015260640162000dd6565b826200427a838662004b00565b62004286919062004adf565b949350505050565b6000816200427a848662004b00565b60005462010000900460ff1615620042eb5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640162000dd6565b6000805462ff00001916620100001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258620041ff3390565b600081815260046020526040812060030154819062004348906127109062004adf565b9050600a81815481106200436c57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154915050919050565b606060006200439083600262004b00565b6200439d90600262004ac4565b67ffffffffffffffff811115620043c457634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015620043ef576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106200443557634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110620044a757634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000620044e584600262004b00565b620044f290600162004ac4565b90505b6001811115620045b1577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106200454357634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106200456857634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93620045a98162004b6b565b9050620044f5565b508315620046025760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640162000dd6565b9392505050565b6110ec8062004bd783390190565b60006020828403121562004629578081fd5b8135620046028162004bb1565b60006020828403121562004648578081fd5b8151620046028162004bb1565b6000806040838503121562004668578081fd5b8235620046758162004bb1565b91506020830135620046878162004bb1565b809150509250929050565b60008060008060808587031215620046a8578182fd5b8435620046b58162004bb1565b93506020850135620046c78162004bb1565b92506040850135620046d98162004bb1565b91506060850135620046eb8162004bb1565b939692955090935050565b60006020828403121562004708578081fd5b8135620046028162004bc7565b60006020828403121562004727578081fd5b8151620046028162004bc7565b60006020828403121562004746578081fd5b5035919050565b6000602082840312156200475f578081fd5b5051919050565b6000806040838503121562004779578182fd5b823591506020830135620046878162004bb1565b6000602082840312156200479f578081fd5b81356001600160e01b03198116811462004602578182fd5b600080600060608486031215620047cc578283fd5b833592506020840135620047e08162004bb1565b929592945050506040919091013590565b6000806040838503121562004804578182fd5b50508035926020909101359150565b6000806000806080858703121562004829578182fd5b8435935060208501359250604085013567ffffffffffffffff808211156200484f578384fd5b818701915087601f83011262004863578384fd5b81358181111562004878576200487862004b9b565b604051601f8201601f19908116603f01168101908382118183101715620048a357620048a362004b9b565b816040528281528a6020848701011115620048bc578687fd5b826020860160208301379182016020019590955295989497509495606001359450505050565b600080600060608486031215620048f7578081fd5b505081359360208301359350604090920135919050565b60006020828403121562004920578081fd5b815163ffffffff8116811462004602578182fd5b600081518084526200494e81602086016020860162004b3c565b601f01601f19169290920160200192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516200499c81601785016020880162004b3c565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351620049db81602884016020880162004b3c565b01602801949350505050565b60208152600062004602602083018462004934565b8151815260208083015161014083019162004a21908401826001600160a01b03169052565b5060408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015162004a6860e084018215159052565b506101008381015190830152610120928301516001600160a01b0316929091019190915290565b85815284602082015260a06040820152600062004ab060a083018662004934565b606083019490945250608001529392505050565b6000821982111562004ada5762004ada62004b85565b500190565b60008262004afb57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161562004b1d5762004b1d62004b85565b500290565b60008282101562004b375762004b3762004b85565b500390565b60005b8381101562004b5957818101518382015260200162004b3f565b8381111562000c825750506000910152565b60008162004b7d5762004b7d62004b85565b506000190190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200121757600080fd5b80151581146200121757600080fdfe60806040523480156200001157600080fd5b5060408051808201825260048082526339a92d2960e11b6020808401828152855180870190965292855284015281519192916200005191600391620000e0565b50805162000067906004906020840190620000e0565b505050620000846200007e6200008a60201b60201c565b6200008e565b620001c3565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620000ee9062000186565b90600052602060002090601f0160209004810192826200011257600085556200015d565b82601f106200012d57805160ff19168380011785556200015d565b828001600101855582156200015d579182015b828111156200015d57825182559160200191906001019062000140565b506200016b9291506200016f565b5090565b5b808211156200016b576000815560010162000170565b600181811c908216806200019b57607f821691505b60208210811415620001bd57634e487b7160e01b600052602260045260246000fd5b50919050565b610f1980620001d36000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063715018a611610097578063a457c2d711610066578063a457c2d714610209578063a9059cbb1461021c578063dd62ed3e1461022f578063f2fde38b1461026857600080fd5b8063715018a6146101c95780638da5cb5b146101d357806395d89b41146101ee5780639dc29fac146101f657600080fd5b8063313ce567116100d3578063313ce5671461016b578063395093511461017a57806340c10f191461018d57806370a08231146101a057600080fd5b806306fdde0314610105578063095ea7b31461012357806318160ddd1461014657806323b872dd14610158575b600080fd5b61010d61027b565b60405161011a9190610e10565b60405180910390f35b610136610131366004610de7565b61030d565b604051901515815260200161011a565b6002545b60405190815260200161011a565b610136610166366004610dac565b610323565b6040516012815260200161011a565b610136610188366004610de7565b6103e7565b61013661019b366004610de7565b610423565b61014a6101ae366004610d59565b6001600160a01b031660009081526020819052604090205490565b6101d161048a565b005b6005546040516001600160a01b03909116815260200161011a565b61010d6104f0565b610136610204366004610de7565b6104ff565b610136610217366004610de7565b610566565b61013661022a366004610de7565b610617565b61014a61023d366004610d7a565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6101d1610276366004610d59565b610624565b60606003805461028a90610e92565b80601f01602080910402602001604051908101604052809291908181526020018280546102b690610e92565b80156103035780601f106102d857610100808354040283529160200191610303565b820191906000526020600020905b8154815290600101906020018083116102e657829003601f168201915b5050505050905090565b600061031a338484610706565b50600192915050565b600061033084848461085f565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103cf5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e636500000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6103dc8533858403610706565b506001949350505050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161031a91859061041e908690610e63565b610706565b6005546000906001600160a01b031633146104805760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103c6565b61031a8383610a77565b6005546001600160a01b031633146104e45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103c6565b6104ee6000610b56565b565b60606004805461028a90610e92565b6005546000906001600160a01b0316331461055c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103c6565b61031a8383610bc0565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156106005760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084016103c6565b61060d3385858403610706565b5060019392505050565b600061031a33848461085f565b6005546001600160a01b0316331461067e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103c6565b6001600160a01b0381166106fa5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016103c6565b61070381610b56565b50565b6001600160a01b0383166107815760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016103c6565b6001600160a01b0382166107fd5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016103c6565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0383166108db5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016103c6565b6001600160a01b0382166109575760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016103c6565b6001600160a01b038316600090815260208190526040902054818110156109e65760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016103c6565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610a1d908490610e63565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a6991815260200190565b60405180910390a350505050565b6001600160a01b038216610acd5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103c6565b8060026000828254610adf9190610e63565b90915550506001600160a01b03821660009081526020819052604081208054839290610b0c908490610e63565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600580546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038216610c3c5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016103c6565b6001600160a01b03821660009081526020819052604090205481811015610ccb5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f636500000000000000000000000000000000000000000000000000000000000060648201526084016103c6565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610cfa908490610e7b565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610852565b80356001600160a01b0381168114610d5457600080fd5b919050565b600060208284031215610d6a578081fd5b610d7382610d3d565b9392505050565b60008060408385031215610d8c578081fd5b610d9583610d3d565b9150610da360208401610d3d565b90509250929050565b600080600060608486031215610dc0578081fd5b610dc984610d3d565b9250610dd760208501610d3d565b9150604084013590509250925092565b60008060408385031215610df9578182fd5b610e0283610d3d565b946020939093013593505050565b6000602080835283518082850152825b81811015610e3c57858101830151858201604001528201610e20565b81811115610e4d5783604083870101525b50601f01601f1916929092016040019392505050565b60008219821115610e7657610e76610ecd565b500190565b600082821015610e8d57610e8d610ecd565b500390565b600181811c90821680610ea657607f821691505b60208210811415610ec757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea264697066735822122031069c68548a0dc382d090e97127b60fb7ee605e347dfdaab7512cfd0250d8d664736f6c63430008040033a2646970667358221220c2ea2c05f1ea653f02854b8e38fbb97c1f5d0746d3014d1a92bbe08deec78d0f64736f6c63430008040033","deployedBytecode":"","abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"stakerId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"previousAge","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newAge","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"epoch","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"AgeChange","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"epoch","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"stakerId","type":"uint256"},{"indexed":false,"internalType":"address","name":"delegator","type":"address"},{"indexed":false,"internalType":"uint256","name":"previousStake","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newStake","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"Delegated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"stakerId","type":"uint256"},{"indexed":false,"internalType":"address","name":"staker","type":"address"},{"indexed":false,"internalType":"bool","name":"delegationEnabled","type":"bool"}],"name":"DelegationAcceptanceChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"stakerId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"previousStake","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newStake","type":"uint256"},{"indexed":false,"internalType":"string","name":"reason","type":"string"},{"indexed":false,"internalType":"uint256","name":"epoch","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"StakeChange","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"epoch","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"stakerId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"previousStake","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newStake","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"Staked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"epoch","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"stakerId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newStake","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"},{"indexed":false,"internalType":"address","name":"unstaker","type":"address"}],"name":"Unstaked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"epoch","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"stakerId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newStake","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"},{"indexed":false,"internalType":"address","name":"withdrawer","type":"address"}],"name":"Withdrew","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"commission","type":"uint256"}],"name":"decreaseCommission","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"epoch","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"stakerId","type":"uint256"}],"name":"delegate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"escape","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"stakerId","type":"uint256"}],"name":"getAge","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"stakerId","type":"uint256"}],"name":"getInfluence","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getNumStakers","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"stakerId","type":"uint256"}],"name":"getStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"getStaker","outputs":[{"components":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"address","name":"_address","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"age","type":"uint256"},{"internalType":"uint256","name":"epochStaked","type":"uint256"},{"internalType":"uint256","name":"epochLastCommitted","type":"uint256"},{"internalType":"uint256","name":"epochLastRevealed","type":"uint256"},{"internalType":"bool","name":"acceptDelegation","type":"bool"},{"internalType":"uint256","name":"commission","type":"uint256"},{"internalType":"address","name":"tokenAddress","type":"address"}],"internalType":"struct Structs.Staker","name":"staker","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"getStakerId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"razorAddress","type":"address"},{"internalType":"address","name":"rewardManagerAddress","type":"address"},{"internalType":"address","name":"voteManagersAddress","type":"address"},{"internalType":"address","name":"parametersAddress","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"locks","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"withdrawAfter","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"maturities","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"numStakers","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"parameters","outputs":[{"internalType":"contract IParameters","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"razor","outputs":[{"internalType":"contract RAZOR","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"stakerId","type":"uint256"}],"name":"resetLock","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rewardManager","outputs":[{"internalType":"contract IRewardManager","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"commission","type":"uint256"}],"name":"setCommission","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"status","type":"bool"}],"name":"setDelegationAcceptance","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint256","name":"_age","type":"uint256"},{"internalType":"uint256","name":"_epoch","type":"uint256"}],"name":"setStakerAge","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint256","name":"_epochLastRevealed","type":"uint256"}],"name":"setStakerEpochLastRevealed","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint256","name":"_stake","type":"uint256"},{"internalType":"string","name":"_reason","type":"string"},{"internalType":"uint256","name":"_epoch","type":"uint256"}],"name":"setStakerStake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"address","name":"bountyHunter","type":"address"},{"internalType":"uint256","name":"epoch","type":"uint256"}],"name":"slash","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"epoch","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"stake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"stakerIds","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"stakers","outputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"address","name":"_address","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"age","type":"uint256"},{"internalType":"uint256","name":"epochStaked","type":"uint256"},{"internalType":"uint256","name":"epochLastCommitted","type":"uint256"},{"internalType":"uint256","name":"epochLastRevealed","type":"uint256"},{"internalType":"bool","name":"acceptDelegation","type":"bool"},{"internalType":"uint256","name":"commission","type":"uint256"},{"internalType":"address","name":"tokenAddress","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"epoch","type":"uint256"},{"internalType":"uint256","name":"stakerId","type":"uint256"},{"internalType":"uint256","name":"sAmount","type":"uint256"}],"name":"unstake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"stakerId","type":"uint256"}],"name":"updateCommitmentEpoch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"voteManager","outputs":[{"internalType":"contract IVoteManager","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"epoch","type":"uint256"},{"internalType":"uint256","name":"stakerId","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}]}